// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package prvvote

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// PrvvoteMetaData contains all meta data concerning the Prvvote contract.
var PrvvoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506159ee80620000216000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a9059cbb11610097578063c3cda52011610071578063c3cda520146105b3578063d505accf146105cf578063dd62ed3e146105eb578063f1127ed81461061b576101c4565b8063a9059cbb14610523578063b48272cc14610553578063b4b5ea5714610583576101c4565b80638e539e8c116100d35780638e539e8c1461047557806395d89b41146104a55780639ab24eb0146104c3578063a457c2d7146104f3576101c4565b806370a08231146103e5578063782d6fe1146104155780637ecebe0014610445576101c4565b806339509351116101665780634cd88b76116101405780634cd88b761461034d578063587cde1e146103695780635c19a95c146103995780636fcfff45146103b5576101c4565b806339509351146102d15780633a46b1a814610301578063454b060814610331576101c4565b806323b872dd116101a257806323b872dd1461023557806324f178ff14610265578063313ce567146102955780633644e515146102b3576101c4565b806306fdde03146101c9578063095ea7b3146101e757806318160ddd14610217575b600080fd5b6101d161064b565b6040516101de9190613120565b60405180910390f35b61020160048036038101906101fc91906131ea565b6106dd565b60405161020e9190613245565b60405180910390f35b61021f610700565b60405161022c919061326f565b60405180910390f35b61024f600480360381019061024a919061328a565b61070a565b60405161025c9190613245565b60405180910390f35b61027f600480360381019061027a91906137be565b610739565b60405161028c9190613245565b60405180910390f35b61029d61096c565b6040516102aa9190613970565b60405180910390f35b6102bb610975565b6040516102c8919061399a565b60405180910390f35b6102eb60048036038101906102e691906131ea565b610984565b6040516102f89190613245565b60405180910390f35b61031b600480360381019061031691906131ea565b6109bb565b604051610328919061326f565b60405180910390f35b61034b600480360381019061034691906139b5565b610a4f565b005b61036760048036038101906103629190613a83565b610b24565b005b610383600480360381019061037e9190613afb565b610c66565b6040516103909190613b37565b60405180910390f35b6103b360048036038101906103ae9190613afb565b610cb8565b005b6103cf60048036038101906103ca9190613afb565b610ccc565b6040516103dc9190613b71565b60405180910390f35b6103ff60048036038101906103fa9190613afb565b610d20565b60405161040c919061326f565b60405180910390f35b61042f600480360381019061042a91906131ea565b610d69565b60405161043c9190613bb3565b60405180910390f35b61045f600480360381019061045a9190613afb565b610d85565b60405161046c919061326f565b60405180910390f35b61048f600480360381019061048a91906139b5565b610dd5565b60405161049c919061326f565b60405180910390f35b6104ad610e2b565b6040516104ba9190613120565b60405180910390f35b6104dd60048036038101906104d89190613afb565b610ebd565b6040516104ea919061326f565b60405180910390f35b61050d600480360381019061050891906131ea565b610fce565b60405161051a9190613245565b60405180910390f35b61053d600480360381019061053891906131ea565b611045565b60405161054a9190613245565b60405180910390f35b61056d60048036038101906105689190613c29565b611068565b60405161057a9190613245565b60405180910390f35b61059d60048036038101906105989190613afb565b6110c3565b6040516105aa9190613bb3565b60405180910390f35b6105cd60048036038101906105c89190613c89565b6110dd565b005b6105e960048036038101906105e49190613d16565b6111e1565b005b61060560048036038101906106009190613db8565b611323565b604051610612919061326f565b60405180910390f35b61063560048036038101906106309190613e24565b6113aa565b6040516106429190613ed9565b60405180910390f35b60606036805461065a90613f23565b80601f016020809104026020016040519081016040528092919081815260200182805461068690613f23565b80156106d35780601f106106a8576101008083540402835291602001916106d3565b820191906000526020600020905b8154815290600101906020018083116106b657829003601f168201915b5050505050905090565b6000806106e86114ba565b90506106f58185856114c2565b600191505092915050565b6000603554905090565b6000806107156114ba565b905061072285828561168b565b61072d858585611717565b60019150509392505050565b6000808a1161077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077490613fa0565b60405180910390fd5b60828b5110156107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b99061400c565b60405180910390fd5b60006107cd8c611990565b905060aa816000015160ff161480156107ed57506001816020015160ff16145b61082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390614078565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161461089e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610895906140e4565b60405180910390fd5b61013060008260a00151815260200190815260200160002060009054906101000a900460ff1615610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb90614150565b60405180910390fd5b600161013060008360a00151815260200190815260200160002060006101000a81548160ff0219169083151502179055506109478c8c8c8c8c8c8c8c8c8c611ab9565b61095981606001518260800151611bc8565b60019150509a9950505050505050505050565b60006009905090565b600061097f611c55565b905090565b60008061098f6114ba565b90506109b08185856109a18589611323565b6109ab919061419f565b6114c2565b600191505092915050565b60004382106109ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f69061421f565b60405180910390fd5b610a4760cd60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083611c95565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166323b872dd610a746114ba565b6000846040518463ffffffff1660e01b8152600401610a959392919061423f565b6020604051808303816000875af1158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad8919061428b565b50610aea610ae46114ba565b82611bc8565b7fd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d54681604051610b19919061326f565b60405180910390a150565b60008060019054906101000a900460ff16159050808015610b555750600160008054906101000a900460ff1660ff16105b80610b825750610b6430611de6565b158015610b815750600160008054906101000a900460ff1660ff16145b5b610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb89061432a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610bfe576001600060016101000a81548160ff0219169083151502179055505b610c088383611e09565b8015610c615760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c58919061438f565b60405180910390a15b505050565b600080610c7283611e66565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cae5780610cb0565b825b915050919050565b610cc9610cc36114ba565b82611ecf565b50565b6000610d1960cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611fe9565b9050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610d7d610d7884846109bb565b61203c565b905092915050565b6000610dce609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612097565b9050919050565b6000438210610e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e109061421f565b60405180910390fd5b610e2460ce83611c95565b9050919050565b606060378054610e3a90613f23565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6690613f23565b8015610eb35780601f10610e8857610100808354040283529160200191610eb3565b820191906000526020600020905b815481529060010190602001808311610e9657829003601f168201915b5050505050905090565b60008060cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008114610fa55760cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600182610f5991906143aa565b81548110610f6a57610f696143de565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610fa8565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b600080610fd96114ba565b90506000610fe78286611323565b90508381101561102c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110239061447f565b60405180910390fd5b61103982868684036114c2565b60019250505092915050565b6000806110506114ba565b905061105d818585611717565b600191505092915050565b600061107b6110756114ba565b836120a5565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e308585856040516110b094939291906144cc565b60405180910390a1600190509392505050565b60006110d66110d183610ebd565b61203c565b9050919050565b83421115611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111790614558565b60405180910390fd5b600061118261117a7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf89898960405160200161115f9493929190614578565b604051602081830303815290604052805190602001206120c3565b8585856120dd565b905061118d81612108565b86146111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c590614609565b60405180910390fd5b6111d88188611ecf565b50505050505050565b83421115611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121b90614675565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886112538c612108565b8960405160200161126996959493929190614695565b604051602081830303815290604052805190602001209050600061128c826120c3565b9050600061129c828787876120dd565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130390614742565b60405180910390fd5b6113178a8a8a6114c2565b50505050505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6113b2612fe7565b60cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208263ffffffff1681548110611409576114086143de565b5b906000526020600020016040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611531576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611528906147d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159790614866565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161167e919061326f565b60405180910390a3505050565b60006116978484611323565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146117115781811015611703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fa906148d2565b60405180910390fd5b61171084848484036114c2565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d90614964565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906149f6565b60405180910390fd5b611800838383612166565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187e90614a88565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611977919061326f565b60405180910390a361198a84848461216b565b50505050565b611998613025565b6119a0613025565b826000815181106119b4576119b36143de565b5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106119e7576119e66143de565b5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b60008a8a604051602001611ace929190614b10565b604051602081830303815290604052805190602001209050611aee612196565b73ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611b3b9b9a99989796959493929190614e30565b602060405180830381865afa158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c919061428b565b611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290614f51565b60405180910390fd5b5050505050505050505050565b611bd282826121c7565b611bda61231e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611c00610700565b1115611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3890614fe3565b60405180910390fd5b611c4f60ce6123348361234a565b50505050565b6000611c907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c83612619565b611c8b612623565b61262d565b905090565b600080838054905090506000808290506005831115611d0b576000611cb984612667565b84611cc491906143aa565b905085611cd18883612760565b60000160009054906101000a900463ffffffff1663ffffffff161115611cf957809150611d09565b600181611d06919061419f565b92505b505b5b80821015611d6b576000611d208383612775565b905085611d2d8883612760565b60000160009054906101000a900463ffffffff1663ffffffff161115611d5557809150611d65565b600181611d62919061419f565b92505b50611d0c565b60008114611dba57611d8986600183611d8491906143aa565b612760565b60000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611dbd565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4f90615075565b60405180910390fd5b611e62828261279b565b5050565b600060cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000611eda83610c66565b90506000611ee784610d20565b90508260cc60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a4611fe382848361280e565b50505050565b600063ffffffff8016821115612034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202b90615107565b60405180910390fd5b819050919050565b60006bffffffffffffffffffffffff801682111561208f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208690615199565b60405180910390fd5b819050919050565b600081600001549050919050565b6120af8282612a07565b6120bd60ce612bd68361234a565b50505050565b60006120d66120d0611c55565b83612bec565b9050919050565b60008060006120ee87878787612c1f565b915091506120fb81612d01565b8192505050949350505050565b600080609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061215581612097565b915061216081612e67565b50919050565b505050565b612176838383612e7d565b61219161218284610c66565b61218b84610c66565b8361280e565b505050565b6000807f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd260001b9050805491505090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222d90615205565b60405180910390fd5b61224260008383612166565b8060356000828254612254919061419f565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612306919061326f565b60405180910390a361231a6000838361216b565b5050565b60006bffffffffffffffffffffffff8016905090565b60008183612342919061419f565b905092915050565b6000806000858054905090506000808214612419576123758760018461237091906143aa565b612760565b6040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050612455565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505b905080602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935061248a84868863ffffffff16565b92506000821180156124a5575043816000015163ffffffff16145b1561251f576124b383612e82565b6124c9886001856124c491906143aa565b612760565b60000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555061260f565b86604051806040016040528061253443611fe9565b63ffffffff16815260200161254886612e82565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b5050935093915050565b6000606554905090565b6000606654905090565b60008383834630604051602001612648959493929190615225565b6040516020818303038152906040528051906020012090509392505050565b6000808203612679576000905061275b565b6000600161268684612eed565b901c6001901b905060018184816126a05761269f615278565b5b048201901c905060018184816126b9576126b8615278565b5b048201901c905060018184816126d2576126d1615278565b5b048201901c905060018184816126eb576126ea615278565b5b048201901c9050600181848161270457612703615278565b5b048201901c9050600181848161271d5761271c615278565b5b048201901c9050600181848161273657612735615278565b5b048201901c90506127578182858161275157612750615278565b5b04612fce565b9150505b919050565b60008260005281602060002001905092915050565b6000600282841861278691906152a7565b828416612793919061419f565b905092915050565b600060019054906101000a900460ff166127ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e190615075565b60405180910390fd5b81603690816127f9919061547a565b508060379081612809919061547a565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561284a5750600081115b15612a0257600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612928576000806128d160cd60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612bd68561234a565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161291d92919061554c565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612a01576000806129aa60cd60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206123348561234a565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516129f692919061554c565b60405180910390a250505b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6d906155e7565b60405180910390fd5b612a8282600083612166565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0090615679565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612bbd919061326f565b60405180910390a3612bd18360008461216b565b505050565b60008183612be491906143aa565b905092915050565b60008282604051602001612c01929190615711565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612c5a576000600391509150612cf8565b600060018787878760405160008152602001604052604051612c7f9493929190615748565b6020604051602081039080840390855afa158015612ca1573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612cef57600060019250925050612cf8565b80600092509250505b94509492505050565b60006004811115612d1557612d1461578d565b5b816004811115612d2857612d2761578d565b5b0315612e645760016004811115612d4257612d4161578d565b5b816004811115612d5557612d5461578d565b5b03612d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8c90615808565b60405180910390fd5b60026004811115612da957612da861578d565b5b816004811115612dbc57612dbb61578d565b5b03612dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df390615874565b60405180910390fd5b60036004811115612e1057612e0f61578d565b5b816004811115612e2357612e2261578d565b5b03612e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5a90615906565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016821115612ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edc90615998565b60405180910390fd5b819050919050565b600080600090506000608084901c1115612f0f57608083901c92506080810190505b6000604084901c1115612f2a57604083901c92506040810190505b6000602084901c1115612f4557602083901c92506020810190505b6000601084901c1115612f6057601083901c92506010810190505b6000600884901c1115612f7b57600883901c92506008810190505b6000600484901c1115612f9657600483901c92506004810190505b6000600284901c1115612fb157600283901c92506002810190505b6000600184901c1115612fc5576001810190505b80915050919050565b6000818310612fdd5781612fdf565b825b905092915050565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156130ca5780820151818401526020810190506130af565b60008484015250505050565b6000601f19601f8301169050919050565b60006130f282613090565b6130fc818561309b565b935061310c8185602086016130ac565b613115816130d6565b840191505092915050565b6000602082019050818103600083015261313a81846130e7565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061318182613156565b9050919050565b61319181613176565b811461319c57600080fd5b50565b6000813590506131ae81613188565b92915050565b6000819050919050565b6131c7816131b4565b81146131d257600080fd5b50565b6000813590506131e4816131be565b92915050565b600080604083850312156132015761320061314c565b5b600061320f8582860161319f565b9250506020613220858286016131d5565b9150509250929050565b60008115159050919050565b61323f8161322a565b82525050565b600060208201905061325a6000830184613236565b92915050565b613269816131b4565b82525050565b60006020820190506132846000830184613260565b92915050565b6000806000606084860312156132a3576132a261314c565b5b60006132b18682870161319f565b93505060206132c28682870161319f565b92505060406132d3868287016131d5565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61331f826130d6565b810181811067ffffffffffffffff8211171561333e5761333d6132e7565b5b80604052505050565b6000613351613142565b905061335d8282613316565b919050565b600067ffffffffffffffff82111561337d5761337c6132e7565b5b613386826130d6565b9050602081019050919050565b82818337600083830152505050565b60006133b56133b084613362565b613347565b9050828152602081018484840111156133d1576133d06132e2565b5b6133dc848285613393565b509392505050565b600082601f8301126133f9576133f86132dd565b5b81356134098482602086016133a2565b91505092915050565b600067ffffffffffffffff82111561342d5761342c6132e7565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61345681613443565b811461346157600080fd5b50565b6000813590506134738161344d565b92915050565b600061348c61348784613412565b613347565b905080838252602082019050602084028301858111156134af576134ae61343e565b5b835b818110156134d857806134c48882613464565b8452602084019350506020810190506134b1565b5050509392505050565b600082601f8301126134f7576134f66132dd565b5b8135613507848260208601613479565b91505092915050565b600067ffffffffffffffff82111561352b5761352a6132e7565b5b602082029050602081019050919050565b6135458161322a565b811461355057600080fd5b50565b6000813590506135628161353c565b92915050565b600061357b61357684613510565b613347565b9050808382526020820190506020840283018581111561359e5761359d61343e565b5b835b818110156135c757806135b38882613553565b8452602084019350506020810190506135a0565b5050509392505050565b600082601f8301126135e6576135e56132dd565b5b81356135f6848260208601613568565b91505092915050565b600067ffffffffffffffff82111561361a576136196132e7565b5b602082029050602081019050919050565b600061363e613639846135ff565b613347565b905080838252602082019050602084028301858111156136615761366061343e565b5b835b8181101561368a578061367688826131d5565b845260208401935050602081019050613663565b5050509392505050565b600082601f8301126136a9576136a86132dd565b5b81356136b984826020860161362b565b91505092915050565b600067ffffffffffffffff8211156136dd576136dc6132e7565b5b602082029050602081019050919050565b600060ff82169050919050565b613704816136ee565b811461370f57600080fd5b50565b600081359050613721816136fb565b92915050565b600061373a613735846136c2565b613347565b9050808382526020820190506020840283018581111561375d5761375c61343e565b5b835b8181101561378657806137728882613712565b84526020840193505060208101905061375f565b5050509392505050565b600082601f8301126137a5576137a46132dd565b5b81356137b5848260208601613727565b91505092915050565b6000806000806000806000806000806101408b8d0312156137e2576137e161314c565b5b60008b013567ffffffffffffffff811115613800576137ff613151565b5b61380c8d828e016133e4565b9a5050602061381d8d828e016131d5565b99505060408b013567ffffffffffffffff81111561383e5761383d613151565b5b61384a8d828e016134e2565b98505060608b013567ffffffffffffffff81111561386b5761386a613151565b5b6138778d828e016135d1565b97505060806138888d828e01613464565b96505060a06138998d828e01613464565b95505060c08b013567ffffffffffffffff8111156138ba576138b9613151565b5b6138c68d828e01613694565b94505060e08b013567ffffffffffffffff8111156138e7576138e6613151565b5b6138f38d828e01613790565b9350506101008b013567ffffffffffffffff81111561391557613914613151565b5b6139218d828e016134e2565b9250506101208b013567ffffffffffffffff81111561394357613942613151565b5b61394f8d828e016134e2565b9150509295989b9194979a5092959850565b61396a816136ee565b82525050565b60006020820190506139856000830184613961565b92915050565b61399481613443565b82525050565b60006020820190506139af600083018461398b565b92915050565b6000602082840312156139cb576139ca61314c565b5b60006139d9848285016131d5565b91505092915050565b600067ffffffffffffffff8211156139fd576139fc6132e7565b5b613a06826130d6565b9050602081019050919050565b6000613a26613a21846139e2565b613347565b905082815260208101848484011115613a4257613a416132e2565b5b613a4d848285613393565b509392505050565b600082601f830112613a6a57613a696132dd565b5b8135613a7a848260208601613a13565b91505092915050565b60008060408385031215613a9a57613a9961314c565b5b600083013567ffffffffffffffff811115613ab857613ab7613151565b5b613ac485828601613a55565b925050602083013567ffffffffffffffff811115613ae557613ae4613151565b5b613af185828601613a55565b9150509250929050565b600060208284031215613b1157613b1061314c565b5b6000613b1f8482850161319f565b91505092915050565b613b3181613176565b82525050565b6000602082019050613b4c6000830184613b28565b92915050565b600063ffffffff82169050919050565b613b6b81613b52565b82525050565b6000602082019050613b866000830184613b62565b92915050565b60006bffffffffffffffffffffffff82169050919050565b613bad81613b8c565b82525050565b6000602082019050613bc86000830184613ba4565b92915050565b600080fd5b60008083601f840112613be957613be86132dd565b5b8235905067ffffffffffffffff811115613c0657613c05613bce565b5b602083019150836001820283011115613c2257613c2161343e565b5b9250929050565b600080600060408486031215613c4257613c4161314c565b5b600084013567ffffffffffffffff811115613c6057613c5f613151565b5b613c6c86828701613bd3565b93509350506020613c7f868287016131d5565b9150509250925092565b60008060008060008060c08789031215613ca657613ca561314c565b5b6000613cb489828a0161319f565b9650506020613cc589828a016131d5565b9550506040613cd689828a016131d5565b9450506060613ce789828a01613712565b9350506080613cf889828a01613464565b92505060a0613d0989828a01613464565b9150509295509295509295565b600080600080600080600060e0888a031215613d3557613d3461314c565b5b6000613d438a828b0161319f565b9750506020613d548a828b0161319f565b9650506040613d658a828b016131d5565b9550506060613d768a828b016131d5565b9450506080613d878a828b01613712565b93505060a0613d988a828b01613464565b92505060c0613da98a828b01613464565b91505092959891949750929550565b60008060408385031215613dcf57613dce61314c565b5b6000613ddd8582860161319f565b9250506020613dee8582860161319f565b9150509250929050565b613e0181613b52565b8114613e0c57600080fd5b50565b600081359050613e1e81613df8565b92915050565b60008060408385031215613e3b57613e3a61314c565b5b6000613e498582860161319f565b9250506020613e5a85828601613e0f565b9150509250929050565b613e6d81613b52565b82525050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b613ea481613e73565b82525050565b604082016000820151613ec06000850182613e64565b506020820151613ed36020850182613e9b565b50505050565b6000604082019050613eee6000830184613eaa565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f3b57607f821691505b602082108103613f4e57613f4d613ef4565b5b50919050565b7f45524332303a20696e76616c696420626561636f6e2068656967687400000000600082015250565b6000613f8a601c8361309b565b9150613f9582613f54565b602082019050919050565b60006020820190508181036000830152613fb981613f7d565b9050919050565b7f45524332303a20696e76616c696420696e737400000000000000000000000000600082015250565b6000613ff660138361309b565b915061400182613fc0565b602082019050919050565b6000602082019050818103600083015261402581613fe9565b9050919050565b7f45524332303a20696e76616c696420696e737427732064617461000000000000600082015250565b6000614062601a8361309b565b915061406d8261402c565b602082019050919050565b6000602082019050818103600083015261409181614055565b9050919050565b7f45524332303a20696e76616c696420746f6b656e000000000000000000000000600082015250565b60006140ce60148361309b565b91506140d982614098565b602082019050919050565b600060208201905081810360008301526140fd816140c1565b9050919050565b7f45524332303a20747820697320616c7265616479207573656400000000000000600082015250565b600061413a60198361309b565b915061414582614104565b602082019050919050565b600060208201905081810360008301526141698161412d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006141aa826131b4565b91506141b5836131b4565b92508282019050808211156141cd576141cc614170565b5b92915050565b7f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400600082015250565b6000614209601f8361309b565b9150614214826141d3565b602082019050919050565b60006020820190508181036000830152614238816141fc565b9050919050565b60006060820190506142546000830186613b28565b6142616020830185613b28565b61426e6040830184613260565b949350505050565b6000815190506142858161353c565b92915050565b6000602082840312156142a1576142a061314c565b5b60006142af84828501614276565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614314602e8361309b565b915061431f826142b8565b604082019050919050565b6000602082019050818103600083015261434381614307565b9050919050565b6000819050919050565b6000819050919050565b600061437961437461436f8461434a565b614354565b6136ee565b9050919050565b6143898161435e565b82525050565b60006020820190506143a46000830184614380565b92915050565b60006143b5826131b4565b91506143c0836131b4565b92508282039050818111156143d8576143d7614170565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061446960258361309b565b91506144748261440d565b604082019050919050565b600060208201905081810360008301526144988161445c565b9050919050565b60006144ab838561309b565b93506144b8838584613393565b6144c1836130d6565b840190509392505050565b60006060820190506144e16000830187613b28565b81810360208301526144f481858761449f565b90506145036040830184613260565b95945050505050565b7f4552433230566f7465733a207369676e61747572652065787069726564000000600082015250565b6000614542601d8361309b565b915061454d8261450c565b602082019050919050565b6000602082019050818103600083015261457181614535565b9050919050565b600060808201905061458d600083018761398b565b61459a6020830186613b28565b6145a76040830185613260565b6145b46060830184613260565b95945050505050565b7f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000600082015250565b60006145f360198361309b565b91506145fe826145bd565b602082019050919050565b60006020820190508181036000830152614622816145e6565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b600061465f601d8361309b565b915061466a82614629565b602082019050919050565b6000602082019050818103600083015261468e81614652565b9050919050565b600060c0820190506146aa600083018961398b565b6146b76020830188613b28565b6146c46040830187613b28565b6146d16060830186613260565b6146de6080830185613260565b6146eb60a0830184613260565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b600061472c601e8361309b565b9150614737826146f6565b602082019050919050565b6000602082019050818103600083015261475b8161471f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006147be60248361309b565b91506147c982614762565b604082019050919050565b600060208201905081810360008301526147ed816147b1565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061485060228361309b565b915061485b826147f4565b604082019050919050565b6000602082019050818103600083015261487f81614843565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006148bc601d8361309b565b91506148c782614886565b602082019050919050565b600060208201905081810360008301526148eb816148af565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061494e60258361309b565b9150614959826148f2565b604082019050919050565b6000602082019050818103600083015261497d81614941565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006149e060238361309b565b91506149eb82614984565b604082019050919050565b60006020820190508181036000830152614a0f816149d3565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614a7260268361309b565b9150614a7d82614a16565b604082019050919050565b60006020820190508181036000830152614aa181614a65565b9050919050565b600081519050919050565b600081905092915050565b6000614ac982614aa8565b614ad38185614ab3565b9350614ae38185602086016130ac565b80840191505092915050565b6000819050919050565b614b0a614b05826131b4565b614aef565b82525050565b6000614b1c8285614abe565b9150614b288284614af9565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614b6d81613443565b82525050565b6000614b7f8383614b64565b60208301905092915050565b6000602082019050919050565b6000614ba382614b38565b614bad8185614b43565b9350614bb883614b54565b8060005b83811015614be9578151614bd08882614b73565b9750614bdb83614b8b565b925050600181019050614bbc565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614c2b8161322a565b82525050565b6000614c3d8383614c22565b60208301905092915050565b6000602082019050919050565b6000614c6182614bf6565b614c6b8185614c01565b9350614c7683614c12565b8060005b83811015614ca7578151614c8e8882614c31565b9750614c9983614c49565b925050600181019050614c7a565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614ce9816131b4565b82525050565b6000614cfb8383614ce0565b60208301905092915050565b6000602082019050919050565b6000614d1f82614cb4565b614d298185614cbf565b9350614d3483614cd0565b8060005b83811015614d65578151614d4c8882614cef565b9750614d5783614d07565b925050600181019050614d38565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614da7816136ee565b82525050565b6000614db98383614d9e565b60208301905092915050565b6000602082019050919050565b6000614ddd82614d72565b614de78185614d7d565b9350614df283614d8e565b8060005b83811015614e23578151614e0a8882614dad565b9750614e1583614dc5565b925050600181019050614df6565b5085935050505092915050565b600061016082019050614e46600083018e613236565b614e53602083018d61398b565b614e60604083018c613260565b8181036060830152614e72818b614b98565b90508181036080830152614e86818a614c56565b9050614e9560a083018961398b565b614ea260c083018861398b565b81810360e0830152614eb48187614d14565b9050818103610100830152614ec98186614dd2565b9050818103610120830152614ede8185614b98565b9050818103610140830152614ef38184614b98565b90509c9b505050505050505050505050565b7f45524332303a20696e76616c696420696e707574206d696e7420646174610000600082015250565b6000614f3b601e8361309b565b9150614f4682614f05565b602082019050919050565b60006020820190508181036000830152614f6a81614f2e565b9050919050565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b6000614fcd60308361309b565b9150614fd882614f71565b604082019050919050565b60006020820190508181036000830152614ffc81614fc0565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061505f602b8361309b565b915061506a82615003565b604082019050919050565b6000602082019050818103600083015261508e81615052565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b60006150f160268361309b565b91506150fc82615095565b604082019050919050565b60006020820190508181036000830152615120816150e4565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203960008201527f3620626974730000000000000000000000000000000000000000000000000000602082015250565b600061518360268361309b565b915061518e82615127565b604082019050919050565b600060208201905081810360008301526151b281615176565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006151ef601f8361309b565b91506151fa826151b9565b602082019050919050565b6000602082019050818103600083015261521e816151e2565b9050919050565b600060a08201905061523a600083018861398b565b615247602083018761398b565b615254604083018661398b565b6152616060830185613260565b61526e6080830184613b28565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006152b2826131b4565b91506152bd836131b4565b9250826152cd576152cc615278565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261533a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826152fd565b61534486836152fd565b95508019841693508086168417925050509392505050565b600061537761537261536d846131b4565b614354565b6131b4565b9050919050565b6000819050919050565b6153918361535c565b6153a561539d8261537e565b84845461530a565b825550505050565b600090565b6153ba6153ad565b6153c5818484615388565b505050565b5b818110156153e9576153de6000826153b2565b6001810190506153cb565b5050565b601f82111561542e576153ff816152d8565b615408846152ed565b81016020851015615417578190505b61542b615423856152ed565b8301826153ca565b50505b505050565b600082821c905092915050565b600061545160001984600802615433565b1980831691505092915050565b600061546a8383615440565b9150826002028217905092915050565b61548382613090565b67ffffffffffffffff81111561549c5761549b6132e7565b5b6154a68254613f23565b6154b18282856153ed565b600060209050601f8311600181146154e457600084156154d2578287015190505b6154dc858261545e565b865550615544565b601f1984166154f2866152d8565b60005b8281101561551a578489015182556001820191506020850194506020810190506154f5565b868310156155375784890151615533601f891682615440565b8355505b6001600288020188555050505b505050505050565b60006040820190506155616000830185613260565b61556e6020830184613260565b9392505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006155d160218361309b565b91506155dc82615575565b604082019050919050565b60006020820190508181036000830152615600816155c4565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061566360228361309b565b915061566e82615607565b604082019050919050565b6000602082019050818103600083015261569281615656565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006156da600283615699565b91506156e5826156a4565b600282019050919050565b6000819050919050565b61570b61570682613443565b6156f0565b82525050565b600061571c826156cd565b915061572882856156fa565b60208201915061573882846156fa565b6020820191508190509392505050565b600060808201905061575d600083018761398b565b61576a6020830186613961565b615777604083018561398b565b615784606083018461398b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006157f260188361309b565b91506157fd826157bc565b602082019050919050565b60006020820190508181036000830152615821816157e5565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061585e601f8361309b565b915061586982615828565b602082019050919050565b6000602082019050818103600083015261588d81615851565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006158f060228361309b565b91506158fb82615894565b604082019050919050565b6000602082019050818103600083015261591f816158e3565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b600061598260278361309b565b915061598d82615926565b604082019050919050565b600060208201905081810360008301526159b181615975565b905091905056fea26469706673582212200ff20d151d2d72cbc4245eb8594aad018c98f24e2450545c7518cebf981ec91064736f6c63430008110033",
}

// PrvvoteABI is the input ABI used to generate the binding from.
// Deprecated: Use PrvvoteMetaData.ABI instead.
var PrvvoteABI = PrvvoteMetaData.ABI

// PrvvoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrvvoteMetaData.Bin instead.
var PrvvoteBin = PrvvoteMetaData.Bin

// DeployPrvvote deploys a new Ethereum contract, binding an instance of Prvvote to it.
func DeployPrvvote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Prvvote, error) {
	parsed, err := PrvvoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrvvoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// Prvvote is an auto generated Go binding around an Ethereum contract.
type Prvvote struct {
	PrvvoteCaller     // Read-only binding to the contract
	PrvvoteTransactor // Write-only binding to the contract
	PrvvoteFilterer   // Log filterer for contract events
}

// PrvvoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrvvoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrvvoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrvvoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrvvoteSession struct {
	Contract     *Prvvote          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvvoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrvvoteCallerSession struct {
	Contract *PrvvoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PrvvoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrvvoteTransactorSession struct {
	Contract     *PrvvoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PrvvoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrvvoteRaw struct {
	Contract *Prvvote // Generic contract binding to access the raw methods on
}

// PrvvoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrvvoteCallerRaw struct {
	Contract *PrvvoteCaller // Generic read-only contract binding to access the raw methods on
}

// PrvvoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrvvoteTransactorRaw struct {
	Contract *PrvvoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrvvote creates a new instance of Prvvote, bound to a specific deployed contract.
func NewPrvvote(address common.Address, backend bind.ContractBackend) (*Prvvote, error) {
	contract, err := bindPrvvote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// NewPrvvoteCaller creates a new read-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteCaller(address common.Address, caller bind.ContractCaller) (*PrvvoteCaller, error) {
	contract, err := bindPrvvote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteCaller{contract: contract}, nil
}

// NewPrvvoteTransactor creates a new write-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteTransactor(address common.Address, transactor bind.ContractTransactor) (*PrvvoteTransactor, error) {
	contract, err := bindPrvvote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransactor{contract: contract}, nil
}

// NewPrvvoteFilterer creates a new log filterer instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteFilterer(address common.Address, filterer bind.ContractFilterer) (*PrvvoteFilterer, error) {
	contract, err := bindPrvvote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrvvoteFilterer{contract: contract}, nil
}

// bindPrvvote binds a generic wrapper to an already deployed contract.
func bindPrvvote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrvvoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.PrvvoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvvote *PrvvoteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvvote *PrvvoteSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvvote *PrvvoteCallerSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetCurrentVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getCurrentVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetPriorVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPriorVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "initialize", name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactorSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_Prvvote *PrvvoteTransactor) Migrate(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "migrate", amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_Prvvote *PrvvoteSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Migrate(&_Prvvote.TransactOpts, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_Prvvote *PrvvoteTransactorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Migrate(&_Prvvote.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// PrvvoteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Prvvote contract.
type PrvvoteApprovalIterator struct {
	Event *PrvvoteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteApproval represents a Approval event raised by the Prvvote contract.
type PrvvoteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PrvvoteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteApprovalIterator{contract: _Prvvote.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PrvvoteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteApproval)
				if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseApproval(log types.Log) (*PrvvoteApproval, error) {
	event := new(PrvvoteApproval)
	if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the Prvvote contract.
type PrvvoteDelegateChangedIterator struct {
	Event *PrvvoteDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateChanged represents a DelegateChanged event raised by the Prvvote contract.
type PrvvoteDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*PrvvoteDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateChangedIterator{contract: _Prvvote.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) ParseDelegateChanged(log types.Log) (*PrvvoteDelegateChanged, error) {
	event := new(PrvvoteDelegateChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the Prvvote contract.
type PrvvoteDelegateVotesChangedIterator struct {
	Event *PrvvoteDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateVotesChanged represents a DelegateVotesChanged event raised by the Prvvote contract.
type PrvvoteDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*PrvvoteDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateVotesChangedIterator{contract: _Prvvote.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateVotesChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) ParseDelegateVotesChanged(log types.Log) (*PrvvoteDelegateVotesChanged, error) {
	event := new(PrvvoteDelegateVotesChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Prvvote contract.
type PrvvoteDepositIterator struct {
	Event *PrvvoteDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDeposit represents a Deposit event raised by the Prvvote contract.
type PrvvoteDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterDeposit(opts *bind.FilterOpts) (*PrvvoteDepositIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PrvvoteDepositIterator{contract: _Prvvote.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PrvvoteDeposit) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDeposit)
				if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseDeposit(log types.Log) (*PrvvoteDeposit, error) {
	event := new(PrvvoteDeposit)
	if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Prvvote contract.
type PrvvoteInitializedIterator struct {
	Event *PrvvoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteInitialized represents a Initialized event raised by the Prvvote contract.
type PrvvoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*PrvvoteInitializedIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PrvvoteInitializedIterator{contract: _Prvvote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PrvvoteInitialized) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteInitialized)
				if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) ParseInitialized(log types.Log) (*PrvvoteInitialized, error) {
	event := new(PrvvoteInitialized)
	if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Prvvote contract.
type PrvvoteMigrateIterator struct {
	Event *PrvvoteMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteMigrate represents a Migrate event raised by the Prvvote contract.
type PrvvoteMigrate struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterMigrate(opts *bind.FilterOpts) (*PrvvoteMigrateIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &PrvvoteMigrateIterator{contract: _Prvvote.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *PrvvoteMigrate) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteMigrate)
				if err := _Prvvote.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrate is a log parse operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseMigrate(log types.Log) (*PrvvoteMigrate, error) {
	event := new(PrvvoteMigrate)
	if err := _Prvvote.contract.UnpackLog(event, "Migrate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Prvvote contract.
type PrvvoteTransferIterator struct {
	Event *PrvvoteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteTransfer represents a Transfer event raised by the Prvvote contract.
type PrvvoteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PrvvoteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransferIterator{contract: _Prvvote.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PrvvoteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteTransfer)
				if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseTransfer(log types.Log) (*PrvvoteTransfer, error) {
	event := new(PrvvoteTransfer)
	if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
