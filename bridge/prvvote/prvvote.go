// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package prvvote

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// PrvvoteMetaData contains all meta data concerning the Prvvote contract.
var PrvvoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"burnBySign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_input\",\"type\":\"bytes32\"}],\"name\":\"getDataSign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615f9580620000216000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063b48272cc116100a2578063dd62ed3e11610071578063dd62ed3e1461063c578063ed97383a1461066c578063f1127ed81461069c578063f7d25dc0146106cc576101e5565b8063b48272cc146105a4578063b4b5ea57146105d4578063c3cda52014610604578063d505accf14610620576101e5565b806395d89b41116100de57806395d89b41146104f65780639ab24eb014610514578063a457c2d714610544578063a9059cbb14610574576101e5565b806370a0823114610436578063782d6fe1146104665780637ecebe00146104965780638e539e8c146104c6576101e5565b80633644e515116101875780634cd88b76116101565780634cd88b761461039e578063587cde1e146103ba5780635c19a95c146103ea5780636fcfff4514610406576101e5565b80633644e5151461030457806339509351146103225780633a46b1a814610352578063454b060814610382576101e5565b80631ea1940e116101c35780631ea1940e1461025657806323b872dd1461028657806324f178ff146102b6578063313ce567146102e6576101e5565b806306fdde03146101ea578063095ea7b31461020857806318160ddd14610238575b600080fd5b6101f26106fc565b6040516101ff9190613482565b60405180910390f35b610222600480360381019061021d919061354c565b61078e565b60405161022f91906135a7565b60405180910390f35b6102406107b1565b60405161024d91906135d1565b60405180910390f35b610270600480360381019061026b9190613622565b6107bb565b60405161027d91906135a7565b60405180910390f35b6102a0600480360381019061029b919061364f565b6107dc565b6040516102ad91906135a7565b60405180910390f35b6102d060048036038101906102cb9190613b4d565b61080b565b6040516102dd91906135a7565b60405180910390f35b6102ee610a3e565b6040516102fb9190613cff565b60405180910390f35b61030c610a47565b6040516103199190613d29565b60405180910390f35b61033c6004803603810190610337919061354c565b610a56565b60405161034991906135a7565b60405180910390f35b61036c6004803603810190610367919061354c565b610a8d565b60405161037991906135d1565b60405180910390f35b61039c60048036038101906103979190613d44565b610b21565b005b6103b860048036038101906103b39190613e12565b610bf6565b005b6103d460048036038101906103cf9190613e8a565b610d76565b6040516103e19190613ec6565b60405180910390f35b61040460048036038101906103ff9190613e8a565b610dc8565b005b610420600480360381019061041b9190613e8a565b610ddc565b60405161042d9190613f00565b60405180910390f35b610450600480360381019061044b9190613e8a565b610e30565b60405161045d91906135d1565b60405180910390f35b610480600480360381019061047b919061354c565b610e79565b60405161048d9190613f42565b60405180910390f35b6104b060048036038101906104ab9190613e8a565b610e95565b6040516104bd91906135d1565b60405180910390f35b6104e060048036038101906104db9190613d44565b610ee5565b6040516104ed91906135d1565b60405180910390f35b6104fe610f3b565b60405161050b9190613482565b60405180910390f35b61052e60048036038101906105299190613e8a565b610fcd565b60405161053b91906135d1565b60405180910390f35b61055e6004803603810190610559919061354c565b6110de565b60405161056b91906135a7565b60405180910390f35b61058e6004803603810190610589919061354c565b611155565b60405161059b91906135a7565b60405180910390f35b6105be60048036038101906105b99190613fb8565b611178565b6040516105cb91906135a7565b60405180910390f35b6105ee60048036038101906105e99190613e8a565b6111d3565b6040516105fb9190613f42565b60405180910390f35b61061e60048036038101906106199190614018565b6111ed565b005b61063a600480360381019061063591906140a5565b6112f1565b005b61065660048036038101906106519190614147565b611433565b60405161066391906135d1565b60405180910390f35b610686600480360381019061068191906141dd565b6114ba565b60405161069391906135a7565b60405180910390f35b6106b660048036038101906106b191906142d8565b6115ee565b6040516106c3919061438d565b60405180910390f35b6106e660048036038101906106e19190613622565b6116fe565b6040516106f39190613d29565b60405180910390f35b60606036805461070b906143d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610737906143d7565b80156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b5050505050905090565b600080610799611710565b90506107a6818585611718565b600191505092915050565b6000603554905090565b6101306020528060005260406000206000915054906101000a900460ff1681565b6000806107e7611710565b90506107f48582856118e1565b6107ff85858561196d565b60019150509392505050565b6000808a1161084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690614454565b60405180910390fd5b60828b511015610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b906144c0565b60405180910390fd5b600061089f8c611be6565b905060aa816000015160ff161480156108bf57506001816020015160ff16145b6108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f59061452c565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096790614598565b60405180910390fd5b61013160008260a00151815260200190815260200160002060009054906101000a900460ff16156109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd90614604565b60405180910390fd5b600161013160008360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550610a198c8c8c8c8c8c8c8c8c8c611d0f565b610a2b81606001518260800151611e1e565b60019150509a9950505050505050505050565b60006009905090565b6000610a51611eab565b905090565b600080610a61611710565b9050610a82818585610a738589611433565b610a7d9190614653565b611718565b600191505092915050565b6000438210610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac8906146d3565b60405180910390fd5b610b1960cd60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083611eeb565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166323b872dd610b46611710565b6000846040518463ffffffff1660e01b8152600401610b67939291906146f3565b6020604051808303816000875af1158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa919061473f565b50610bbc610bb6611710565b82611e1e565b7fd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d54681604051610beb91906135d1565b60405180910390a150565b60008060019054906101000a900460ff16159050808015610c275750600160008054906101000a900460ff1660ff16105b80610c545750610c363061203c565b158015610c535750600160008054906101000a900460ff1660ff16145b5b610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a906147de565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610cd0576001600060016101000a81548160ff0219169083151502179055505b610cda838361205f565b610d186040518060400160405280600981526020017f507276566f74696e6700000000000000000000000000000000000000000000008152506120bc565b8015610d715760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d689190614843565b60405180910390a15b505050565b600080610d828361214d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dbe5780610dc0565b825b915050919050565b610dd9610dd3611710565b826121b6565b50565b6000610e2960cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506122d0565b9050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610e8d610e888484610a8d565b612323565b905092915050565b6000610ede609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061237e565b9050919050565b6000438210610f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f20906146d3565b60405180910390fd5b610f3460ce83611eeb565b9050919050565b606060378054610f4a906143d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610f76906143d7565b8015610fc35780601f10610f9857610100808354040283529160200191610fc3565b820191906000526020600020905b815481529060010190602001808311610fa657829003601f168201915b5050505050905090565b60008060cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081146110b55760cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600182611069919061485e565b8154811061107a57611079614892565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166110b8565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b6000806110e9611710565b905060006110f78286611433565b90508381101561113c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113390614933565b60405180910390fd5b6111498286868403611718565b60019250505092915050565b600080611160611710565b905061116d81858561196d565b600191505092915050565b600061118b611185611710565b8361238c565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e308585856040516111c09493929190614980565b60405180910390a1600190509392505050565b60006111e66111e183610fcd565b612323565b9050919050565b83421115611230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122790614a0c565b60405180910390fd5b600061129261128a7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf89898960405160200161126f9493929190614a2c565b604051602081830303815290604052805190602001206123aa565b8585856123c4565b905061129d816123ef565b86146112de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d590614abd565b60405180910390fd5b6112e881886121b6565b50505050505050565b83421115611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90614b29565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886113638c6123ef565b8960405160200161137996959493929190614b49565b604051602081830303815290604052805190602001209050600061139c826123aa565b905060006113ac828787876123c4565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390614bf6565b60405180910390fd5b6114278a8a8a611718565b50505050505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806114f48a8a8a8a8a6040516020016114d9959493929190614c54565b604051602081830303815290604052805190602001206123aa565b9050610130600082815260200190815260200160002060009054906101000a900460ff1615611558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154f90614ce9565b60405180910390fd5b6000611566828787876123c4565b90506001610130600084815260200190815260200160002060006101000a81548160ff02191690831515021790555061159f818a61238c565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e308c8c8c6040516115d49493929190614980565b60405180910390a160019250505098975050505050505050565b6115f6613349565b60cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208263ffffffff168154811061164d5761164c614892565b5b906000526020600020016040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b6000611709826123aa565b9050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e90614d7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ed90614e0d565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118d491906135d1565b60405180910390a3505050565b60006118ed8484611433565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146119675781811015611959576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195090614e79565b60405180910390fd5b6119668484848403611718565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d390614f0b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4290614f9d565b60405180910390fd5b611a5683838361244d565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad49061502f565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611bcd91906135d1565b60405180910390a3611be0848484612452565b50505050565b611bee613387565b611bf6613387565b82600081518110611c0a57611c09614892565b5b602001015160f81c60f81b60f81c816000019060ff16908160ff168152505082600181518110611c3d57611c3c614892565b5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b60008a8a604051602001611d249291906150b7565b604051602081830303815290604052805190602001209050611d4461247d565b73ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611d919b9a999897969594939291906153d7565b602060405180830381865afa158015611dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd2919061473f565b611e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e08906154f8565b60405180910390fd5b5050505050505050505050565b611e2882826124ae565b611e30612605565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611e566107b1565b1115611e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8e9061558a565b60405180910390fd5b611ea560ce61261b83612631565b50505050565b6000611ee67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ed9612900565b611ee161290a565b612914565b905090565b600080838054905090506000808290506005831115611f61576000611f0f8461294e565b84611f1a919061485e565b905085611f278883612a47565b60000160009054906101000a900463ffffffff1663ffffffff161115611f4f57809150611f5f565b600181611f5c9190614653565b92505b505b5b80821015611fc1576000611f768383612a5c565b905085611f838883612a47565b60000160009054906101000a900463ffffffff1663ffffffff161115611fab57809150611fbb565b600181611fb89190614653565b92505b50611f62565b6000811461201057611fdf86600183611fda919061485e565b612a47565b60000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612013565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166120ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a59061561c565b60405180910390fd5b6120b88282612a82565b5050565b600060019054906101000a900460ff1661210b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121029061561c565b60405180910390fd5b61214a816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612af5565b50565b600060cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006121c183610d76565b905060006121ce84610e30565b90508260cc60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a46122ca828483612b70565b50505050565b600063ffffffff801682111561231b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612312906156ae565b60405180910390fd5b819050919050565b60006bffffffffffffffffffffffff8016821115612376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236d90615740565b60405180910390fd5b819050919050565b600081600001549050919050565b6123968282612d69565b6123a460ce612f3883612631565b50505050565b60006123bd6123b7611eab565b83612f4e565b9050919050565b60008060006123d587878787612f81565b915091506123e281613063565b8192505050949350505050565b600080609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061243c8161237e565b9150612447816131c9565b50919050565b505050565b61245d8383836131df565b61247861246984610d76565b61247284610d76565b83612b70565b505050565b6000807f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd260001b9050805491505090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361251d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612514906157ac565b60405180910390fd5b6125296000838361244d565b806035600082825461253b9190614653565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516125ed91906135d1565b60405180910390a361260160008383612452565b5050565b60006bffffffffffffffffffffffff8016905090565b600081836126299190614653565b905092915050565b60008060008580549050905060008082146127005761265c87600184612657919061485e565b612a47565b6040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505061273c565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505b905080602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935061277184868863ffffffff16565b925060008211801561278c575043816000015163ffffffff16145b156128065761279a836131e4565b6127b0886001856127ab919061485e565b612a47565b60000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506128f6565b86604051806040016040528061281b436122d0565b63ffffffff16815260200161282f866131e4565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b5050935093915050565b6000606554905090565b6000606654905090565b6000838383463060405160200161292f9594939291906157cc565b6040516020818303038152906040528051906020012090509392505050565b60008082036129605760009050612a42565b6000600161296d8461324f565b901c6001901b905060018184816129875761298661581f565b5b048201901c905060018184816129a05761299f61581f565b5b048201901c905060018184816129b9576129b861581f565b5b048201901c905060018184816129d2576129d161581f565b5b048201901c905060018184816129eb576129ea61581f565b5b048201901c90506001818481612a0457612a0361581f565b5b048201901c90506001818481612a1d57612a1c61581f565b5b048201901c9050612a3e81828581612a3857612a3761581f565b5b04613330565b9150505b919050565b60008260005281602060002001905092915050565b60006002828418612a6d919061584e565b828416612a7a9190614653565b905092915050565b600060019054906101000a900460ff16612ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac89061561c565b60405180910390fd5b8160369081612ae09190615a21565b508060379081612af09190615a21565b505050565b600060019054906101000a900460ff16612b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3b9061561c565b60405180910390fd5b600082805190602001209050600082805190602001209050816065819055508060668190555050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612bac5750600081115b15612d6457600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612c8a57600080612c3360cd60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f3885612631565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612c7f929190615af3565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612d6357600080612d0c60cd60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061261b85612631565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612d58929190615af3565b60405180910390a250505b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dcf90615b8e565b60405180910390fd5b612de48260008361244d565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6290615c20565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612f1f91906135d1565b60405180910390a3612f3383600084612452565b505050565b60008183612f46919061485e565b905092915050565b60008282604051602001612f63929190615cb8565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612fbc57600060039150915061305a565b600060018787878760405160008152602001604052604051612fe19493929190615cef565b6020604051602081039080840390855afa158015613003573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036130515760006001925092505061305a565b80600092509250505b94509492505050565b6000600481111561307757613076615d34565b5b81600481111561308a57613089615d34565b5b03156131c657600160048111156130a4576130a3615d34565b5b8160048111156130b7576130b6615d34565b5b036130f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ee90615daf565b60405180910390fd5b6002600481111561310b5761310a615d34565b5b81600481111561311e5761311d615d34565b5b0361315e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161315590615e1b565b60405180910390fd5b6003600481111561317257613171615d34565b5b81600481111561318557613184615d34565b5b036131c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131bc90615ead565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016821115613247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323e90615f3f565b60405180910390fd5b819050919050565b600080600090506000608084901c111561327157608083901c92506080810190505b6000604084901c111561328c57604083901c92506040810190505b6000602084901c11156132a757602083901c92506020810190505b6000601084901c11156132c257601083901c92506010810190505b6000600884901c11156132dd57600883901c92506008810190505b6000600484901c11156132f857600483901c92506004810190505b6000600284901c111561331357600283901c92506002810190505b6000600184901c1115613327576001810190505b80915050919050565b600081831061333f5781613341565b825b905092915050565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561342c578082015181840152602081019050613411565b60008484015250505050565b6000601f19601f8301169050919050565b6000613454826133f2565b61345e81856133fd565b935061346e81856020860161340e565b61347781613438565b840191505092915050565b6000602082019050818103600083015261349c8184613449565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134e3826134b8565b9050919050565b6134f3816134d8565b81146134fe57600080fd5b50565b600081359050613510816134ea565b92915050565b6000819050919050565b61352981613516565b811461353457600080fd5b50565b60008135905061354681613520565b92915050565b60008060408385031215613563576135626134ae565b5b600061357185828601613501565b925050602061358285828601613537565b9150509250929050565b60008115159050919050565b6135a18161358c565b82525050565b60006020820190506135bc6000830184613598565b92915050565b6135cb81613516565b82525050565b60006020820190506135e660008301846135c2565b92915050565b6000819050919050565b6135ff816135ec565b811461360a57600080fd5b50565b60008135905061361c816135f6565b92915050565b600060208284031215613638576136376134ae565b5b60006136468482850161360d565b91505092915050565b600080600060608486031215613668576136676134ae565b5b600061367686828701613501565b935050602061368786828701613501565b925050604061369886828701613537565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136e482613438565b810181811067ffffffffffffffff82111715613703576137026136ac565b5b80604052505050565b60006137166134a4565b905061372282826136db565b919050565b600067ffffffffffffffff821115613742576137416136ac565b5b61374b82613438565b9050602081019050919050565b82818337600083830152505050565b600061377a61377584613727565b61370c565b905082815260208101848484011115613796576137956136a7565b5b6137a1848285613758565b509392505050565b600082601f8301126137be576137bd6136a2565b5b81356137ce848260208601613767565b91505092915050565b600067ffffffffffffffff8211156137f2576137f16136ac565b5b602082029050602081019050919050565b600080fd5b600061381b613816846137d7565b61370c565b9050808382526020820190506020840283018581111561383e5761383d613803565b5b835b818110156138675780613853888261360d565b845260208401935050602081019050613840565b5050509392505050565b600082601f830112613886576138856136a2565b5b8135613896848260208601613808565b91505092915050565b600067ffffffffffffffff8211156138ba576138b96136ac565b5b602082029050602081019050919050565b6138d48161358c565b81146138df57600080fd5b50565b6000813590506138f1816138cb565b92915050565b600061390a6139058461389f565b61370c565b9050808382526020820190506020840283018581111561392d5761392c613803565b5b835b81811015613956578061394288826138e2565b84526020840193505060208101905061392f565b5050509392505050565b600082601f830112613975576139746136a2565b5b81356139858482602086016138f7565b91505092915050565b600067ffffffffffffffff8211156139a9576139a86136ac565b5b602082029050602081019050919050565b60006139cd6139c88461398e565b61370c565b905080838252602082019050602084028301858111156139f0576139ef613803565b5b835b81811015613a195780613a058882613537565b8452602084019350506020810190506139f2565b5050509392505050565b600082601f830112613a3857613a376136a2565b5b8135613a488482602086016139ba565b91505092915050565b600067ffffffffffffffff821115613a6c57613a6b6136ac565b5b602082029050602081019050919050565b600060ff82169050919050565b613a9381613a7d565b8114613a9e57600080fd5b50565b600081359050613ab081613a8a565b92915050565b6000613ac9613ac484613a51565b61370c565b90508083825260208201905060208402830185811115613aec57613aeb613803565b5b835b81811015613b155780613b018882613aa1565b845260208401935050602081019050613aee565b5050509392505050565b600082601f830112613b3457613b336136a2565b5b8135613b44848260208601613ab6565b91505092915050565b6000806000806000806000806000806101408b8d031215613b7157613b706134ae565b5b60008b013567ffffffffffffffff811115613b8f57613b8e6134b3565b5b613b9b8d828e016137a9565b9a50506020613bac8d828e01613537565b99505060408b013567ffffffffffffffff811115613bcd57613bcc6134b3565b5b613bd98d828e01613871565b98505060608b013567ffffffffffffffff811115613bfa57613bf96134b3565b5b613c068d828e01613960565b9750506080613c178d828e0161360d565b96505060a0613c288d828e0161360d565b95505060c08b013567ffffffffffffffff811115613c4957613c486134b3565b5b613c558d828e01613a23565b94505060e08b013567ffffffffffffffff811115613c7657613c756134b3565b5b613c828d828e01613b1f565b9350506101008b013567ffffffffffffffff811115613ca457613ca36134b3565b5b613cb08d828e01613871565b9250506101208b013567ffffffffffffffff811115613cd257613cd16134b3565b5b613cde8d828e01613871565b9150509295989b9194979a5092959850565b613cf981613a7d565b82525050565b6000602082019050613d146000830184613cf0565b92915050565b613d23816135ec565b82525050565b6000602082019050613d3e6000830184613d1a565b92915050565b600060208284031215613d5a57613d596134ae565b5b6000613d6884828501613537565b91505092915050565b600067ffffffffffffffff821115613d8c57613d8b6136ac565b5b613d9582613438565b9050602081019050919050565b6000613db5613db084613d71565b61370c565b905082815260208101848484011115613dd157613dd06136a7565b5b613ddc848285613758565b509392505050565b600082601f830112613df957613df86136a2565b5b8135613e09848260208601613da2565b91505092915050565b60008060408385031215613e2957613e286134ae565b5b600083013567ffffffffffffffff811115613e4757613e466134b3565b5b613e5385828601613de4565b925050602083013567ffffffffffffffff811115613e7457613e736134b3565b5b613e8085828601613de4565b9150509250929050565b600060208284031215613ea057613e9f6134ae565b5b6000613eae84828501613501565b91505092915050565b613ec0816134d8565b82525050565b6000602082019050613edb6000830184613eb7565b92915050565b600063ffffffff82169050919050565b613efa81613ee1565b82525050565b6000602082019050613f156000830184613ef1565b92915050565b60006bffffffffffffffffffffffff82169050919050565b613f3c81613f1b565b82525050565b6000602082019050613f576000830184613f33565b92915050565b600080fd5b60008083601f840112613f7857613f776136a2565b5b8235905067ffffffffffffffff811115613f9557613f94613f5d565b5b602083019150836001820283011115613fb157613fb0613803565b5b9250929050565b600080600060408486031215613fd157613fd06134ae565b5b600084013567ffffffffffffffff811115613fef57613fee6134b3565b5b613ffb86828701613f62565b9350935050602061400e86828701613537565b9150509250925092565b60008060008060008060c08789031215614035576140346134ae565b5b600061404389828a01613501565b965050602061405489828a01613537565b955050604061406589828a01613537565b945050606061407689828a01613aa1565b935050608061408789828a0161360d565b92505060a061409889828a0161360d565b9150509295509295509295565b600080600080600080600060e0888a0312156140c4576140c36134ae565b5b60006140d28a828b01613501565b97505060206140e38a828b01613501565b96505060406140f48a828b01613537565b95505060606141058a828b01613537565b94505060806141168a828b01613aa1565b93505060a06141278a828b0161360d565b92505060c06141388a828b0161360d565b91505092959891949750929550565b6000806040838503121561415e5761415d6134ae565b5b600061416c85828601613501565b925050602061417d85828601613501565b9150509250929050565b60008083601f84011261419d5761419c6136a2565b5b8235905067ffffffffffffffff8111156141ba576141b9613f5d565b5b6020830191508360018202830111156141d6576141d5613803565b5b9250929050565b60008060008060008060008060c0898b0312156141fd576141fc6134ae565b5b600089013567ffffffffffffffff81111561421b5761421a6134b3565b5b6142278b828c01613f62565b9850985050602061423a8b828c01613537565b965050604089013567ffffffffffffffff81111561425b5761425a6134b3565b5b6142678b828c01614187565b9550955050606061427a8b828c01613aa1565b935050608061428b8b828c0161360d565b92505060a061429c8b828c0161360d565b9150509295985092959890939650565b6142b581613ee1565b81146142c057600080fd5b50565b6000813590506142d2816142ac565b92915050565b600080604083850312156142ef576142ee6134ae565b5b60006142fd85828601613501565b925050602061430e858286016142c3565b9150509250929050565b61432181613ee1565b82525050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b61435881614327565b82525050565b6040820160008201516143746000850182614318565b506020820151614387602085018261434f565b50505050565b60006040820190506143a2600083018461435e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806143ef57607f821691505b602082108103614402576144016143a8565b5b50919050565b7f45524332303a20696e76616c696420626561636f6e2068656967687400000000600082015250565b600061443e601c836133fd565b915061444982614408565b602082019050919050565b6000602082019050818103600083015261446d81614431565b9050919050565b7f45524332303a20696e76616c696420696e737400000000000000000000000000600082015250565b60006144aa6013836133fd565b91506144b582614474565b602082019050919050565b600060208201905081810360008301526144d98161449d565b9050919050565b7f45524332303a20696e76616c696420696e737427732064617461000000000000600082015250565b6000614516601a836133fd565b9150614521826144e0565b602082019050919050565b6000602082019050818103600083015261454581614509565b9050919050565b7f45524332303a20696e76616c696420746f6b656e000000000000000000000000600082015250565b60006145826014836133fd565b915061458d8261454c565b602082019050919050565b600060208201905081810360008301526145b181614575565b9050919050565b7f45524332303a20747820697320616c7265616479207573656400000000000000600082015250565b60006145ee6019836133fd565b91506145f9826145b8565b602082019050919050565b6000602082019050818103600083015261461d816145e1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061465e82613516565b915061466983613516565b925082820190508082111561468157614680614624565b5b92915050565b7f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400600082015250565b60006146bd601f836133fd565b91506146c882614687565b602082019050919050565b600060208201905081810360008301526146ec816146b0565b9050919050565b60006060820190506147086000830186613eb7565b6147156020830185613eb7565b61472260408301846135c2565b949350505050565b600081519050614739816138cb565b92915050565b600060208284031215614755576147546134ae565b5b60006147638482850161472a565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006147c8602e836133fd565b91506147d38261476c565b604082019050919050565b600060208201905081810360008301526147f7816147bb565b9050919050565b6000819050919050565b6000819050919050565b600061482d614828614823846147fe565b614808565b613a7d565b9050919050565b61483d81614812565b82525050565b60006020820190506148586000830184614834565b92915050565b600061486982613516565b915061487483613516565b925082820390508181111561488c5761488b614624565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061491d6025836133fd565b9150614928826148c1565b604082019050919050565b6000602082019050818103600083015261494c81614910565b9050919050565b600061495f83856133fd565b935061496c838584613758565b61497583613438565b840190509392505050565b60006060820190506149956000830187613eb7565b81810360208301526149a8818587614953565b90506149b760408301846135c2565b95945050505050565b7f4552433230566f7465733a207369676e61747572652065787069726564000000600082015250565b60006149f6601d836133fd565b9150614a01826149c0565b602082019050919050565b60006020820190508181036000830152614a25816149e9565b9050919050565b6000608082019050614a416000830187613d1a565b614a4e6020830186613eb7565b614a5b60408301856135c2565b614a6860608301846135c2565b95945050505050565b7f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000600082015250565b6000614aa76019836133fd565b9150614ab282614a71565b602082019050919050565b60006020820190508181036000830152614ad681614a9a565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b6000614b13601d836133fd565b9150614b1e82614add565b602082019050919050565b60006020820190508181036000830152614b4281614b06565b9050919050565b600060c082019050614b5e6000830189613d1a565b614b6b6020830188613eb7565b614b786040830187613eb7565b614b8560608301866135c2565b614b9260808301856135c2565b614b9f60a08301846135c2565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000614be0601e836133fd565b9150614beb82614baa565b602082019050919050565b60006020820190508181036000830152614c0f81614bd3565b9050919050565b600082825260208201905092915050565b6000614c338385614c16565b9350614c40838584613758565b614c4983613438565b840190509392505050565b60006060820190508181036000830152614c6f818789614953565b9050614c7e60208301866135c2565b8181036040830152614c91818486614c27565b90509695505050505050565b7f45524332303a207369676e206461746120757365640000000000000000000000600082015250565b6000614cd36015836133fd565b9150614cde82614c9d565b602082019050919050565b60006020820190508181036000830152614d0281614cc6565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614d656024836133fd565b9150614d7082614d09565b604082019050919050565b60006020820190508181036000830152614d9481614d58565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000614df76022836133fd565b9150614e0282614d9b565b604082019050919050565b60006020820190508181036000830152614e2681614dea565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000614e63601d836133fd565b9150614e6e82614e2d565b602082019050919050565b60006020820190508181036000830152614e9281614e56565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614ef56025836133fd565b9150614f0082614e99565b604082019050919050565b60006020820190508181036000830152614f2481614ee8565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614f876023836133fd565b9150614f9282614f2b565b604082019050919050565b60006020820190508181036000830152614fb681614f7a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006150196026836133fd565b915061502482614fbd565b604082019050919050565b600060208201905081810360008301526150488161500c565b9050919050565b600081519050919050565b600081905092915050565b60006150708261504f565b61507a818561505a565b935061508a81856020860161340e565b80840191505092915050565b6000819050919050565b6150b16150ac82613516565b615096565b82525050565b60006150c38285615065565b91506150cf82846150a0565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615114816135ec565b82525050565b6000615126838361510b565b60208301905092915050565b6000602082019050919050565b600061514a826150df565b61515481856150ea565b935061515f836150fb565b8060005b83811015615190578151615177888261511a565b975061518283615132565b925050600181019050615163565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6151d28161358c565b82525050565b60006151e483836151c9565b60208301905092915050565b6000602082019050919050565b60006152088261519d565b61521281856151a8565b935061521d836151b9565b8060005b8381101561524e57815161523588826151d8565b9750615240836151f0565b925050600181019050615221565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61529081613516565b82525050565b60006152a28383615287565b60208301905092915050565b6000602082019050919050565b60006152c68261525b565b6152d08185615266565b93506152db83615277565b8060005b8381101561530c5781516152f38882615296565b97506152fe836152ae565b9250506001810190506152df565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61534e81613a7d565b82525050565b60006153608383615345565b60208301905092915050565b6000602082019050919050565b600061538482615319565b61538e8185615324565b935061539983615335565b8060005b838110156153ca5781516153b18882615354565b97506153bc8361536c565b92505060018101905061539d565b5085935050505092915050565b6000610160820190506153ed600083018e613598565b6153fa602083018d613d1a565b615407604083018c6135c2565b8181036060830152615419818b61513f565b9050818103608083015261542d818a6151fd565b905061543c60a0830189613d1a565b61544960c0830188613d1a565b81810360e083015261545b81876152bb565b90508181036101008301526154708186615379565b9050818103610120830152615485818561513f565b905081810361014083015261549a818461513f565b90509c9b505050505050505050505050565b7f45524332303a20696e76616c696420696e707574206d696e7420646174610000600082015250565b60006154e2601e836133fd565b91506154ed826154ac565b602082019050919050565b60006020820190508181036000830152615511816154d5565b9050919050565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b60006155746030836133fd565b915061557f82615518565b604082019050919050565b600060208201905081810360008301526155a381615567565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615606602b836133fd565b9150615611826155aa565b604082019050919050565b60006020820190508181036000830152615635816155f9565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b60006156986026836133fd565b91506156a38261563c565b604082019050919050565b600060208201905081810360008301526156c78161568b565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203960008201527f3620626974730000000000000000000000000000000000000000000000000000602082015250565b600061572a6026836133fd565b9150615735826156ce565b604082019050919050565b600060208201905081810360008301526157598161571d565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000615796601f836133fd565b91506157a182615760565b602082019050919050565b600060208201905081810360008301526157c581615789565b9050919050565b600060a0820190506157e16000830188613d1a565b6157ee6020830187613d1a565b6157fb6040830186613d1a565b61580860608301856135c2565b6158156080830184613eb7565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061585982613516565b915061586483613516565b9250826158745761587361581f565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026158e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826158a4565b6158eb86836158a4565b95508019841693508086168417925050509392505050565b600061591e61591961591484613516565b614808565b613516565b9050919050565b6000819050919050565b61593883615903565b61594c61594482615925565b8484546158b1565b825550505050565b600090565b615961615954565b61596c81848461592f565b505050565b5b8181101561599057615985600082615959565b600181019050615972565b5050565b601f8211156159d5576159a68161587f565b6159af84615894565b810160208510156159be578190505b6159d26159ca85615894565b830182615971565b50505b505050565b600082821c905092915050565b60006159f8600019846008026159da565b1980831691505092915050565b6000615a1183836159e7565b9150826002028217905092915050565b615a2a826133f2565b67ffffffffffffffff811115615a4357615a426136ac565b5b615a4d82546143d7565b615a58828285615994565b600060209050601f831160018114615a8b5760008415615a79578287015190505b615a838582615a05565b865550615aeb565b601f198416615a998661587f565b60005b82811015615ac157848901518255600182019150602085019450602081019050615a9c565b86831015615ade5784890151615ada601f8916826159e7565b8355505b6001600288020188555050505b505050505050565b6000604082019050615b0860008301856135c2565b615b1560208301846135c2565b9392505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615b786021836133fd565b9150615b8382615b1c565b604082019050919050565b60006020820190508181036000830152615ba781615b6b565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000615c0a6022836133fd565b9150615c1582615bae565b604082019050919050565b60006020820190508181036000830152615c3981615bfd565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000615c81600283615c40565b9150615c8c82615c4b565b600282019050919050565b6000819050919050565b615cb2615cad826135ec565b615c97565b82525050565b6000615cc382615c74565b9150615ccf8285615ca1565b602082019150615cdf8284615ca1565b6020820191508190509392505050565b6000608082019050615d046000830187613d1a565b615d116020830186613cf0565b615d1e6040830185613d1a565b615d2b6060830184613d1a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615d996018836133fd565b9150615da482615d63565b602082019050919050565b60006020820190508181036000830152615dc881615d8c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000615e05601f836133fd565b9150615e1082615dcf565b602082019050919050565b60006020820190508181036000830152615e3481615df8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000615e976022836133fd565b9150615ea282615e3b565b604082019050919050565b60006020820190508181036000830152615ec681615e8a565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b6000615f296027836133fd565b9150615f3482615ecd565b604082019050919050565b60006020820190508181036000830152615f5881615f1c565b905091905056fea2646970667358221220e2969a847f55c936970c3d57bce110c9a37169235a29a8f588e193c9a7211c8864736f6c63430008110033",
}

// PrvvoteABI is the input ABI used to generate the binding from.
// Deprecated: Use PrvvoteMetaData.ABI instead.
var PrvvoteABI = PrvvoteMetaData.ABI

// PrvvoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrvvoteMetaData.Bin instead.
var PrvvoteBin = PrvvoteMetaData.Bin

// DeployPrvvote deploys a new Ethereum contract, binding an instance of Prvvote to it.
func DeployPrvvote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Prvvote, error) {
	parsed, err := PrvvoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrvvoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// Prvvote is an auto generated Go binding around an Ethereum contract.
type Prvvote struct {
	PrvvoteCaller     // Read-only binding to the contract
	PrvvoteTransactor // Write-only binding to the contract
	PrvvoteFilterer   // Log filterer for contract events
}

// PrvvoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrvvoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrvvoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrvvoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrvvoteSession struct {
	Contract     *Prvvote          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvvoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrvvoteCallerSession struct {
	Contract *PrvvoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PrvvoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrvvoteTransactorSession struct {
	Contract     *PrvvoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PrvvoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrvvoteRaw struct {
	Contract *Prvvote // Generic contract binding to access the raw methods on
}

// PrvvoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrvvoteCallerRaw struct {
	Contract *PrvvoteCaller // Generic read-only contract binding to access the raw methods on
}

// PrvvoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrvvoteTransactorRaw struct {
	Contract *PrvvoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrvvote creates a new instance of Prvvote, bound to a specific deployed contract.
func NewPrvvote(address common.Address, backend bind.ContractBackend) (*Prvvote, error) {
	contract, err := bindPrvvote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// NewPrvvoteCaller creates a new read-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteCaller(address common.Address, caller bind.ContractCaller) (*PrvvoteCaller, error) {
	contract, err := bindPrvvote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteCaller{contract: contract}, nil
}

// NewPrvvoteTransactor creates a new write-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteTransactor(address common.Address, transactor bind.ContractTransactor) (*PrvvoteTransactor, error) {
	contract, err := bindPrvvote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransactor{contract: contract}, nil
}

// NewPrvvoteFilterer creates a new log filterer instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteFilterer(address common.Address, filterer bind.ContractFilterer) (*PrvvoteFilterer, error) {
	contract, err := bindPrvvote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrvvoteFilterer{contract: contract}, nil
}

// bindPrvvote binds a generic wrapper to an already deployed contract.
func bindPrvvote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrvvoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.PrvvoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvvote *PrvvoteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvvote *PrvvoteSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvvote *PrvvoteCallerSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetCurrentVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getCurrentVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteCaller) GetDataSign(opts *bind.CallOpts, _input [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getDataSign", _input)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteSession) GetDataSign(_input [32]byte) ([32]byte, error) {
	return _Prvvote.Contract.GetDataSign(&_Prvvote.CallOpts, _input)
}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) GetDataSign(_input [32]byte) ([32]byte, error) {
	return _Prvvote.Contract.GetDataSign(&_Prvvote.CallOpts, _input)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetPriorVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPriorVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "sigDataUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Prvvote.Contract.SigDataUsed(&_Prvvote.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Prvvote.Contract.SigDataUsed(&_Prvvote.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactor) BurnBySign(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burnBySign", incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteSession) BurnBySign(incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySign(&_Prvvote.TransactOpts, incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) BurnBySign(incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySign(&_Prvvote.TransactOpts, incognitoAddress, amount, timestamp, v, r, s)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "initialize", name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactorSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_Prvvote *PrvvoteTransactor) Migrate(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "migrate", amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_Prvvote *PrvvoteSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Migrate(&_Prvvote.TransactOpts, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_Prvvote *PrvvoteTransactorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Migrate(&_Prvvote.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// PrvvoteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Prvvote contract.
type PrvvoteApprovalIterator struct {
	Event *PrvvoteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteApproval represents a Approval event raised by the Prvvote contract.
type PrvvoteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PrvvoteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteApprovalIterator{contract: _Prvvote.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PrvvoteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteApproval)
				if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseApproval(log types.Log) (*PrvvoteApproval, error) {
	event := new(PrvvoteApproval)
	if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the Prvvote contract.
type PrvvoteDelegateChangedIterator struct {
	Event *PrvvoteDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateChanged represents a DelegateChanged event raised by the Prvvote contract.
type PrvvoteDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*PrvvoteDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateChangedIterator{contract: _Prvvote.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) ParseDelegateChanged(log types.Log) (*PrvvoteDelegateChanged, error) {
	event := new(PrvvoteDelegateChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the Prvvote contract.
type PrvvoteDelegateVotesChangedIterator struct {
	Event *PrvvoteDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateVotesChanged represents a DelegateVotesChanged event raised by the Prvvote contract.
type PrvvoteDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*PrvvoteDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateVotesChangedIterator{contract: _Prvvote.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateVotesChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) ParseDelegateVotesChanged(log types.Log) (*PrvvoteDelegateVotesChanged, error) {
	event := new(PrvvoteDelegateVotesChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Prvvote contract.
type PrvvoteDepositIterator struct {
	Event *PrvvoteDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDeposit represents a Deposit event raised by the Prvvote contract.
type PrvvoteDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterDeposit(opts *bind.FilterOpts) (*PrvvoteDepositIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PrvvoteDepositIterator{contract: _Prvvote.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PrvvoteDeposit) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDeposit)
				if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseDeposit(log types.Log) (*PrvvoteDeposit, error) {
	event := new(PrvvoteDeposit)
	if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Prvvote contract.
type PrvvoteInitializedIterator struct {
	Event *PrvvoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteInitialized represents a Initialized event raised by the Prvvote contract.
type PrvvoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*PrvvoteInitializedIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PrvvoteInitializedIterator{contract: _Prvvote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PrvvoteInitialized) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteInitialized)
				if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) ParseInitialized(log types.Log) (*PrvvoteInitialized, error) {
	event := new(PrvvoteInitialized)
	if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Prvvote contract.
type PrvvoteMigrateIterator struct {
	Event *PrvvoteMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteMigrate represents a Migrate event raised by the Prvvote contract.
type PrvvoteMigrate struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterMigrate(opts *bind.FilterOpts) (*PrvvoteMigrateIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &PrvvoteMigrateIterator{contract: _Prvvote.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *PrvvoteMigrate) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteMigrate)
				if err := _Prvvote.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrate is a log parse operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseMigrate(log types.Log) (*PrvvoteMigrate, error) {
	event := new(PrvvoteMigrate)
	if err := _Prvvote.contract.UnpackLog(event, "Migrate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Prvvote contract.
type PrvvoteTransferIterator struct {
	Event *PrvvoteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteTransfer represents a Transfer event raised by the Prvvote contract.
type PrvvoteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PrvvoteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransferIterator{contract: _Prvvote.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PrvvoteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteTransfer)
				if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseTransfer(log types.Log) (*PrvvoteTransfer, error) {
	event := new(PrvvoteTransfer)
	if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
