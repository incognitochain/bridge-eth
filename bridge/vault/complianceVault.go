// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vault

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ComplianceVaultMetaData contains all meta data concerning the ComplianceVault contract.
var ComplianceVaultMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UpdateTokenTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDepositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isSigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structVault.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"regulatorSig\",\"type\":\"bytes\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedToSCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040526001600560146101000a81548160ff0219169083151502179055506000600560156101000a81548160ff02191690831515021790555034801561004657600080fd5b50615bbc80620000576000396000f3fe6080604052600436106101855760003560e01c8063995fac11116100d1578063cf54aaa01161008a578063e4bd707411610064578063e4bd7074146105e1578063f75b98ce1461061e578063fa84702e1461065b578063fee8efda146106865761018c565b8063cf54aaa01461053c578063dca40d9e14610579578063dd8fee14146105b65761018c565b8063995fac111461043d578063a3f5d8cc1461047a578063a807b5bb146104a5578063c4d66de8146104ce578063c791d705146104f7578063cde0a4f8146105135761018c565b80636304541c1161013e57806373bf96511161011857806373bf96511461037e578063749c5f86146103a75780637e16e6e1146103e45780638588ccd6146104215761018c565b80636304541c146102c757806365b5a00f1461030457806370a08231146103415761018c565b80631beb7de2146101915780631ea1940e146101ba5780631ed4276d146101f7578063392e53cd146102345780633fec6b401461025f57806358bc83371461029c5761018c565b3661018c57005b600080fd5b34801561019d57600080fd5b506101b860048036038101906101b391906149c6565b6106af565b005b3480156101c657600080fd5b506101e160048036038101906101dc9190614908565b610d32565b6040516101ee91906154ab565b60405180910390f35b34801561020357600080fd5b5061021e6004803603810190610219919061486a565b610d52565b60405161022b91906154ab565b60405180910390f35b34801561024057600080fd5b506102496110d8565b60405161025691906154ab565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190614972565b6110eb565b6040516102939190615311565b60405180910390f35b3480156102a857600080fd5b506102b1611179565b6040516102be9190615311565b60405180910390f35b3480156102d357600080fd5b506102ee60048036038101906102e99190614626565b61117e565b6040516102fb91906156fc565b60405180910390f35b34801561031057600080fd5b5061032b6004803603810190610326919061468b565b611196565b60405161033891906156fc565b60405180910390f35b34801561034d57600080fd5b5061036860048036038101906103639190614626565b6111bb565b60405161037591906156fc565b60405180910390f35b34801561038a57600080fd5b506103a560048036038101906103a091906149c6565b61128a565b005b3480156103b357600080fd5b506103ce60048036038101906103c99190614908565b6118bc565b6040516103db91906154ab565b60405180910390f35b3480156103f057600080fd5b5061040b60048036038101906104069190614931565b6119ff565b6040516104189190615638565b60405180910390f35b61043b600480360381019061043691906146c7565b611b1a565b005b34801561044957600080fd5b50610464600480360381019061045f919061468b565b6122a1565b60405161047191906154ab565b60405180910390f35b34801561048657600080fd5b5061048f6122d0565b60405161049c91906154ab565b60405180910390f35b3480156104b157600080fd5b506104cc60048036038101906104c791906147ba565b6122e3565b005b3480156104da57600080fd5b506104f560048036038101906104f09190614626565b6126ac565b005b610511600480360381019061050c9190614c59565b612783565b005b34801561051f57600080fd5b5061053a60048036038101906105359190614626565b612904565b005b34801561054857600080fd5b50610563600480360381019061055e9190614626565b612a77565b6040516105709190615717565b60405180910390f35b34801561058557600080fd5b506105a0600480360381019061059b9190614908565b612b03565b6040516105ad91906154ab565b60405180910390f35b3480156105c257600080fd5b506105cb612b23565b6040516105d89190615311565b60405180910390f35b3480156105ed57600080fd5b5061060860048036038101906106039190614908565b612b49565b60405161061591906154ab565b60405180910390f35b34801561062a57600080fd5b506106456004803603810190610640919061468b565b612c8d565b60405161065291906156fc565b60405180910390f35b34801561066757600080fd5b50610670612f41565b60405161067d91906155fb565b60405180910390f35b34801561069257600080fd5b506106ad60048036038101906106a89190614b49565b612f67565b005b600560149054906101000a900460ff166106c960016133f9565b9061070a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107019190615616565b60405180910390fd5b506000600560146101000a81548160ff02191690831515021790555060828a51101561073660066133f9565b90610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e9190615616565b60405180910390fd5b50610780614142565b6107898b6119ff565b905060f1816000015160ff161480156107a957506001816020015160ff16145b6107b360066133f9565b906107f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107eb9190615616565b60405180910390fd5b506108028160a001516118bc565b1561080d60056133f9565b9061084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108459190615616565b60405180910390fd5b5060016000808360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614156109655761091160046000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482608001516135a990919063ffffffff16565b47101561091e60076133f9565b9061095f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109569190615616565b60405180910390fd5b50610ae3565b60006109748260400151612a77565b905060098160ff1611156109ac576109a260098260ff1603600a0a836080015161364390919063ffffffff16565b8260800181815250505b610a0660046000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483608001516135a990919063ffffffff16565b826040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a43919061532c565b60206040518083038186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190614ce2565b1015610a9f60076133f9565b90610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad79190615616565b60405180910390fd5b50505b610af58b8b8b8b8b8b8b8b8b8b6136e4565b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610bf5576000816060015173ffffffffffffffffffffffffffffffffffffffff168260800151604051610b5c906152fc565b60006040518083038185875af1925050503d8060008114610b99576040519150601f19603f3d011682016040523d82523d6000602084013e610b9e565b606091505b5050905080610bad60046133f9565b90610bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be59190615616565b60405180910390fd5b5050610cc3565b806040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610c3c92919061537e565b600060405180830381600087803b158015610c5657600080fd5b505af1158015610c6a573d6000803e3d6000fd5b50505050610c7661380f565b610c8060046133f9565b90610cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb89190615616565b60405180910390fd5b505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610d02939291906153d0565b60405180910390a1506001600560146101000a81548160ff02191690831515021790555050505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610dff5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e09600c6133f9565b90610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e419190615616565b60405180910390fd5b50828290508585905014610e5e600a6133f9565b90610e9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e969190615616565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0857600080fd5b505afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906148df565b610f4a600d6133f9565b90610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f829190615616565b60405180910390fd5b5060005b8585905081101561108e5761101e848483818110610fa957fe5b9050602002013560046000898986818110610fc057fe5b9050602002016020810190610fd59190614626565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b6004600088888581811061102e57fe5b90506020020160208101906110439190614626565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050610f8f565b507f6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f858585856040516110c49493929190615470565b60405180910390a160019050949350505050565b600560159054906101000a900460ff1681565b6000806000806020860151915060408601519250601b8660408151811061110e57fe5b602001015160f81c60f81b60f81c0190506001858284866040516000815260200160405260405161114294939291906155b6565b6020604051602081039080840390855afa158015611164573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600081565b60046020528060005260406000206000915090505481565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111f957479050611285565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611232919061532c565b60206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190614ce2565b90505b919050565b600560149054906101000a900460ff166112a460016133f9565b906112e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dc9190615616565b60405180910390fd5b506000600560146101000a81548160ff02191690831515021790555060828a51101561131160066133f9565b90611352576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113499190615616565b60405180910390fd5b5061135b614142565b6113648b6119ff565b905060f3816000015160ff1614801561138457506001816020015160ff16145b61138e60066133f9565b906113cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c69190615616565b60405180910390fd5b506113dd8160a001516118bc565b156113e860056133f9565b90611429576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114209190615616565b60405180910390fd5b5060016000808360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415611540576114ec60046000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482608001516135a990919063ffffffff16565b4710156114f960076133f9565b9061153a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115319190615616565b60405180910390fd5b506116be565b600061154f8260400151612a77565b905060098160ff1611156115875761157d60098260ff1603600a0a836080015161364390919063ffffffff16565b8260800181815250505b6115e160046000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483608001516135a990919063ffffffff16565b826040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161161e919061532c565b60206040518083038186803b15801561163657600080fd5b505afa15801561164a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166e9190614ce2565b101561167a60076133f9565b906116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b29190615616565b60405180910390fd5b50505b6116d08b8b8b8b8b8b8b8b8b8b6136e4565b61176b816080015160026000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b60026000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061184d816080015160046000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b60046000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506001600560146101000a81548160ff02191690831515021790555050505050505050505050565b600080600083815260200190815260200160002060009054906101000a900460ff16156118ec57600190506119fa565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561194c57600090506119fa565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff1660e01b81526004016119a7919061559b565b60206040518083038186803b1580156119bf57600080fd5b505afa1580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f791906148df565b90505b919050565b611a07614142565b611a0f614142565b82600081518110611a1c57fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff168152505082600181518110611a4857fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b600560149054906101000a900460ff16611b3460016133f9565b90611b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6c9190615616565b60405180910390fd5b506000600560146101000a81548160ff0219169083151502179055506000611c15611ba460008d88888f61384d565b8a8a8a8a604051602001611bbc959493929190615653565b60405160208183030381529060405284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506138f2565b9050611c21818c613a16565b89600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611cab60086133f9565b90611cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce39190615616565b60405180910390fd5b50611d3f8a600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d5690919063ffffffff16565b600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e118a600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d5690919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000349050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415611ee557611ede8b826135a990919063ffffffff16565b905061207f565b8a8c73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f1f919061532c565b60206040518083038186803b158015611f3757600080fd5b505afa158015611f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6f9190614ce2565b1015611f7b60076133f9565b90611fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb39190615616565b60405180910390fd5b508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a8d6040518363ffffffff1660e01b8152600401611ff8929190615447565b600060405180830381600087803b15801561201257600080fd5b505af1158015612026573d6000803e3d6000fd5b5050505061203261380f565b61203c60046133f9565b9061207d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120749190615616565b60405180910390fd5b505b60006120d18b838b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d613ddf565b905061216281600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061223481600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050506001600560146101000a81548160ff02191690831515021790555050505050505050505050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600560149054906101000a900460ff1681565b600560149054906101000a900460ff166122fd60016133f9565b9061233e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123359190615616565b60405180910390fd5b506000600560146101000a81548160ff0219169083151502179055506123a88383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614011565b600087905060006123b889612a77565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123f5919061532c565b60206040518083038186803b15801561240d57600080fd5b505afa158015612421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124459190614ce2565b9050600081905060008a905060098460ff1611156124885760098460ff1603600a0a818161246f57fe5b04905060098460ff1603600a0a838161248457fe5b0492505b670de0b6b3a764000081111580156124a85750670de0b6b3a76400008311155b80156124ce5750670de0b6b3a76400006124cb84836135a990919063ffffffff16565b11155b6124d860036133f9565b90612519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125109190615616565b60405180910390fd5b508473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e6040518463ffffffff1660e01b815260040161255793929190615347565b600060405180830381600087803b15801561257157600080fd5b505af1158015612585573d6000803e3d6000fd5b5050505061259161380f565b61259b60046133f9565b906125dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d39190615616565b60405180910390fd5b508a6125f9836125eb8f6111bb565b613d5690919063ffffffff16565b14612604600a6133f9565b90612645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263c9190615616565b60405180910390fd5b507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8c8b8b8460405161267b9493929190615407565b60405180910390a150505050506001600560146101000a81548160ff02191690831515021790555050505050505050565b600560159054906101000a900460ff16156126c7600f6133f9565b90612708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ff9190615616565b60405180910390fd5b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560156101000a81548160ff0219169083151502179055506001600560146101000a81548160ff02191690831515021790555050565b600560149054906101000a900460ff1661279d60016133f9565b906127de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d59190615616565b60405180910390fd5b506000600560146101000a81548160ff0219169083151502179055506b033b2e3c9fd0803ce800000047111561281460026133f9565b90612855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284c9190615616565b60405180910390fd5b506128a48383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614011565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008686346040516128da9493929190615407565b60405180910390a16001600560146101000a81548160ff0219169083151502179055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806129ae5750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80156129e75750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6129f160116133f9565b90612a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a299190615616565b60405180910390fd5b5080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612ac357600080fd5b505afa158015612ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612afb9190614ce2565b915050919050565b60006020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600083815260200190815260200160002060009054906101000a900460ff1615612b7a5760019050612c88565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612bda5760009050612c88565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4bd7074836040518263ffffffff1660e01b8152600401612c35919061559b565b60206040518083038186803b158015612c4d57600080fd5b505afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8591906148df565b90505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612d745750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15612ebb57612eb4600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f75b98ce85856040518363ffffffff1660e01b8152600401612dd99291906153a7565b60206040518083038186803b158015612df157600080fd5b505afa158015612e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e299190614ce2565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b9050612f3b565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560149054906101000a900460ff16612f8160016133f9565b90612fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb99190615616565b60405180910390fd5b506000600560146101000a81548160ff02191690831515021790555061302c8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614011565b60006130ac61303f60018c89898e61384d565b8d8d604051602001613053939291906156a8565b60405160208183030381529060405289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506138f2565b90506130b8818b613a16565b88600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561314260086133f9565b90613183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317a9190615616565b60405180910390fd5b5061321389600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d5690919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132e589600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d5690919063ffffffff16565b600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000899050600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161461339257600061336c8c612a77565b905060098160ff1611156133905760098160ff1603600a0a8b8161338c57fe5b0491505b505b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8b8e8e846040516133c79493929190615407565b60405180910390a150506001600560146101000a81548160ff0219169083151502179055505050505050505050505050565b6060600082601181111561340957fe5b90506000600a905060608167ffffffffffffffff8111801561342a57600080fd5b506040519080825280601f01601f19166020018201604052801561345d5781602001600182028036833780820191505090505b50905060005b60008460ff16146134de576000600a8560ff168161347d57fe5b069050600a8560ff168161348d57fe5b0494508060300160f81b8383806001019450815181106134a957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050613463565b60606001820167ffffffffffffffff811180156134fa57600080fd5b506040519080825280601f01601f19166020018201604052801561352d5781602001600182028036833780820191505090505b50905060005b82811161359b57838184038151811061354857fe5b602001015160f81c60f81b82828151811061355f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613533565b508095505050505050919050565b60008082840190508381101580156135c15750828110155b6040518060400160405280601281526020017f536166654d61746820657863657074696f6e000000000000000000000000000081525090613638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161362f9190615616565b60405180910390fd5b508091505092915050565b6000808284029050600084148061366257508284828161365f57fe5b04145b6040518060400160405280601281526020017f536166654d61746820657863657074696f6e0000000000000000000000000000815250906136d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136d09190615616565b60405180910390fd5b508091505092915050565b60008a8a6040516020016136f99291906152d4565b604051602081830303815290604052805190602001209050613719614111565b73ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016137669b9a999897969594939291906154c6565b60206040518083038186803b15801561377e57600080fd5b505afa158015613792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b691906148df565b6137c060066133f9565b90613801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137f89190615616565b60405180910390fd5b505050505050505050505050565b600080600090503d6000811461382c576020811461383557613841565b60019150613841565b60206000803e60005191505b50600081141591505090565b6138556141ad565b61385d6141ad565b604051806080016040528088600181111561387457fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018481525090508091505095945050505050565b6000808380519060200120905061390881612b49565b1561391360056133f9565b90613954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394b9190615616565b60405180910390fd5b50600061396184836110eb565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561399e60106133f9565b906139df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d69190615616565b60405180910390fd5b50600180600084815260200190815260200160002060006101000a81548160ff021916908315150217905550809250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015613afc5750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15613d5257613c3c600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f75b98ce83856040518363ffffffff1660e01b8152600401613b619291906153a7565b60206040518083038186803b158015613b7957600080fd5b505afa158015613b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb19190614ce2565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135a990919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b6000828211156040518060400160405280601281526020017f536166654d61746820657863657074696f6e000000000000000000000000000081525090613dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613dca9190615616565b60405180910390fd5b50818303905092915050565b600080613deb866111bb565b9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613e3857613e353482613d5690919063ffffffff16565b90505b84471015613e4660076133f9565b90613e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e7e9190615616565b60405180910390fd5b50600060608473ffffffffffffffffffffffffffffffffffffffff168787604051613eb291906152bd565b60006040518083038185875af1925050503d8060008114613eef576040519150601f19603f3d011682016040523d82523d6000602084013e613ef4565b606091505b509150915081613f0460046133f9565b90613f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f3c9190615616565b60405180910390fd5b5060008082806020019051810190613f5d919061464f565b915091508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148015613fb5575080613fb386613fa58d6111bb565b613d5690919063ffffffff16565b145b613fbf60096133f9565b90614000576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ff79190615616565b60405180910390fd5b508095505050505050949350505050565b600061406d8260405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681525060405160200161405291906156e1565b604051602081830303815290604052805190602001206110eb565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146140ca60106133f9565b9061410b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141029190615616565b60405180910390fd5b50505050565b6000807f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd260001b9050805491505090565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b6040518060800160405280600060018111156141c557fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b60008135905061420581615afc565b92915050565b60008151905061421a81615b13565b92915050565b60008083601f84011261423257600080fd5b8235905067ffffffffffffffff81111561424b57600080fd5b60208301915083602082028301111561426357600080fd5b9250929050565b600082601f83011261427b57600080fd5b813561428e6142898261575f565b615732565b915081818352602084019350602081019050838560208402820111156142b357600080fd5b60005b838110156142e357816142c988826144c0565b8452602084019350602083019250506001810190506142b6565b5050505092915050565b600082601f8301126142fe57600080fd5b813561431161430c82615787565b615732565b9150818183526020840193506020810190508385602084028201111561433657600080fd5b60005b83811015614366578161434c88826144ea565b845260208401935060208301925050600181019050614339565b5050505092915050565b60008083601f84011261438257600080fd5b8235905067ffffffffffffffff81111561439b57600080fd5b6020830191508360208202830111156143b357600080fd5b9250929050565b600082601f8301126143cb57600080fd5b81356143de6143d9826157af565b615732565b9150818183526020840193506020810190508385602084028201111561440357600080fd5b60005b83811015614433578161441988826145e7565b845260208401935060208301925050600181019050614406565b5050505092915050565b600082601f83011261444e57600080fd5b813561446161445c826157d7565b615732565b9150818183526020840193506020810190508385602084028201111561448657600080fd5b60005b838110156144b6578161449c8882614611565b845260208401935060208301925050600181019050614489565b5050505092915050565b6000813590506144cf81615b2a565b92915050565b6000815190506144e481615b2a565b92915050565b6000813590506144f981615b41565b92915050565b60008083601f84011261451157600080fd5b8235905067ffffffffffffffff81111561452a57600080fd5b60208301915083600182028301111561454257600080fd5b9250929050565b600082601f83011261455a57600080fd5b813561456d614568826157ff565b615732565b9150808252602083016020830185838301111561458957600080fd5b614594838284615a92565b50505092915050565b60008083601f8401126145af57600080fd5b8235905067ffffffffffffffff8111156145c857600080fd5b6020830191508360018202830111156145e057600080fd5b9250929050565b6000813590506145f681615b58565b92915050565b60008151905061460b81615b58565b92915050565b60008135905061462081615b6f565b92915050565b60006020828403121561463857600080fd5b6000614646848285016141f6565b91505092915050565b6000806040838503121561466257600080fd5b60006146708582860161420b565b9250506020614681858286016145fc565b9150509250929050565b6000806040838503121561469e57600080fd5b60006146ac858286016141f6565b92505060206146bd858286016141f6565b9150509250929050565b60008060008060008060008060008060e08b8d0312156146e657600080fd5b60006146f48d828e016141f6565b9a505060206147058d828e016145e7565b99505060406147168d828e016141f6565b98505060606147278d828e016141f6565b97505060808b013567ffffffffffffffff81111561474457600080fd5b6147508d828e016144ff565b965096505060a08b013567ffffffffffffffff81111561476f57600080fd5b61477b8d828e016144ff565b945094505060c08b013567ffffffffffffffff81111561479a57600080fd5b6147a68d828e016144ff565b92509250509295989b9194979a5092959850565b600080600080600080600060a0888a0312156147d557600080fd5b60006147e38a828b016141f6565b97505060206147f48a828b016145e7565b965050604088013567ffffffffffffffff81111561481157600080fd5b61481d8a828b0161459d565b955095505060606148308a828b016144ea565b935050608088013567ffffffffffffffff81111561484d57600080fd5b6148598a828b016144ff565b925092505092959891949750929550565b6000806000806040858703121561488057600080fd5b600085013567ffffffffffffffff81111561489a57600080fd5b6148a687828801614220565b9450945050602085013567ffffffffffffffff8111156148c557600080fd5b6148d187828801614370565b925092505092959194509250565b6000602082840312156148f157600080fd5b60006148ff848285016144d5565b91505092915050565b60006020828403121561491a57600080fd5b6000614928848285016144ea565b91505092915050565b60006020828403121561494357600080fd5b600082013567ffffffffffffffff81111561495d57600080fd5b61496984828501614549565b91505092915050565b6000806040838503121561498557600080fd5b600083013567ffffffffffffffff81111561499f57600080fd5b6149ab85828601614549565b92505060206149bc858286016144ea565b9150509250929050565b6000806000806000806000806000806101408b8d0312156149e657600080fd5b60008b013567ffffffffffffffff811115614a0057600080fd5b614a0c8d828e01614549565b9a50506020614a1d8d828e016145e7565b99505060408b013567ffffffffffffffff811115614a3a57600080fd5b614a468d828e016142ed565b98505060608b013567ffffffffffffffff811115614a6357600080fd5b614a6f8d828e0161426a565b9750506080614a808d828e016144ea565b96505060a0614a918d828e016144ea565b95505060c08b013567ffffffffffffffff811115614aae57600080fd5b614aba8d828e016143ba565b94505060e08b013567ffffffffffffffff811115614ad757600080fd5b614ae38d828e0161443d565b9350506101008b013567ffffffffffffffff811115614b0157600080fd5b614b0d8d828e016142ed565b9250506101208b013567ffffffffffffffff811115614b2b57600080fd5b614b378d828e016142ed565b9150509295989b9194979a5092959850565b600080600080600080600080600080600060e08c8e031215614b6a57600080fd5b60008c013567ffffffffffffffff811115614b8457600080fd5b614b908e828f0161459d565b9b509b50506020614ba38e828f016141f6565b9950506040614bb48e828f016145e7565b98505060608c013567ffffffffffffffff811115614bd157600080fd5b614bdd8e828f016144ff565b975097505060808c013567ffffffffffffffff811115614bfc57600080fd5b614c088e828f016144ff565b955095505060a0614c1b8e828f016144ea565b93505060c08c013567ffffffffffffffff811115614c3857600080fd5b614c448e828f016144ff565b92509250509295989b509295989b9093969950565b600080600080600060608688031215614c7157600080fd5b600086013567ffffffffffffffff811115614c8b57600080fd5b614c978882890161459d565b95509550506020614caa888289016144ea565b935050604086013567ffffffffffffffff811115614cc757600080fd5b614cd3888289016144ff565b92509250509295509295909350565b600060208284031215614cf457600080fd5b6000614d02848285016145fc565b91505092915050565b6000614d178383614da1565b60208301905092915050565b6000614d2f8383614fec565b60208301905092915050565b6000614d47838361500a565b60208301905092915050565b6000614d5f838361526a565b60208301905092915050565b6000614d77838361529f565b60208301905092915050565b614d8c81615a26565b82525050565b614d9b816159b4565b82525050565b614daa816159a2565b82525050565b614db9816159a2565b82525050565b6000614dcb83856158f8565b9350614dd68261582b565b8060005b85811015614e0f57614dec828461598b565b614df68882614d0b565b9750614e01836158b7565b925050600181019050614dda565b5085925050509392505050565b6000614e2782615875565b614e318185615909565b9350614e3c83615835565b8060005b83811015614e6d578151614e548882614d23565b9750614e5f836158c4565b925050600181019050614e40565b5085935050505092915050565b6000614e8582615880565b614e8f818561591a565b9350614e9a83615845565b8060005b83811015614ecb578151614eb28882614d3b565b9750614ebd836158d1565b925050600181019050614e9e565b5085935050505092915050565b6000614ee4838561592b565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614f1357600080fd5b602083029250614f24838584615a92565b82840190509392505050565b6000614f3b8261588b565b614f45818561592b565b9350614f5083615855565b8060005b83811015614f81578151614f688882614d53565b9750614f73836158de565b925050600181019050614f54565b5085935050505092915050565b6000614f9982615896565b614fa3818561593c565b9350614fae83615865565b8060005b83811015614fdf578151614fc68882614d6b565b9750614fd1836158eb565b925050600181019050614fb2565b5085935050505092915050565b614ff5816159c6565b82525050565b615004816159c6565b82525050565b615013816159d2565b82525050565b615022816159d2565b82525050565b6000615034838561595e565b9350615041838584615a92565b61504a83615ade565b840190509392505050565b6000615060826158a1565b61506a818561594d565b935061507a818560208601615aa1565b61508381615ade565b840191505092915050565b6000615099826158a1565b6150a3818561596f565b93506150b3818560208601615aa1565b80840191505092915050565b6150c881615a38565b82525050565b6150d781615a5c565b82525050565b60006150e9838561597a565b93506150f6838584615a92565b6150ff83615ade565b840190509392505050565b6000615115826158ac565b61511f818561597a565b935061512f818560208601615aa1565b61513881615ade565b840191505092915050565b600061515060008361596f565b9150600082019050919050565b60c082016000820151615173600085018261529f565b506020820151615186602085018261529f565b5060408201516151996040850182614da1565b5060608201516151ac6060850182614d92565b5060808201516151bf608085018261526a565b5060a08201516151d260a085018261500a565b50505050565b60006080830160008301516151f060008601826150ce565b5060208301516152036020860182614da1565b506040830151848203604086015261521b8282615055565b9150506060830151615230606086018261526a565b508091505092915050565b6040820160008201516152516000850182614da1565b506020820151615264602085018261500a565b50505050565b61527381615a0f565b82525050565b61528281615a0f565b82525050565b61529961529482615a0f565b615ad4565b82525050565b6152a881615a19565b82525050565b6152b781615a19565b82525050565b60006152c9828461508e565b915081905092915050565b60006152e0828561508e565b91506152ec8284615288565b6020820191508190509392505050565b600061530782615143565b9150819050919050565b60006020820190506153266000830184614db0565b92915050565b60006020820190506153416000830184614d83565b92915050565b600060608201905061535c6000830186614d83565b6153696020830185614d83565b6153766040830184615279565b949350505050565b60006040820190506153936000830185614d83565b6153a06020830184615279565b9392505050565b60006040820190506153bc6000830185614db0565b6153c96020830184614db0565b9392505050565b60006060820190506153e56000830186614db0565b6153f26020830185614d83565b6153ff6040830184615279565b949350505050565b600060608201905061541c6000830187614db0565b818103602083015261542f8185876150dd565b905061543e6040830184615279565b95945050505050565b600060408201905061545c6000830185614db0565b6154696020830184615279565b9392505050565b6000604082019050818103600083015261548b818688614dbf565b905081810360208301526154a0818486614ed8565b905095945050505050565b60006020820190506154c06000830184614ffb565b92915050565b6000610160820190506154dc600083018e614ffb565b6154e9602083018d615019565b6154f6604083018c615279565b8181036060830152615508818b614e7a565b9050818103608083015261551c818a614e1c565b905061552b60a0830189615019565b61553860c0830188615019565b81810360e083015261554a8187614f30565b905081810361010083015261555f8186614f8e565b90508181036101208301526155748185614e7a565b90508181036101408301526155898184614e7a565b90509c9b505050505050505050505050565b60006020820190506155b06000830184615019565b92915050565b60006080820190506155cb6000830187615019565b6155d860208301866152ae565b6155e56040830185615019565b6155f26060830184615019565b95945050505050565b600060208201905061561060008301846150bf565b92915050565b60006020820190508181036000830152615630818461510a565b905092915050565b600060c08201905061564d600083018461515d565b92915050565b6000608082019050818103600083015261566d81886151d8565b905061567c6020830187614db0565b6156896040830186614db0565b818103606083015261569c818486615028565b90509695505050505050565b600060408201905081810360008301526156c281866151d8565b905081810360208301526156d78184866150dd565b9050949350505050565b60006040820190506156f6600083018461523b565b92915050565b60006020820190506157116000830184615279565b92915050565b600060208201905061572c60008301846152ae565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561575557600080fd5b8060405250919050565b600067ffffffffffffffff82111561577657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561579e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156157c657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156157ee57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561581657600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061599a60208401846141f6565b905092915050565b60006159ad826159ef565b9050919050565b60006159bf826159ef565b9050919050565b60008115159050919050565b6000819050919050565b60008190506159ea82615aef565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615a3182615a6e565b9050919050565b6000615a4382615a4a565b9050919050565b6000615a55826159ef565b9050919050565b6000615a67826159dc565b9050919050565b6000615a7982615a80565b9050919050565b6000615a8b826159ef565b9050919050565b82818337600083830152505050565b60005b83811015615abf578082015181840152602081019050615aa4565b83811115615ace576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b60028110615af957fe5b50565b615b05816159a2565b8114615b1057600080fd5b50565b615b1c816159b4565b8114615b2757600080fd5b50565b615b33816159c6565b8114615b3e57600080fd5b50565b615b4a816159d2565b8114615b5557600080fd5b50565b615b6181615a0f565b8114615b6c57600080fd5b50565b615b7881615a19565b8114615b8357600080fd5b5056fea2646970667358221220337012c261fe17bad2f47c34dabffd05fa0b61fa80548117b582eb5b9fbaf84e64736f6c634300060c0033",
}

// ComplianceVaultABI is the input ABI used to generate the binding from.
// Deprecated: Use ComplianceVaultMetaData.ABI instead.
var ComplianceVaultABI = ComplianceVaultMetaData.ABI

// ComplianceVaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ComplianceVaultMetaData.Bin instead.
var ComplianceVaultBin = ComplianceVaultMetaData.Bin

// DeployComplianceVault deploys a new Ethereum contract, binding an instance of ComplianceVault to it.
func DeployComplianceVault(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ComplianceVault, error) {
	parsed, err := ComplianceVaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ComplianceVaultBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ComplianceVault{ComplianceVaultCaller: ComplianceVaultCaller{contract: contract}, ComplianceVaultTransactor: ComplianceVaultTransactor{contract: contract}, ComplianceVaultFilterer: ComplianceVaultFilterer{contract: contract}}, nil
}

// ComplianceVault is an auto generated Go binding around an Ethereum contract.
type ComplianceVault struct {
	ComplianceVaultCaller     // Read-only binding to the contract
	ComplianceVaultTransactor // Write-only binding to the contract
	ComplianceVaultFilterer   // Log filterer for contract events
}

// ComplianceVaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type ComplianceVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ComplianceVaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ComplianceVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ComplianceVaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ComplianceVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ComplianceVaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ComplianceVaultSession struct {
	Contract     *ComplianceVault  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ComplianceVaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ComplianceVaultCallerSession struct {
	Contract *ComplianceVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ComplianceVaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ComplianceVaultTransactorSession struct {
	Contract     *ComplianceVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ComplianceVaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type ComplianceVaultRaw struct {
	Contract *ComplianceVault // Generic contract binding to access the raw methods on
}

// ComplianceVaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ComplianceVaultCallerRaw struct {
	Contract *ComplianceVaultCaller // Generic read-only contract binding to access the raw methods on
}

// ComplianceVaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ComplianceVaultTransactorRaw struct {
	Contract *ComplianceVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewComplianceVault creates a new instance of ComplianceVault, bound to a specific deployed contract.
func NewComplianceVault(address common.Address, backend bind.ContractBackend) (*ComplianceVault, error) {
	contract, err := bindComplianceVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ComplianceVault{ComplianceVaultCaller: ComplianceVaultCaller{contract: contract}, ComplianceVaultTransactor: ComplianceVaultTransactor{contract: contract}, ComplianceVaultFilterer: ComplianceVaultFilterer{contract: contract}}, nil
}

// NewComplianceVaultCaller creates a new read-only instance of ComplianceVault, bound to a specific deployed contract.
func NewComplianceVaultCaller(address common.Address, caller bind.ContractCaller) (*ComplianceVaultCaller, error) {
	contract, err := bindComplianceVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultCaller{contract: contract}, nil
}

// NewComplianceVaultTransactor creates a new write-only instance of ComplianceVault, bound to a specific deployed contract.
func NewComplianceVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*ComplianceVaultTransactor, error) {
	contract, err := bindComplianceVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultTransactor{contract: contract}, nil
}

// NewComplianceVaultFilterer creates a new log filterer instance of ComplianceVault, bound to a specific deployed contract.
func NewComplianceVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*ComplianceVaultFilterer, error) {
	contract, err := bindComplianceVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultFilterer{contract: contract}, nil
}

// bindComplianceVault binds a generic wrapper to an already deployed contract.
func bindComplianceVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ComplianceVaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ComplianceVault *ComplianceVaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ComplianceVault.Contract.ComplianceVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ComplianceVault *ComplianceVaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComplianceVault.Contract.ComplianceVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ComplianceVault *ComplianceVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ComplianceVault.Contract.ComplianceVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ComplianceVault *ComplianceVaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ComplianceVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ComplianceVault *ComplianceVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComplianceVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ComplianceVault *ComplianceVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ComplianceVault.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_ComplianceVault *ComplianceVaultCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "ETH_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_ComplianceVault *ComplianceVaultSession) ETHTOKEN() (common.Address, error) {
	return _ComplianceVault.Contract.ETHTOKEN(&_ComplianceVault.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_ComplianceVault *ComplianceVaultCallerSession) ETHTOKEN() (common.Address, error) {
	return _ComplianceVault.Contract.ETHTOKEN(&_ComplianceVault.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCaller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "balanceOf", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_ComplianceVault *ComplianceVaultSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.BalanceOf(&_ComplianceVault.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.BalanceOf(&_ComplianceVault.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_ComplianceVault *ComplianceVaultCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "getDecimals", token)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_ComplianceVault *ComplianceVaultSession) GetDecimals(token common.Address) (uint8, error) {
	return _ComplianceVault.Contract.GetDecimals(&_ComplianceVault.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_ComplianceVault *ComplianceVaultCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _ComplianceVault.Contract.GetDecimals(&_ComplianceVault.CallOpts, token)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCaller) GetDepositedBalance(opts *bind.CallOpts, token common.Address, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "getDepositedBalance", token, owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_ComplianceVault *ComplianceVaultSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.GetDepositedBalance(&_ComplianceVault.CallOpts, token, owner)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCallerSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.GetDepositedBalance(&_ComplianceVault.CallOpts, token, owner)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) IsInitialized() (bool, error) {
	return _ComplianceVault.Contract.IsInitialized(&_ComplianceVault.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) IsInitialized() (bool, error) {
	return _ComplianceVault.Contract.IsInitialized(&_ComplianceVault.CallOpts)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) IsSigDataUsed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "isSigDataUsed", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _ComplianceVault.Contract.IsSigDataUsed(&_ComplianceVault.CallOpts, hash)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _ComplianceVault.Contract.IsSigDataUsed(&_ComplianceVault.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "isWithdrawed", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _ComplianceVault.Contract.IsWithdrawed(&_ComplianceVault.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _ComplianceVault.Contract.IsWithdrawed(&_ComplianceVault.CallOpts, hash)
}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) Migration(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "migration", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) Migration(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _ComplianceVault.Contract.Migration(&_ComplianceVault.CallOpts, arg0, arg1)
}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) Migration(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _ComplianceVault.Contract.Migration(&_ComplianceVault.CallOpts, arg0, arg1)
}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) NotEntered(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "notEntered")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) NotEntered() (bool, error) {
	return _ComplianceVault.Contract.NotEntered(&_ComplianceVault.CallOpts)
}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) NotEntered() (bool, error) {
	return _ComplianceVault.Contract.NotEntered(&_ComplianceVault.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_ComplianceVault *ComplianceVaultCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (VaultBurnInstData, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "parseBurnInst", inst)

	if err != nil {
		return *new(VaultBurnInstData), err
	}

	out0 := *abi.ConvertType(out[0], new(VaultBurnInstData)).(*VaultBurnInstData)

	return out0, err

}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_ComplianceVault *ComplianceVaultSession) ParseBurnInst(inst []byte) (VaultBurnInstData, error) {
	return _ComplianceVault.Contract.ParseBurnInst(&_ComplianceVault.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_ComplianceVault *ComplianceVaultCallerSession) ParseBurnInst(inst []byte) (VaultBurnInstData, error) {
	return _ComplianceVault.Contract.ParseBurnInst(&_ComplianceVault.CallOpts, inst)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_ComplianceVault *ComplianceVaultCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "prevVault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_ComplianceVault *ComplianceVaultSession) PrevVault() (common.Address, error) {
	return _ComplianceVault.Contract.PrevVault(&_ComplianceVault.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_ComplianceVault *ComplianceVaultCallerSession) PrevVault() (common.Address, error) {
	return _ComplianceVault.Contract.PrevVault(&_ComplianceVault.CallOpts)
}

// Regulator is a free data retrieval call binding the contract method 0xdd8fee14.
//
// Solidity: function regulator() view returns(address)
func (_ComplianceVault *ComplianceVaultCaller) Regulator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "regulator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Regulator is a free data retrieval call binding the contract method 0xdd8fee14.
//
// Solidity: function regulator() view returns(address)
func (_ComplianceVault *ComplianceVaultSession) Regulator() (common.Address, error) {
	return _ComplianceVault.Contract.Regulator(&_ComplianceVault.CallOpts)
}

// Regulator is a free data retrieval call binding the contract method 0xdd8fee14.
//
// Solidity: function regulator() view returns(address)
func (_ComplianceVault *ComplianceVaultCallerSession) Regulator() (common.Address, error) {
	return _ComplianceVault.Contract.Regulator(&_ComplianceVault.CallOpts)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "sigDataUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _ComplianceVault.Contract.SigDataUsed(&_ComplianceVault.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _ComplianceVault.Contract.SigDataUsed(&_ComplianceVault.CallOpts, arg0)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_ComplianceVault *ComplianceVaultCaller) SigToAddress(opts *bind.CallOpts, signData []byte, hash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "sigToAddress", signData, hash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_ComplianceVault *ComplianceVaultSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _ComplianceVault.Contract.SigToAddress(&_ComplianceVault.CallOpts, signData, hash)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_ComplianceVault *ComplianceVaultCallerSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _ComplianceVault.Contract.SigToAddress(&_ComplianceVault.CallOpts, signData, hash)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCaller) TotalDepositedToSCAmount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "totalDepositedToSCAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_ComplianceVault *ComplianceVaultSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.TotalDepositedToSCAmount(&_ComplianceVault.CallOpts, arg0)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCallerSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.TotalDepositedToSCAmount(&_ComplianceVault.CallOpts, arg0)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "withdrawRequests", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_ComplianceVault *ComplianceVaultSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.WithdrawRequests(&_ComplianceVault.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_ComplianceVault *ComplianceVaultCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _ComplianceVault.Contract.WithdrawRequests(&_ComplianceVault.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_ComplianceVault *ComplianceVaultCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _ComplianceVault.contract.Call(opts, &out, "withdrawed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_ComplianceVault *ComplianceVaultSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _ComplianceVault.Contract.Withdrawed(&_ComplianceVault.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_ComplianceVault *ComplianceVaultCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _ComplianceVault.Contract.Withdrawed(&_ComplianceVault.CallOpts, arg0)
}

// Deposit is a paid mutator transaction binding the contract method 0xc791d705.
//
// Solidity: function deposit(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_ComplianceVault *ComplianceVaultTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "deposit", incognitoAddress, txId, signData)
}

// Deposit is a paid mutator transaction binding the contract method 0xc791d705.
//
// Solidity: function deposit(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_ComplianceVault *ComplianceVaultSession) Deposit(incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Deposit(&_ComplianceVault.TransactOpts, incognitoAddress, txId, signData)
}

// Deposit is a paid mutator transaction binding the contract method 0xc791d705.
//
// Solidity: function deposit(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) Deposit(incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Deposit(&_ComplianceVault.TransactOpts, incognitoAddress, txId, signData)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0xa807b5bb.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_ComplianceVault *ComplianceVaultTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress, txId, signData)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0xa807b5bb.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_ComplianceVault *ComplianceVaultSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.DepositERC20(&_ComplianceVault.TransactOpts, token, amount, incognitoAddress, txId, signData)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0xa807b5bb.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.DepositERC20(&_ComplianceVault.TransactOpts, token, amount, incognitoAddress, txId, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_ComplianceVault *ComplianceVaultTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_ComplianceVault *ComplianceVaultSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Execute(&_ComplianceVault.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Execute(&_ComplianceVault.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _prevVault) returns()
func (_ComplianceVault *ComplianceVaultTransactor) Initialize(opts *bind.TransactOpts, _prevVault common.Address) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "initialize", _prevVault)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _prevVault) returns()
func (_ComplianceVault *ComplianceVaultSession) Initialize(_prevVault common.Address) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Initialize(&_ComplianceVault.TransactOpts, _prevVault)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _prevVault) returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) Initialize(_prevVault common.Address) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Initialize(&_ComplianceVault.TransactOpts, _prevVault)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xfee8efda.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp, bytes32 txId, bytes regulatorSig) returns()
func (_ComplianceVault *ComplianceVaultTransactor) RequestWithdraw(opts *bind.TransactOpts, incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte, txId [32]byte, regulatorSig []byte) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "requestWithdraw", incognitoAddress, token, amount, signData, timestamp, txId, regulatorSig)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xfee8efda.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp, bytes32 txId, bytes regulatorSig) returns()
func (_ComplianceVault *ComplianceVaultSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte, txId [32]byte, regulatorSig []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.RequestWithdraw(&_ComplianceVault.TransactOpts, incognitoAddress, token, amount, signData, timestamp, txId, regulatorSig)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xfee8efda.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp, bytes32 txId, bytes regulatorSig) returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte, txId [32]byte, regulatorSig []byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.RequestWithdraw(&_ComplianceVault.TransactOpts, incognitoAddress, token, amount, signData, timestamp, txId, regulatorSig)
}

// SetRegulator is a paid mutator transaction binding the contract method 0xcde0a4f8.
//
// Solidity: function setRegulator(address _regulator) returns()
func (_ComplianceVault *ComplianceVaultTransactor) SetRegulator(opts *bind.TransactOpts, _regulator common.Address) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "setRegulator", _regulator)
}

// SetRegulator is a paid mutator transaction binding the contract method 0xcde0a4f8.
//
// Solidity: function setRegulator(address _regulator) returns()
func (_ComplianceVault *ComplianceVaultSession) SetRegulator(_regulator common.Address) (*types.Transaction, error) {
	return _ComplianceVault.Contract.SetRegulator(&_ComplianceVault.TransactOpts, _regulator)
}

// SetRegulator is a paid mutator transaction binding the contract method 0xcde0a4f8.
//
// Solidity: function setRegulator(address _regulator) returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) SetRegulator(_regulator common.Address) (*types.Transaction, error) {
	return _ComplianceVault.Contract.SetRegulator(&_ComplianceVault.TransactOpts, _regulator)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_ComplianceVault *ComplianceVaultTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_ComplianceVault *ComplianceVaultSession) SubmitBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.SubmitBurnProof(&_ComplianceVault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) SubmitBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.SubmitBurnProof(&_ComplianceVault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_ComplianceVault *ComplianceVaultTransactor) UpdateAssets(opts *bind.TransactOpts, assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "updateAssets", assets, amounts)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_ComplianceVault *ComplianceVaultSession) UpdateAssets(assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _ComplianceVault.Contract.UpdateAssets(&_ComplianceVault.TransactOpts, assets, amounts)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_ComplianceVault *ComplianceVaultTransactorSession) UpdateAssets(assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _ComplianceVault.Contract.UpdateAssets(&_ComplianceVault.TransactOpts, assets, amounts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_ComplianceVault *ComplianceVaultTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _ComplianceVault.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_ComplianceVault *ComplianceVaultSession) Withdraw(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Withdraw(&_ComplianceVault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) Withdraw(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _ComplianceVault.Contract.Withdraw(&_ComplianceVault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ComplianceVault *ComplianceVaultTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComplianceVault.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ComplianceVault *ComplianceVaultSession) Receive() (*types.Transaction, error) {
	return _ComplianceVault.Contract.Receive(&_ComplianceVault.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ComplianceVault *ComplianceVaultTransactorSession) Receive() (*types.Transaction, error) {
	return _ComplianceVault.Contract.Receive(&_ComplianceVault.TransactOpts)
}

// ComplianceVaultDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the ComplianceVault contract.
type ComplianceVaultDepositIterator struct {
	Event *ComplianceVaultDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ComplianceVaultDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComplianceVaultDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ComplianceVaultDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ComplianceVaultDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ComplianceVaultDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ComplianceVaultDeposit represents a Deposit event raised by the ComplianceVault contract.
type ComplianceVaultDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_ComplianceVault *ComplianceVaultFilterer) FilterDeposit(opts *bind.FilterOpts) (*ComplianceVaultDepositIterator, error) {

	logs, sub, err := _ComplianceVault.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultDepositIterator{contract: _ComplianceVault.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_ComplianceVault *ComplianceVaultFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ComplianceVaultDeposit) (event.Subscription, error) {

	logs, sub, err := _ComplianceVault.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ComplianceVaultDeposit)
				if err := _ComplianceVault.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_ComplianceVault *ComplianceVaultFilterer) ParseDeposit(log types.Log) (*ComplianceVaultDeposit, error) {
	event := new(ComplianceVaultDeposit)
	if err := _ComplianceVault.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ComplianceVaultUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the ComplianceVault contract.
type ComplianceVaultUpdateIncognitoProxyIterator struct {
	Event *ComplianceVaultUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ComplianceVaultUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComplianceVaultUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ComplianceVaultUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ComplianceVaultUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ComplianceVaultUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ComplianceVaultUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the ComplianceVault contract.
type ComplianceVaultUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_ComplianceVault *ComplianceVaultFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*ComplianceVaultUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _ComplianceVault.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultUpdateIncognitoProxyIterator{contract: _ComplianceVault.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_ComplianceVault *ComplianceVaultFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *ComplianceVaultUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _ComplianceVault.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ComplianceVaultUpdateIncognitoProxy)
				if err := _ComplianceVault.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateIncognitoProxy is a log parse operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_ComplianceVault *ComplianceVaultFilterer) ParseUpdateIncognitoProxy(log types.Log) (*ComplianceVaultUpdateIncognitoProxy, error) {
	event := new(ComplianceVaultUpdateIncognitoProxy)
	if err := _ComplianceVault.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ComplianceVaultUpdateTokenTotalIterator is returned from FilterUpdateTokenTotal and is used to iterate over the raw logs and unpacked data for UpdateTokenTotal events raised by the ComplianceVault contract.
type ComplianceVaultUpdateTokenTotalIterator struct {
	Event *ComplianceVaultUpdateTokenTotal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ComplianceVaultUpdateTokenTotalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComplianceVaultUpdateTokenTotal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ComplianceVaultUpdateTokenTotal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ComplianceVaultUpdateTokenTotalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ComplianceVaultUpdateTokenTotalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ComplianceVaultUpdateTokenTotal represents a UpdateTokenTotal event raised by the ComplianceVault contract.
type ComplianceVaultUpdateTokenTotal struct {
	Assets  []common.Address
	Amounts []*big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateTokenTotal is a free log retrieval operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_ComplianceVault *ComplianceVaultFilterer) FilterUpdateTokenTotal(opts *bind.FilterOpts) (*ComplianceVaultUpdateTokenTotalIterator, error) {

	logs, sub, err := _ComplianceVault.contract.FilterLogs(opts, "UpdateTokenTotal")
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultUpdateTokenTotalIterator{contract: _ComplianceVault.contract, event: "UpdateTokenTotal", logs: logs, sub: sub}, nil
}

// WatchUpdateTokenTotal is a free log subscription operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_ComplianceVault *ComplianceVaultFilterer) WatchUpdateTokenTotal(opts *bind.WatchOpts, sink chan<- *ComplianceVaultUpdateTokenTotal) (event.Subscription, error) {

	logs, sub, err := _ComplianceVault.contract.WatchLogs(opts, "UpdateTokenTotal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ComplianceVaultUpdateTokenTotal)
				if err := _ComplianceVault.contract.UnpackLog(event, "UpdateTokenTotal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateTokenTotal is a log parse operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_ComplianceVault *ComplianceVaultFilterer) ParseUpdateTokenTotal(log types.Log) (*ComplianceVaultUpdateTokenTotal, error) {
	event := new(ComplianceVaultUpdateTokenTotal)
	if err := _ComplianceVault.contract.UnpackLog(event, "UpdateTokenTotal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ComplianceVaultWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the ComplianceVault contract.
type ComplianceVaultWithdrawIterator struct {
	Event *ComplianceVaultWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ComplianceVaultWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComplianceVaultWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ComplianceVaultWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ComplianceVaultWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ComplianceVaultWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ComplianceVaultWithdraw represents a Withdraw event raised by the ComplianceVault contract.
type ComplianceVaultWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_ComplianceVault *ComplianceVaultFilterer) FilterWithdraw(opts *bind.FilterOpts) (*ComplianceVaultWithdrawIterator, error) {

	logs, sub, err := _ComplianceVault.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &ComplianceVaultWithdrawIterator{contract: _ComplianceVault.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_ComplianceVault *ComplianceVaultFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ComplianceVaultWithdraw) (event.Subscription, error) {

	logs, sub, err := _ComplianceVault.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ComplianceVaultWithdraw)
				if err := _ComplianceVault.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_ComplianceVault *ComplianceVaultFilterer) ParseWithdraw(log types.Log) (*ComplianceVaultWithdraw, error) {
	event := new(ComplianceVaultWithdraw)
	if err := _ComplianceVault.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
