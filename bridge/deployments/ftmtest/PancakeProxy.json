{
  "address": "0x1d6E7ea5B7dC910AEB8E5cA8db67f9Cf7710A866",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "_pancake02",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETH_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBNB_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fns",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter02",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "srcQty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "tradeTokensSupportingFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xef222a9eb77f59dd0c671b427047208c95ab9231693428c57789628d133b54cb",
  "receipt": {
    "to": null,
    "from": "0xb5A581c6EA895fBfD0d7529ac04e24Bf12804c2d",
    "contractAddress": "0x1d6E7ea5B7dC910AEB8E5cA8db67f9Cf7710A866",
    "transactionIndex": 0,
    "gasUsed": "1217753",
    "logsBloom": "0x
    "blockHash": "0x00002e65000008c0c7648599db239a04fe02ba2938f3a5d4572344ac132f4e15",
    "transactionHash": "0xef222a9eb77f59dd0c671b427047208c95ab9231693428c57789628d133b54cb",
    "logs": [],
    "blockNumber": 10496240,
    "cumulativeGasUsed": "1217753",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa6AD18C2aC47803E193F75c3677b14BF19B94883"
  ],
  "numDeployments": 1,
  "solcInputHash": "99d904be006cb3ff3ddd6da2b08b0b77",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"_pancake02\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fns\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter02\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"tradeTokensSupportingFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor\",\"params\":{\"_pancake02\":\"uniswap routes contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bsc/pancake_proxy.sol\":\"PancakeProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint amount) external;\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x48ab23021f110d2901cc213e835b0a0873a99e5eb41d10142ee1e47b6d54697a\",\"license\":\"MIT\"},\"contracts/bsc/pancake_proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// File: contracts\\\\interfaces\\\\IPancakeRouter01.sol\\n\\npragma solidity ^0.6.12;\\n\\nimport '../IERC20.sol';\\nimport '../trade_utils.sol';\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract PancakeProxy is Executor {\\n    // Variables\\n    address constant public ETH_CONTRACT_ADDRESS = 0x0000000000000000000000000000000000000000;\\n    uint constant public MAX = uint(-1);\\n    address public WBNB_CONTRACT_ADDRESS;\\n    IPancakeRouter02 public pancakeRouter02;\\n\\n    // Functions\\n    /**\\n     * @dev Contract constructor\\n     * @param _pancake02 uniswap routes contract address\\n     */\\n    constructor(IPancakeRouter02 _pancake02) public {\\n        pancakeRouter02 = _pancake02;\\n        WBNB_CONTRACT_ADDRESS = pancakeRouter02.WETH();\\n    }\\n\\n    function trade(address[] calldata path, uint srcQty, uint amountOutMin, uint deadline, bool isNative) public payable returns (address, uint) {\\n        require(path.length > 0, \\\"invalid path\\\");\\n\\n        uint pathLength = path.length;\\n        uint[] memory amounts;\\n        bool isSwapForETH;\\n\\n        if (msg.value == 0) {\\n            IERC20 srcToken = IERC20(path[0]);\\n            // check permission amount\\n            if (srcToken.allowance(address(this), address(pancakeRouter02)) < srcQty) {\\n                srcToken.approve(address(pancakeRouter02), 0);\\n                srcToken.approve(address(pancakeRouter02), MAX);\\n            }\\n\\n            if (!isNative) {\\n                amounts = pancakeRouter02.swapExactTokensForTokens(srcQty, amountOutMin, path, msg.sender, deadline);\\n            } else {\\n                amounts = pancakeRouter02.swapExactTokensForETH(srcQty, amountOutMin, path, msg.sender, deadline);\\n                isSwapForETH = true;\\n            }\\n        } else {\\n            amounts = pancakeRouter02.swapExactETHForTokens{value: srcQty}(amountOutMin, path, msg.sender, deadline);\\n        }\\n        require(amounts.length >= 2, \\\"invalid outputs value\\\");\\n        require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == srcQty, \\\"expected amount not reach\\\");\\n        return (isSwapForETH ? ETH_CONTRACT_ADDRESS : path[pathLength - 1], amounts[amounts.length - 1]);\\n    }\\n\\n    function tradeTokensSupportingFee(address[] calldata path, uint amountOutMin, uint deadline, bool isNative) public payable returns (address, uint) {\\n        require(path.length > 0, \\\"invalid path\\\");\\n\\n        uint pathLength = path.length;\\n        bool isSwapForETH;\\n\\n        if (msg.value == 0) {\\n            IERC20 srcToken = IERC20(path[0]);\\n            uint srcQty = srcToken.balanceOf(address(this));\\n            if (srcToken.allowance(address(this), address(pancakeRouter02)) < srcQty) {\\n                srcToken.approve(address(pancakeRouter02), 0);\\n                srcToken.approve(address(pancakeRouter02), MAX);\\n            }\\n\\n            if (!isNative) {\\n                pancakeRouter02.swapExactTokensForTokensSupportingFeeOnTransferTokens(srcQty, amountOutMin, path, address(this), deadline);\\n            } else {\\n                pancakeRouter02.swapExactTokensForETHSupportingFeeOnTransferTokens(srcQty, amountOutMin, path, address(this), deadline);\\n                isSwapForETH = true;\\n            }\\n        } else {\\n            pancakeRouter02.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(amountOutMin, path, address(this), deadline);\\n        }\\n        address returnAddress = isSwapForETH ? ETH_CONTRACT_ADDRESS : path[pathLength - 1];\\n        uint totalRecieved = balanceOf(returnAddress);\\n        require(totalRecieved >= amountOutMin, \\\"expected amount not reach\\\");\\n        transfer(returnAddress, totalRecieved);\\n\\n        return (returnAddress, totalRecieved);\\n    }\\n    \\n\\tfunction balanceOf(address token) internal view returns (uint256) {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\treturn address(this).balance;\\n\\t\\t}\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n\\tfunction transfer(address token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount);\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n          \\trequire(success);\\n\\t\\t} else {\\n\\t\\t\\tIERC20(token).transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n    /**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n\\n    /**\\n     * @dev Payable receive function to receive Ether from oldVault when migrating\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xc003c5e0d348f0fd16fb62e0984dba3a23038094d7fd92204509b74c6e5788f1\",\"license\":\"MIT\"},\"contracts/trade_utils.sol\":{\"content\":\"pragma solidity >=0.6.12 <=0.8.9;\\n\\nimport './IERC20.sol';\\n\\ncontract TradeUtils {\\n\\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n\\tfunction balanceOf(IERC20 token) internal view returns (uint256) {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\treturn address(this).balance;\\n\\t\\t}\\n        return token.balanceOf(address(this));\\n    }\\n\\n\\tfunction transfer(IERC20 token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount);\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n          \\trequire(success);\\n\\t\\t} else {\\n\\t\\t\\ttoken.transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(IERC20 token, address proxy, uint amount) internal {\\n\\t\\tif (token != ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\ttoken.approve(proxy, 0);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t\\ttoken.approve(proxy, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n}\\n\\nabstract contract Executor {\\n    function execute(address fns, bytes calldata data) external payable returns (bytes memory) {\\n        (bool success, bytes memory result) = fns.delegatecall(data);\\n        if (!success) {\\n        \\t// Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01c9dda3ecf4ec7e7a0ac459221eb453638be376e0d421e82b8c2d8bffaa3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor",
        "params": {
          "_pancake02": "uniswap routes contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1453,
        "contract": "contracts/bsc/pancake_proxy.sol:PancakeProxy",
        "label": "WBNB_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1455,
        "contract": "contracts/bsc/pancake_proxy.sol:PancakeProxy",
        "label": "pancakeRouter02",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPancakeRouter02)1439"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)1439": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      }
    }
  }
}