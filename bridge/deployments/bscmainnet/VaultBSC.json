{
  "address": "0xFe24f30d6683410d6daA5B5a950d518a6c58A6a1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        }
      ],
      "name": "DepositV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "phaseID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "ExecuteFnLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "redepositIncAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "itx",
          "type": "bytes32"
        }
      ],
      "name": "Redeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newIncognitoProxy",
          "type": "address"
        }
      ],
      "name": "UpdateIncognitoProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "UpdateTokenTotal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_CALL_REQUEST_METADATA_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_REQUEST_METADATA_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_TO_CONTRACT_REQUEST_METADATA_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CURRENT_NETWORK_ID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "externalCalldata",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "redepositToken",
          "type": "address"
        }
      ],
      "name": "_callExternal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_transferExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        }
      ],
      "name": "depositERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        }
      ],
      "name": "depositERC20_V2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        }
      ],
      "name": "deposit_V2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipientToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchangeAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "timestamp",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inst",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "heights",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "instPaths",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "instPathIsLefts",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32",
          "name": "instRoots",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blkData",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "sigIdxs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "sigVs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sigRs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sigSs",
          "type": "bytes32[]"
        }
      ],
      "name": "executeWithBurnProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getDepositedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prevVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_regulator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "isSigDataUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "isWithdrawed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migration",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notEntered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inst",
          "type": "bytes"
        }
      ],
      "name": "parseBurnInst",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "meta",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shard",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "itx",
              "type": "bytes32"
            }
          ],
          "internalType": "struct VaultBSC.BurnInstData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inst",
          "type": "bytes"
        }
      ],
      "name": "parseCalldataFromBurnInst",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "meta",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shard",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "itx",
              "type": "bytes32"
            }
          ],
          "internalType": "struct VaultBSC.BurnInstData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "redepositToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "redepositIncAddress",
              "type": "bytes"
            },
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            }
          ],
          "internalType": "struct VaultBSC.RedepositOptions",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prevVault",
      "outputs": [
        {
          "internalType": "contract Withdrawable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regulator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "incognitoAddress",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "timestamp",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "regulatorSig",
          "type": "bytes"
        }
      ],
      "name": "requestWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_regulator",
          "type": "address"
        }
      ],
      "name": "setRegulator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sigDataUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "sigToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageLayoutVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inst",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "heights",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "instPaths",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "instPathIsLefts",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32",
          "name": "instRoots",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blkData",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "sigIdxs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "sigVs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sigRs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sigSs",
          "type": "bytes32[]"
        }
      ],
      "name": "submitBurnProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDepositedToSCAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_regulator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "upgradeVaultStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inst",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "heights",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "instPaths",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "instPathIsLefts",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32",
          "name": "instRoots",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blkData",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "sigIdxs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "sigVs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sigRs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sigSs",
          "type": "bytes32[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "withdrawed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x658b86446b321e93a5bab1947582eaa69675cacd081ac7e759aa8443b12020ea",
  "receipt": {
    "to": null,
    "from": "0xE2516f0F38d9400a8ceCe5672884De72FBD01cE1",
    "contractAddress": "0xFe24f30d6683410d6daA5B5a950d518a6c58A6a1",
    "transactionIndex": 147,
    "gasUsed": "4526915",
    "logsBloom": "0x
    "blockHash": "0xa9aad3cc7f0dbcfbeeaa8d09f110ae51ddf8dc9703143a8c6a844ab3ff5c5e40",
    "transactionHash": "0x658b86446b321e93a5bab1947582eaa69675cacd081ac7e759aa8443b12020ea",
    "logs": [],
    "blockNumber": 21551606,
    "cumulativeGasUsed": "20230222",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "968b43ab6c534ef7956d872811ec0517",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"DepositV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"ExecuteFnLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"redepositIncAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"name\":\"Redeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UpdateTokenTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_CALL_REQUEST_METADATA_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_REQUEST_METADATA_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_TO_CONTRACT_REQUEST_METADATA_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURRENT_NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"externalCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"redepositToken\",\"type\":\"address\"}],\"name\":\"_callExternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"depositERC20_V2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"deposit_V2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"executeWithBurnProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDepositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isSigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"struct VaultBSC.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseCalldataFromBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"struct VaultBSC.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"redepositToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"redepositIncAddress\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"internalType\":\"struct VaultBSC.RedepositOptions\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contract Withdrawable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"regulatorSig\",\"type\":\"bytes\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageLayoutVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedToSCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"upgradeVaultStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Get the amount of coin deposited to this smartcontract\"},\"deposit(string,bytes32,bytes)\":{\"details\":\"Makes a ETH deposit to the vault to mint pETH over at Incognito Chain\",\"params\":{\"incognitoAddress\":\": Incognito Address to receive pETH\",\"signData\":\": regulator signature\",\"txId\":\": move fund transaction hash\"}},\"depositERC20(address,uint256,string,bytes32,bytes)\":{\"details\":\"Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain\",\"params\":{\"amount\":\": to deposit to the vault and mint on Incognito Chain\",\"incognitoAddress\":\": Incognito Address to receive pERC20\",\"signData\":\": regulator signature\",\"token\":\": address of the ERC20 token\",\"txId\":\": move fund transaction hash\"}},\"depositERC20_V2(address,uint256,string,bytes32,bytes)\":{\"details\":\"Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain\",\"params\":{\"amount\":\": to deposit to the vault and mint on Incognito Chain\",\"incognitoAddress\":\": Incognito Address to receive pERC20\",\"token\":\": address of the ERC20 token\"}},\"deposit_V2(string,bytes32,bytes)\":{\"details\":\"Makes a ETH deposit to the vault to mint pETH over at Incognito Chain\",\"params\":{\"incognitoAddress\":\": Incognito Address to receive pETH\"}},\"execute(address,uint256,address,address,bytes,bytes,bytes)\":{\"details\":\"execute is a general function that plays a role as proxy to interact to other smart contracts.\",\"params\":{\"amount\":\": amount of the token in ethereum's denomination\",\"callData\":\": encoded with signature and params of function from targeting smart contract.\",\"exchangeAddress\":\": address of targeting smart contract that actually executes the desired logics like trade, invest, borrow and so on.\",\"recipientToken\":\": received token address.\",\"signData\":\": signature of an unique data that is signed by an account which is generated from user's incognito privkey\",\"timestamp\":\": unique data generated from client (timestamp for example)\",\"token\":\": ethereum's token address (eg., ETH, DAI, ...)\"}},\"getDecimals(address)\":{\"details\":\"Get the decimals of an ERC20 token, return 0 if it isn't defined We check the returndatasize to covert both cases that the token has and doesn't have the function decimals()\"},\"getDepositedBalance(address,address)\":{\"details\":\"Get the amount of specific coin for specific wallet\"},\"initialize(address,address,address)\":{\"details\":\"Creates new Vault to hold assets for Incognito Chain\",\"params\":{\"_executor\":\": helper contract to perform external call from After migrating all assets to a new Vault, we still need to refer back to previous Vault to make sure old withdrawals aren't being reused\",\"_prevVault\":\": previous version of the Vault to refer back if necessary\",\"_regulator\":\": ...\"}},\"isSigDataUsed(bytes32)\":{\"details\":\"Checks if a sig data has been used before\",\"params\":{\"hash\":\": of the sig data\"},\"returns\":{\"_0\":\"bool: whether the sig data has been used or not\"}},\"isWithdrawed(bytes32)\":{\"details\":\"Checks if a burn proof has been used before\",\"params\":{\"hash\":\": of the burn proof\"},\"returns\":{\"_0\":\"bool: whether the proof has been used or not\"}},\"parseBurnInst(bytes)\":{\"details\":\"Parses a burn instruction and returns the components\",\"params\":{\"inst\":\": the full instruction, containing both metadata and body\"}},\"parseCalldataFromBurnInst(bytes)\":{\"details\":\"Parses an extended burn instruction and returns the components\",\"params\":{\"inst\":\": the full instruction, containing both metadata and body\"}},\"requestWithdraw(string,address,uint256,bytes,bytes,bytes32,bytes)\":{\"details\":\"User requests withdraw token contains in withdrawRequests. Deposit event will be emitted to let incognito recognize and mint new p-tokens for the user.\",\"params\":{\"amount\":\": amount of the token in ethereum's denomination\",\"incognitoAddress\":\": incognito's address that will receive minted p-tokens.\",\"signData\":\": regulator signature\",\"timestamp\":\": unique data generated from client (timestamp for example)\",\"token\":\": ethereum's token address (eg., ETH, DAI, ...)\",\"txId\":\": move fund transaction hash\"}},\"setRegulator(address)\":{\"details\":\"set regulator\"},\"sigToAddress(bytes,bytes32)\":{\"details\":\"generate address from signature data and hash.\"},\"submitBurnProof(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"Burnt Proof is submited to store burnt amount of p-token/p-ETH and receiver's address Receiver then can call withdrawRequest to withdraw these token to he/she incognito address.\",\"params\":{\"blkData\":\": merkle has of the block body\",\"heights\":\": the blocks containing the instruction\",\"inst\":\": the decoded instruction as a list of bytes\",\"instPathIsLefts\":\": whether each node on the path is the left or right child\",\"instPaths\":\": merkle path of the instruction\",\"instRoots\":\": root of the merkle tree contains all instructions\",\"sigIdxs\":\": indices of the validators who signed this block\",\"sigRs\":\": part of the signatures of the validators\",\"sigSs\":\": part of the signatures of the validators\",\"sigVs\":\": part of the signatures of the validators\"}},\"updateAssets(address[],uint256[])\":{\"details\":\"Move total number of assets to newVault\",\"params\":{\"amounts\":\": total number of the ERC20 tokens to move, 0x0 for ETH\",\"assets\":\": address of the ERC20 tokens to move, 0x0 for ETH\"}},\"upgradeVaultStorage(address,address)\":{\"details\":\"upgrade helper for storage layout version 2\",\"params\":{\"_executor\":\": helper contract to perform external call from\",\"_regulator\":\": ...\"}},\"withdraw(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"Withdraws pETH/pIERC20 by providing a burn proof over at Incognito Chain\",\"params\":{\"blkData\":\": merkle has of the block body\",\"heights\":\": the blocks containing the instruction\",\"inst\":\": the decoded instruction as a list of bytes\",\"instPathIsLefts\":\": whether each node on the path is the left or right child\",\"instPaths\":\": merkle path of the instruction\",\"instRoots\":\": root of the merkle tree contains all instructions\",\"sigIdxs\":\": indices of the validators who signed this block\",\"sigRs\":\": part of the signatures of the validators\",\"sigSs\":\": part of the signatures of the validators\",\"sigVs\":\": part of the signatures of the validators\"}}},\"stateVariables\":{\"CURRENT_NETWORK_ID\":{\"details\":\"Added in Storage Layout version : 2.0\"},\"_INCOGNITO_SLOT\":{\"details\":\"Storage slot with the incognito proxy. This is the keccak-256 hash of \\\"eip1967.proxy.incognito.\\\" subtracted by 1\"},\"withdrawed\":{\"details\":\"Storage variables for Vault This section is APPEND-ONLY, in order to preserve upgradeability since we use Proxy Pattern\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(string,bytes32,bytes)\":{\"notice\":\"This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64\"},\"depositERC20(address,uint256,string,bytes32,bytes)\":{\"notice\":\"This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64Before calling this function, enough ERC20 must be allowed to tranfer from msg.sender to this contract\"},\"depositERC20_V2(address,uint256,string,bytes32,bytes)\":{\"notice\":\"This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64Before calling this function, enough ERC20 must be allowed to tranfer from msg.sender to this contract\"},\"deposit_V2(string,bytes32,bytes)\":{\"notice\":\"This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64\"},\"isSigDataUsed(bytes32)\":{\"notice\":\"First, we check inside the storage of this contract itself. If the hash has been used before, we return the result. Otherwise, we query previous vault recursively until the first Vault (prevVault address is 0x0)\"},\"isWithdrawed(bytes32)\":{\"notice\":\"First, we check inside the storage of this contract itself. If the hash has been used before, we return the result. Otherwise, we query previous vault recursively until the first Vault (prevVault address is 0x0)\"},\"submitBurnProof(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])\":{\"notice\":\"This function takes a burn instruction on Incognito Chain, checks for its validity and returns the token back to ETH chainThis only works when the contract is not Paused\"},\"updateAssets(address[],uint256[])\":{\"notice\":\"This only works when the preVault is PausedThis can only be called by preVault\"},\"withdraw(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])\":{\"notice\":\"This function takes a burn instruction on Incognito Chain, checks for its validity and returns the token back to ETH chainThis only works when the contract is not Paused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault_variants/vault_BSC.sol\":\"VaultBSC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint amount) external;\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x48ab23021f110d2901cc213e835b0a0873a99e5eb41d10142ee1e47b6d54697a\",\"license\":\"MIT\"},\"contracts/trade_utils.sol\":{\"content\":\"pragma solidity >=0.6.12 <=0.8.9;\\n\\nimport './IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract TradeUtils {\\n\\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n\\tfunction balanceOf(IERC20 token) internal view returns (uint256) {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\treturn address(this).balance;\\n\\t\\t}\\n        return token.balanceOf(address(this));\\n    }\\n\\n\\tfunction transfer(IERC20 token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount);\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n          \\trequire(success);\\n\\t\\t} else {\\n\\t\\t\\ttoken.transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(IERC20 token, address proxy, uint amount) internal {\\n\\t\\tif (token != ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\ttoken.approve(proxy, 0);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t\\ttoken.approve(proxy, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n}\\n\\nabstract contract Executor is Ownable {\\n\\tmapping (address => bool) public dappAddresses;\\n\\n\\tconstructor() internal {\\n\\t\\tdappAddresses[address(this)] = true;\\n\\t}\\n\\n\\tfunction addDappAddress(address addr) external onlyOwner {\\n\\t\\trequire(addr != address(0x0), \\\"Executor:A0\\\"); // address is zero\\n\\t\\tdappAddresses[addr] = true;\\n\\t}\\n\\n\\tfunction removeDappAddress(address addr) external onlyOwner {\\n\\t\\trequire(addr != address(0x0), \\\"Executor:A0\\\"); // address is zero\\n\\t\\tdappAddresses[addr] = false;\\n\\t}\\n\\n\\tfunction dappExists(address addr) public view returns (bool) {\\n\\t\\treturn dappAddresses[addr];\\n\\t}\\n\\n    function execute(address fns, bytes calldata data) external payable returns (bytes memory) {\\n    \\trequire(dappExists(fns), \\\"Executor:DNE\\\"); // dapp does not exist\\n        (bool success, bytes memory result) = fns.delegatecall(data);\\n        if (!success) {\\n        \\t// Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xf0d72d29eec562c5ca894642bce780ebbc671ffad618459046d1f9adc045224d\"},\"contracts/vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./trade_utils.sol\\\";\\n\\n/**\\n * Math operations with safety checks\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_MESSAGE = \\\"SafeMath exception\\\";\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        require(a == 0 || c / a == b, ERROR_MESSAGE);\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, ERROR_MESSAGE);\\n        uint256 c = a / b;\\n        require(a == b * c + a % b, ERROR_MESSAGE);\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, ERROR_MESSAGE);\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c>=a && c>=b, ERROR_MESSAGE);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.safeSub(1);\\n    }\\n}\\n\\n\\n/**\\n * @dev Interface of the contract capable of checking if an instruction is\\n * confirmed over at Incognito Chain\\n */\\ninterface Incognito {\\n    function instructionApproved(\\n        bool,\\n        bytes32,\\n        uint,\\n        bytes32[] calldata,\\n        bool[] calldata,\\n        bytes32,\\n        bytes32,\\n        uint[] calldata,\\n        uint8[] calldata,\\n        bytes32[] calldata,\\n        bytes32[] calldata\\n    ) external view returns (bool);\\n}\\n\\n/**\\n * @dev Interface of the previous Vault contract to query burn proof status\\n */\\ninterface Withdrawable {\\n    function isWithdrawed(bytes32)  external view returns (bool);\\n    function isSigDataUsed(bytes32)  external view returns (bool);\\n    function getDepositedBalance(address, address)  external view returns (uint);\\n    function updateAssets(address[] calldata, uint[] calldata) external returns (bool);\\n    function paused() external view returns (bool);\\n}\\n\\n/**\\n * @dev Responsible for holding the assets and issue minting instruction to\\n * Incognito Chain. Also, when presented with a burn proof created over at\\n * Incognito Chain, releases the tokens back to user\\n */\\ncontract Vault {\\n    using SafeMath for uint;\\n    using Counters for Counters.Counter;\\n    /**\\n     * @dev Storage slot with the incognito proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.incognito.\\\" subtracted by 1\\n     */\\n    bytes32 private constant _INCOGNITO_SLOT = 0x62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd2;\\n    address constant public ETH_TOKEN = 0x0000000000000000000000000000000000000000;\\n    /**\\n     * @dev Storage variables for Vault\\n     * This section is APPEND-ONLY, in order to preserve upgradeability\\n     * since we use Proxy Pattern\\n     */\\n    mapping(bytes32 => bool) public withdrawed;\\n    mapping(bytes32 => bool) public sigDataUsed;\\n    // address => token => amount\\n    mapping(address => mapping(address => uint)) public withdrawRequests;\\n    mapping(address => mapping(address => bool)) public migration;\\n    mapping(address => uint) public totalDepositedToSCAmount;\\n    Withdrawable public prevVault;\\n    bool public notEntered;\\n    bool public isInitialized;\\n    /**\\n    * @dev Added in Storage Layout version : 2.0\\n    */\\n    uint8 constant public CURRENT_NETWORK_ID = 1; // Ethereum\\n    uint8 constant public BURN_REQUEST_METADATA_TYPE = 241;\\n    uint8 constant public BURN_TO_CONTRACT_REQUEST_METADATA_TYPE = 243;\\n    uint8 constant public BURN_CALL_REQUEST_METADATA_TYPE = 158;\\n    Counters.Counter private idCounter;\\n\\n    address public regulator;\\n    uint256 public storageLayoutVersion;\\n    address public executor;\\n    /**\\n    * @dev END Storage variables version : 2.0\\n    */\\n\\n    /**\\n    * @dev END Storage variables\\n    */\\n\\n    struct BurnInstData {\\n        uint8 meta; // type of the instruction\\n        uint8 shard; // ID of the Incognito shard containing the instruction, must be 1\\n        address token; // ETH address of the token contract (0x0 for ETH)\\n        address payable to; // ETH address of the receiver of the token\\n        uint amount; // burned amount (on Incognito)\\n        bytes32 itx; // Incognito's burning tx\\n    }\\n\\n    struct RedepositOptions {\\n        address redepositToken;\\n        bytes redepositIncAddress;\\n        address payable withdrawAddress;\\n    }\\n\\n    struct ShieldInfo {\\n        address sender; // the guy shield request\\n        bytes32 tx; // txid which sent fund to core team's addresses\\n    }\\n\\n    enum Prefix {\\n        ETHEREUM_EXECUTE_SIGNATURE,\\n        ETHEREUM_REQUEST_WITHDRAW_SIGNATURE,\\n        BSC_EXECUTE_SIGNATURE,\\n        BSC_REQUEST_WITHDRAW_SIGNATURE,\\n        PLG_EXECUTE_SIGNATURE,\\n        PLG_REQUEST_WITHDRAW_SIGNATURE,\\n        FTM_EXECUTE_SIGNATURE,\\n        FTM_REQUEST_WITHDRAW_SIGNATURE\\n    }\\n\\n    // error code\\n    enum Errors {\\n        EMPTY,\\n        NO_REENTRANCE,\\n        MAX_UINT_REACHED,\\n        VALUE_OVER_FLOW,\\n        INTERNAL_TX_ERROR,\\n        ALREADY_USED, // 5\\n        INVALID_DATA,\\n        TOKEN_NOT_ENOUGH,\\n        WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH,\\n        INVALID_RETURN_DATA,\\n        NOT_EQUAL, // 10\\n        NULL_VALUE,\\n        ONLY_PREVAULT,\\n        PREVAULT_NOT_PAUSED,\\n        SAFEMATH_EXCEPTION,\\n        ALREADY_INITIALIZED, // 15\\n        INVALID_SIGNATURE,\\n        NOT_AUTHORISED,\\n        ALREADY_UPGRADED,\\n        INVALID_DATA_BURN_CALL_INST,\\n        ONLY_SELF_CALL\\n    }\\n\\n    event Deposit(address token, string incognitoAddress, uint amount);\\n    event Withdraw(address token, address to, uint amount);\\n    event UpdateTokenTotal(address[] assets, uint[] amounts);\\n    event UpdateIncognitoProxy(address newIncognitoProxy);\\n    event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx);\\n    event DepositV2(address token, string incognitoAddress, uint amount, uint256 depositID);\\n    event ExecuteFnLog(bytes32 id, uint256 phaseID, bytes errorData);\\n\\n    /**\\n     * modifier for contract version\\n     */\\n    modifier onlyPreVault(){\\n        require(address(prevVault) != address(0x0) && msg.sender == address(prevVault), errorToString(Errors.ONLY_PREVAULT));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, notEntered will be true\\n        require(notEntered, errorToString(Errors.NO_REENTRANCE));\\n\\n        // Any calls to nonReentrant after this point will fail\\n        notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Creates new Vault to hold assets for Incognito Chain\\n     * @param _prevVault: previous version of the Vault to refer back if necessary\\n     * @param _regulator: ...\\n     * @param _executor: helper contract to perform external call from\\n     * After migrating all assets to a new Vault, we still need to refer\\n     * back to previous Vault to make sure old withdrawals aren't being reused\\n     */\\n    function initialize(address _prevVault, address _regulator, address _executor) external {\\n        require(!isInitialized, errorToString(Errors.ALREADY_INITIALIZED));\\n        prevVault = Withdrawable(_prevVault);\\n        isInitialized = true;\\n        notEntered = true;\\n        require(regulator == address(0x0), errorToString(Errors.NOT_AUTHORISED));\\n        regulator = _regulator;\\n        executor = _executor;\\n        storageLayoutVersion = 2;\\n    }\\n\\n    /**\\n     * @dev upgrade helper for storage layout version 2\\n     * @param _regulator: ...\\n     * @param _executor: helper contract to perform external call from\\n     */\\n    function upgradeVaultStorage(address _regulator, address _executor) external {\\n        // storageLayoutVersion is a new variable introduced in this storage layout version, then set to 2 to match the storage layout version itself\\n        require(storageLayoutVersion == 0, errorToString(Errors.ALREADY_UPGRADED));\\n        // make sure the version increase can only happen once\\n        storageLayoutVersion = 2;\\n        require(regulator == address(0x0), errorToString(Errors.NOT_AUTHORISED));\\n        regulator = _regulator;\\n        executor = _executor;\\n    }\\n\\n    /**\\n     * @dev Returns the current incognito proxy.\\n     */\\n    function _incognito() internal view returns (address icg) {\\n        bytes32 slot = _INCOGNITO_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            icg := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes a ETH deposit to the vault to mint pETH over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @param incognitoAddress: Incognito Address to receive pETH\\n     * @param txId: move fund transaction hash\\n     * @param signData: regulator signature\\n     */\\n    function deposit(string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external payable nonReentrant {\\n        require(address(this).balance <= 10 ** 27, errorToString(Errors.MAX_UINT_REACHED));\\n        verifyRegulator(txId, signData);\\n\\n        emit Deposit(ETH_TOKEN, incognitoAddress, msg.value);\\n    }\\n\\n    /**\\n     * @dev Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @notice Before calling this function, enough ERC20 must be allowed to\\n     * tranfer from msg.sender to this contract\\n     * @param token: address of the ERC20 token\\n     * @param amount: to deposit to the vault and mint on Incognito Chain\\n     * @param incognitoAddress: Incognito Address to receive pERC20\\n     * @param txId: move fund transaction hash\\n     * @param signData: regulator signature\\n     */\\n    function depositERC20(address token, uint amount, string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external nonReentrant {\\n        verifyRegulator(txId, signData);\\n\\n        IERC20 erc20Interface = IERC20(token);\\n        uint8 decimals = getDecimals(address(token));\\n        uint tokenBalance = erc20Interface.balanceOf(address(this));\\n        uint beforeTransfer = tokenBalance;\\n        uint emitAmount = amount;\\n        if (decimals > 9) {\\n            emitAmount = emitAmount / (10 ** (uint(decimals) - 9));\\n            tokenBalance = tokenBalance / (10 ** (uint(decimals) - 9));\\n        }\\n        require(emitAmount <= 10 ** 18 && tokenBalance <= 10 ** 18 && emitAmount.safeAdd(tokenBalance) <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\\n        erc20Interface.transferFrom(msg.sender, address(this), amount);\\n        require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        require(balanceOf(token).safeSub(beforeTransfer) == amount, errorToString(Errors.NOT_EQUAL));\\n\\n        emit Deposit(token, incognitoAddress, emitAmount);\\n    }\\n\\n    /**\\n     * @dev Makes a ETH deposit to the vault to mint pETH over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @param incognitoAddress: Incognito Address to receive pETH\\n     */\\n    function deposit_V2(string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external payable nonReentrant {\\n        require(address(this).balance <= 10 ** 27, errorToString(Errors.MAX_UINT_REACHED));\\n        verifyRegulator(txId, signData);\\n        emit DepositV2(ETH_TOKEN, incognitoAddress, msg.value, idCounter.current());\\n        idCounter.increment();\\n    }\\n\\n    /**\\n     * @dev Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @notice Before calling this function, enough ERC20 must be allowed to\\n     * tranfer from msg.sender to this contract\\n     * @param token: address of the ERC20 token\\n     * @param amount: to deposit to the vault and mint on Incognito Chain\\n     * @param incognitoAddress: Incognito Address to receive pERC20\\n     */\\n    function depositERC20_V2(address token, uint amount, string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external nonReentrant {\\n        verifyRegulator(txId, signData);\\n        IERC20 erc20Interface = IERC20(token);\\n        uint8 decimals = getDecimals(address(token));\\n        uint tokenBalance = erc20Interface.balanceOf(address(this));\\n        uint beforeTransfer = tokenBalance;\\n        uint emitAmount = amount;\\n        if (decimals > 9) {\\n            emitAmount = emitAmount / (10 ** (uint(decimals) - 9));\\n            tokenBalance = tokenBalance / (10 ** (uint(decimals) - 9));\\n        }\\n        require(emitAmount <= 10 ** 18 && tokenBalance <= 10 ** 18 && emitAmount.safeAdd(tokenBalance) <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\\n        erc20Interface.transferFrom(msg.sender, address(this), amount);\\n        require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        require(balanceOf(token).safeSub(beforeTransfer) == amount, errorToString(Errors.NOT_EQUAL));\\n\\n        emit DepositV2(token, incognitoAddress, emitAmount, idCounter.current());\\n        idCounter.increment();\\n    }\\n\\n    /**\\n     * @dev Checks if a burn proof has been used before\\n     * @notice First, we check inside the storage of this contract itself. If the\\n     * hash has been used before, we return the result. Otherwise, we query\\n     * previous vault recursively until the first Vault (prevVault address is 0x0)\\n     * @param hash: of the burn proof\\n     * @return bool: whether the proof has been used or not\\n     */\\n    function isWithdrawed(bytes32 hash) public view returns(bool) {\\n        if (withdrawed[hash]) {\\n            return true;\\n        } else if (address(prevVault) == address(0)) {\\n            return false;\\n        }\\n        return prevVault.isWithdrawed(hash);\\n    }\\n\\n    /**\\n     * @dev Parses a burn instruction and returns the components\\n     * @param inst: the full instruction, containing both metadata and body\\n     */\\n    function parseBurnInst(bytes memory inst) public pure returns (BurnInstData memory) {\\n        BurnInstData memory data;\\n        data.meta = uint8(inst[0]);\\n        data.shard = uint8(inst[1]);\\n        address token;\\n        address payable to;\\n        uint amount;\\n        bytes32 itx;\\n        assembly {\\n        // skip first 0x20 bytes (stored length of inst)\\n            token := mload(add(inst, 0x22)) // [3:34]\\n            to := mload(add(inst, 0x42)) // [34:66]\\n            amount := mload(add(inst, 0x62)) // [66:98]\\n            itx := mload(add(inst, 0x82)) // [98:130]\\n        }\\n        data.token = token;\\n        data.to = to;\\n        data.amount = amount;\\n        data.itx = itx;\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Parses an extended burn instruction and returns the components\\n     * @param inst: the full instruction, containing both metadata and body\\n     */\\n    function parseCalldataFromBurnInst(bytes calldata inst) public pure returns (BurnInstData memory, RedepositOptions memory, bytes memory) {\\n        require(inst.length >= 296, errorToString(Errors.INVALID_DATA_BURN_CALL_INST));\\n        BurnInstData memory bdata;\\n        // layout: meta(1), shard(1), network(1), extToken(32), extCallAddr(32), amount(32), txID(32), recvToken(32), withdrawAddr(32), redepositAddr(101), extCalldata(*)\\n        {\\n            bdata.meta = uint8(inst[0]);\\n            bdata.shard = uint8(inst[1]);\\n            uint8 networkID = uint8(inst[2]);\\n            require(bdata.meta == BURN_CALL_REQUEST_METADATA_TYPE && bdata.shard == 1 && networkID == CURRENT_NETWORK_ID, errorToString(Errors.INVALID_DATA_BURN_CALL_INST));\\n        }\\n        RedepositOptions memory opt;\\n        {\\n            (bdata.token, bdata.to, bdata.amount, bdata.itx, opt.redepositToken, opt.withdrawAddress) = abi.decode(inst[3:195], (address, address, uint256, bytes32, address, address));\\n        }\\n    \\n        opt.redepositIncAddress = bytes(inst[195:296]);\\n        return (bdata, opt, bytes(inst[296:]));\\n    }\\n\\n    /**\\n     * @dev Verifies that a burn instruction is valid\\n     * @notice All params except inst are the list of 2 elements corresponding to\\n     * the proof on beacon and bridge\\n     * @notice All params are the same as in `withdraw`\\n     */\\n    function verifyInst(\\n        bytes memory inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) view internal {\\n        // Each instruction can only by redeemed once\\n        bytes32 beaconInstHash = keccak256(abi.encodePacked(inst, heights));\\n\\n        // Verify instruction on beacon\\n        require(Incognito(_incognito()).instructionApproved(\\n                true, // Only check instruction on beacon\\n                beaconInstHash,\\n                heights,\\n                instPaths,\\n                instPathIsLefts,\\n                instRoots,\\n                blkData,\\n                sigIdxs,\\n                sigVs,\\n                sigRs,\\n                sigSs\\n            ), errorToString(Errors.INVALID_DATA));\\n    }\\n\\n    /**\\n     * @dev Withdraws pETH/pIERC20 by providing a burn proof over at Incognito Chain\\n     * @notice This function takes a burn instruction on Incognito Chain, checks\\n     * for its validity and returns the token back to ETH chain\\n     * @notice This only works when the contract is not Paused\\n     * @param inst: the decoded instruction as a list of bytes\\n     * @param heights: the blocks containing the instruction\\n     * @param instPaths: merkle path of the instruction\\n     * @param instPathIsLefts: whether each node on the path is the left or right child\\n     * @param instRoots: root of the merkle tree contains all instructions\\n     * @param blkData: merkle has of the block body\\n     * @param sigIdxs: indices of the validators who signed this block\\n     * @param sigVs: part of the signatures of the validators\\n     * @param sigRs: part of the signatures of the validators\\n     * @param sigSs: part of the signatures of the validators\\n     */\\n    function withdraw(\\n        bytes memory inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) public nonReentrant {\\n        require(inst.length >= 130, errorToString(Errors.INVALID_DATA));\\n        BurnInstData memory data = parseBurnInst(inst);\\n        require(data.meta == BURN_REQUEST_METADATA_TYPE && data.shard == 1, errorToString(Errors.INVALID_DATA)); // Check instruction type\\n\\n        // Not withdrawed\\n        require(!isWithdrawed(data.itx), errorToString(Errors.ALREADY_USED));\\n        withdrawed[data.itx] = true;\\n\\n        // Check if balance is enough\\n        if (data.token == ETH_TOKEN) {\\n            require(address(this).balance >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        } else {\\n            uint8 decimals = getDecimals(data.token);\\n            if (decimals > 9) {\\n                data.amount = data.amount.safeMul(10 ** (uint(decimals) - 9));\\n            }\\n            require(IERC20(data.token).balanceOf(address(this)) >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        }\\n\\n        verifyInst(\\n            inst,\\n            heights,\\n            instPaths,\\n            instPathIsLefts,\\n            instRoots,\\n            blkData,\\n            sigIdxs,\\n            sigVs,\\n            sigRs,\\n            sigSs\\n        );\\n\\n        // Send and notify\\n        if (data.token == ETH_TOKEN) {\\n            (bool success, ) =  data.to.call{value: data.amount}(\\\"\\\");\\n            require(success, errorToString(Errors.INTERNAL_TX_ERROR));\\n        } else {\\n            IERC20(data.token).transfer(data.to, data.amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n        emit Withdraw(data.token, data.to, data.amount);\\n    }\\n\\n    function executeWithBurnProof(\\n        bytes calldata inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) external nonReentrant {\\n        (BurnInstData memory data, RedepositOptions memory rOptions, bytes memory externalCalldata) = parseCalldataFromBurnInst(inst); // parse function also does sanity checks\\n        require(!isWithdrawed(data.itx), errorToString(Errors.ALREADY_USED)); // check if txID has been used previously\\n        withdrawed[data.itx] = true;\\n        // check if vault balance is sufficient\\n        if (data.token == ETH_TOKEN) {\\n            require(address(this).balance >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        } else {\\n            uint8 decimals = getDecimals(data.token);\\n            if (decimals > 9) {\\n                data.amount = data.amount.safeMul(10 ** (uint(decimals) - 9));\\n            }\\n            require(IERC20(data.token).balanceOf(address(this)) >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        }\\n\\n        verifyInst(\\n            inst,\\n            heights,\\n            instPaths,\\n            instPathIsLefts,\\n            instRoots,\\n            blkData,\\n            sigIdxs,\\n            sigVs,\\n            sigRs,\\n            sigSs\\n        );\\n\\n\\n        // perform external msgcall\\n        try this._callExternal(data.token, data.to, data.amount, externalCalldata, rOptions.redepositToken) returns (uint256 returnedAmount) {\\n            if (rOptions.withdrawAddress == address(0)) {\\n                // after executing, one can redeposit to Incognito Chain\\n                _redeposit(rOptions.redepositToken, rOptions.redepositIncAddress, returnedAmount, data.itx);\\n            } else {\\n                // alternatively, the received funds can be withdrawn\\n                try this._transferExternal(rOptions.redepositToken, rOptions.withdrawAddress, returnedAmount) {\\n                    emit Withdraw(rOptions.redepositToken, rOptions.withdrawAddress, returnedAmount);\\n                } catch (bytes memory lowLevelData) {\\n                    // upon revert, emit Redeposit event\\n                    _redeposit(rOptions.redepositToken, rOptions.redepositIncAddress, returnedAmount, data.itx);\\n                    emit ExecuteFnLog(data.itx, 1, lowLevelData);\\n                    return;\\n                }\\n            }\\n        } catch (bytes memory lowLevelData) {\\n            _redeposit(data.token, rOptions.redepositIncAddress, data.amount, data.itx);\\n            emit ExecuteFnLog(data.itx, 0, lowLevelData);\\n            return;\\n        }\\n    }\\n\\n    function _redeposit(address token, bytes memory redepositIncAddress, uint256 amount, bytes32 itx) internal {\\n        uint emitAmount = amount;\\n        if (token == ETH_TOKEN) {\\n            require(address(this).balance <= 10 ** 27, errorToString(Errors.MAX_UINT_REACHED));\\n        } else {\\n            uint8 decimals = getDecimals(address(token));\\n            if (decimals > 9) {\\n                emitAmount = emitAmount / (10 ** (uint(decimals) - 9));\\n            }\\n            require(emitAmount <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\\n        }\\n        emit Redeposit(token, redepositIncAddress, emitAmount, itx);\\n    }\\n\\n    function _transferExternal(address token, address payable to, uint256 amount) external onlySelf() {\\n        if (token == ETH_TOKEN) {\\n            Address.sendValue(to, amount);\\n        } else {\\n            IERC20(token).transfer(to, amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n    }\\n\\n    function _callExternal(address token, address to, uint256 amount, bytes memory externalCalldata, address redepositToken) external onlySelf() returns (uint256) {\\n        uint balanceBeforeTrade = balanceOf(redepositToken);\\n        bytes memory result;\\n        uint256 msgval = 0;\\n        if (token == ETH_TOKEN) {\\n            msgval = amount;\\n        } else {\\n            IERC20(token).transfer(executor, amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n        result = Executor(executor).execute{value: msgval}(to, externalCalldata);\\n        require(result.length == 64, errorToString(Errors.INVALID_RETURN_DATA));\\n        (address returnedTokenAddress, uint returnedAmount) = abi.decode(result, (address, uint));\\n        require(returnedTokenAddress == redepositToken && balanceOf(redepositToken).safeSub(balanceBeforeTrade) == returnedAmount, errorToString(Errors.INVALID_RETURN_DATA));\\n        return returnedAmount;\\n    }\\n\\n    modifier onlySelf() {\\n        require(address(this) == msg.sender, errorToString(Errors.ONLY_SELF_CALL));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Burnt Proof is submited to store burnt amount of p-token/p-ETH and receiver's address\\n     * Receiver then can call withdrawRequest to withdraw these token to he/she incognito address.\\n     * @notice This function takes a burn instruction on Incognito Chain, checks\\n     * for its validity and returns the token back to ETH chain\\n     * @notice This only works when the contract is not Paused\\n     * @param inst: the decoded instruction as a list of bytes\\n     * @param heights: the blocks containing the instruction\\n     * @param instPaths: merkle path of the instruction\\n     * @param instPathIsLefts: whether each node on the path is the left or right child\\n     * @param instRoots: root of the merkle tree contains all instructions\\n     * @param blkData: merkle has of the block body\\n     * @param sigIdxs: indices of the validators who signed this block\\n     * @param sigVs: part of the signatures of the validators\\n     * @param sigRs: part of the signatures of the validators\\n     * @param sigSs: part of the signatures of the validators\\n     */\\n    function submitBurnProof(\\n        bytes memory inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) public nonReentrant {\\n        require(inst.length >= 130, errorToString(Errors.INVALID_DATA));\\n        BurnInstData memory data = parseBurnInst(inst);\\n        require(data.meta == BURN_TO_CONTRACT_REQUEST_METADATA_TYPE && data.shard == 1, errorToString(Errors.INVALID_DATA)); // Check instruction type\\n\\n        // Not withdrawed\\n        require(!isWithdrawed(data.itx), errorToString(Errors.ALREADY_USED));\\n        withdrawed[data.itx] = true;\\n\\n        // Check if balance is enough\\n        if (data.token == ETH_TOKEN) {\\n            require(address(this).balance >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        } else {\\n            uint8 decimals = getDecimals(data.token);\\n            if (decimals > 9) {\\n                data.amount = data.amount.safeMul(10 ** (uint(decimals) - 9));\\n            }\\n            require(IERC20(data.token).balanceOf(address(this)) >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        }\\n\\n        verifyInst(\\n            inst,\\n            heights,\\n            instPaths,\\n            instPathIsLefts,\\n            instRoots,\\n            blkData,\\n            sigIdxs,\\n            sigVs,\\n            sigRs,\\n            sigSs\\n        );\\n\\n        withdrawRequests[data.to][data.token] = withdrawRequests[data.to][data.token].safeAdd(data.amount);\\n        totalDepositedToSCAmount[data.token] = totalDepositedToSCAmount[data.token].safeAdd(data.amount);\\n    }\\n\\n    /**\\n     * @dev generate address from signature data and hash.\\n     */\\n    function sigToAddress(bytes memory signData, bytes32 hash) public pure returns (address) {\\n        bytes32 s;\\n        bytes32 r;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(signData, 0x20))\\n            s := mload(add(signData, 0x40))\\n        }\\n        v = uint8(signData[64]) + 27;\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Checks if a sig data has been used before\\n     * @notice First, we check inside the storage of this contract itself. If the\\n     * hash has been used before, we return the result. Otherwise, we query\\n     * previous vault recursively until the first Vault (prevVault address is 0x0)\\n     * @param hash: of the sig data\\n     * @return bool: whether the sig data has been used or not\\n     */\\n    function isSigDataUsed(bytes32 hash) public view returns(bool) {\\n        if (sigDataUsed[hash]) {\\n            return true;\\n        } else if (address(prevVault) == address(0)) {\\n            return false;\\n        }\\n        return prevVault.isSigDataUsed(hash);\\n    }\\n\\n    struct PreSignData {\\n        Prefix prefix;\\n        address token;\\n        bytes timestamp;\\n        uint amount;\\n    }\\n\\n    function newPreSignData(Prefix prefix, address token, bytes calldata timestamp, uint amount) pure internal returns (PreSignData memory) {\\n        PreSignData memory psd = PreSignData(prefix, token, timestamp, amount);\\n        return psd;\\n    }\\n\\n    /**\\n     * @dev User requests withdraw token contains in withdrawRequests.\\n     * Deposit event will be emitted to let incognito recognize and mint new p-tokens for the user.\\n     * @param incognitoAddress: incognito's address that will receive minted p-tokens.\\n     * @param token: ethereum's token address (eg., ETH, DAI, ...)\\n     * @param amount: amount of the token in ethereum's denomination\\n     * @param signData: signature of an unique data that is signed by an account which is generated from user's incognito privkey\\n     * @param timestamp: unique data generated from client (timestamp for example)\\n     * @param txId: move fund transaction hash\\n     * @param signData: regulator signature\\n     */\\n    function requestWithdraw(\\n        string calldata incognitoAddress,\\n        address token,\\n        uint amount,\\n        bytes calldata signData,\\n        bytes calldata timestamp,\\n        bytes32 txId,\\n        bytes calldata regulatorSig\\n    ) external nonReentrant {\\n        verifyRegulator(txId, regulatorSig);\\n\\n        // verify owner signs data\\n        address verifier = verifySignData(abi.encode(newPreSignData(Prefix.ETHEREUM_REQUEST_WITHDRAW_SIGNATURE, token, timestamp, amount), incognitoAddress), signData);\\n\\n        // migrate from preVault\\n        migrateBalance(verifier, token);\\n\\n        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\\n        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\\n        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\\n\\n        // convert denomination from ethereum's to incognito's (pcoin)\\n        uint emitAmount = amount;\\n        if (token != ETH_TOKEN) {\\n            uint8 decimals = getDecimals(token);\\n            if (decimals > 9) {\\n                emitAmount = amount / (10 ** (uint(decimals) - 9));\\n            }\\n        }\\n\\n        emit Deposit(token, incognitoAddress, emitAmount);\\n    }\\n\\n    /**\\n     * @dev execute is a general function that plays a role as proxy to interact to other smart contracts.\\n     * @param token: ethereum's token address (eg., ETH, DAI, ...)\\n     * @param amount: amount of the token in ethereum's denomination\\n     * @param recipientToken: received token address.\\n     * @param exchangeAddress: address of targeting smart contract that actually executes the desired logics like trade, invest, borrow and so on.\\n     * @param callData: encoded with signature and params of function from targeting smart contract.\\n     * @param timestamp: unique data generated from client (timestamp for example)\\n     * @param signData: signature of an unique data that is signed by an account which is generated from user's incognito privkey\\n     */\\n    function execute(\\n        address token,\\n        uint amount,\\n        address recipientToken,\\n        address exchangeAddress,\\n        bytes calldata callData,\\n        bytes calldata timestamp,\\n        bytes calldata signData\\n    ) external payable nonReentrant {\\n        //verify ower signs data from input\\n        address verifier = verifySignData(abi.encode(newPreSignData(Prefix.ETHEREUM_EXECUTE_SIGNATURE, token, timestamp, amount), recipientToken, exchangeAddress, callData), signData);\\n\\n        // migrate from preVault\\n        migrateBalance(verifier, token);\\n        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\\n\\n        // update balance of verifier\\n        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\\n        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\\n\\n        // define number of eth spent for forwarder.\\n        uint ethAmount = msg.value;\\n        if (token == ETH_TOKEN) {\\n            ethAmount = ethAmount.safeAdd(amount);\\n        } else {\\n            // transfer token to exchangeAddress.\\n            require(IERC20(token).balanceOf(address(this)) >= amount, errorToString(Errors.TOKEN_NOT_ENOUGH));\\n            IERC20(token).transfer(executor, amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n        uint returnedAmount = callExtFunc(recipientToken, ethAmount, callData, exchangeAddress);\\n\\n        // update withdrawRequests\\n        withdrawRequests[verifier][recipientToken] = withdrawRequests[verifier][recipientToken].safeAdd(returnedAmount);\\n        totalDepositedToSCAmount[recipientToken] = totalDepositedToSCAmount[recipientToken].safeAdd(returnedAmount);\\n    }\\n\\n    /**\\n     * @dev single trade\\n     */\\n    function callExtFunc(address recipientToken, uint ethAmount, bytes memory callData, address exchangeAddress) internal returns (uint) {\\n        // get balance of recipient token before trade to compare after trade.\\n        uint balanceBeforeTrade = balanceOf(recipientToken);\\n        if (recipientToken == ETH_TOKEN) {\\n            balanceBeforeTrade = balanceBeforeTrade.safeSub(msg.value);\\n        }\\n        require(address(this).balance >= ethAmount, errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        bytes memory result = Executor(executor).execute{value: ethAmount}(exchangeAddress, callData);\\n        (address returnedTokenAddress, uint returnedAmount) = abi.decode(result, (address, uint));\\n        require(returnedTokenAddress == recipientToken && balanceOf(recipientToken).safeSub(balanceBeforeTrade) == returnedAmount, errorToString(Errors.INVALID_RETURN_DATA));\\n        return returnedAmount;\\n    }\\n\\n    /**\\n     * @dev set regulator\\n     */\\n    function setRegulator(address _regulator) external {\\n        require((regulator == address(0x0) || msg.sender == regulator) && _regulator != address(0x0), errorToString(Errors.NOT_AUTHORISED));\\n        regulator = _regulator;\\n    }\\n\\n    /**\\n     * @dev verify regulator\\n     */\\n    function verifyRegulator(bytes32 txId, bytes memory signData) internal view {\\n        // verify regulator signs data\\n        address signer = sigToAddress(signData, keccak256(abi.encode(ShieldInfo(msg.sender, txId))));\\n        require(signer == regulator, errorToString(Errors.INVALID_SIGNATURE));\\n    }\\n\\n    /**\\n     * @dev verify sign data\\n     */\\n    function verifySignData(bytes memory data, bytes memory signData) internal returns(address){\\n        bytes32 hash = keccak256(data);\\n        require(!isSigDataUsed(hash), errorToString(Errors.ALREADY_USED));\\n        address verifier = sigToAddress(signData, hash);\\n        // reject when verifier equals zero\\n        require(verifier != address(0x0), errorToString(Errors.INVALID_SIGNATURE));\\n        // mark data hash of sig as used\\n        sigDataUsed[hash] = true;\\n\\n        return verifier;\\n    }\\n\\n    /**\\n      * @dev migrate balance from previous vault\\n      * Note: uncomment for next version\\n      */\\n    function migrateBalance(address owner, address token) internal {\\n        if (address(prevVault) != address(0x0) && !migration[owner][token]) {\\n            withdrawRequests[owner][token] = withdrawRequests[owner][token].safeAdd(prevVault.getDepositedBalance(token, owner));\\n            migration[owner][token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the amount of specific coin for specific wallet\\n     */\\n    function getDepositedBalance(\\n        address token,\\n        address owner\\n    ) public view returns (uint) {\\n        if (address(prevVault) != address(0x0) && !migration[owner][token]) {\\n            return withdrawRequests[owner][token].safeAdd(prevVault.getDepositedBalance(token, owner));\\n        }\\n        return withdrawRequests[owner][token];\\n    }\\n\\n    /**\\n     * @dev Move total number of assets to newVault\\n     * @notice This only works when the preVault is Paused\\n     * @notice This can only be called by preVault\\n     * @param assets: address of the ERC20 tokens to move, 0x0 for ETH\\n     * @param amounts: total number of the ERC20 tokens to move, 0x0 for ETH\\n     */\\n    function updateAssets(address[] calldata assets, uint[] calldata amounts) external onlyPreVault returns(bool) {\\n        require(assets.length == amounts.length,  errorToString(Errors.NOT_EQUAL));\\n        require(Withdrawable(prevVault).paused(), errorToString(Errors.PREVAULT_NOT_PAUSED));\\n        for (uint i = 0; i < assets.length; i++) {\\n            totalDepositedToSCAmount[assets[i]] = totalDepositedToSCAmount[assets[i]].safeAdd(amounts[i]);\\n        }\\n        emit UpdateTokenTotal(assets, amounts);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Payable receive function to receive Ether from oldVault when migrating\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() private pure returns (bool) {\\n        uint256 returnValue = 0;\\n        assembly {\\n        // check number of bytes returned from last function call\\n            switch returndatasize()\\n\\n            // no bytes returned: assume success\\n            case 0x0 {\\n                returnValue := 1\\n            }\\n\\n            // 32 bytes returned: check if non-zero\\n            case 0x20 {\\n            // copy 32 bytes into scratch space\\n                returndatacopy(0x0, 0x0, 0x20)\\n\\n            // load those bytes into returnValue\\n                returnValue := mload(0x0)\\n            }\\n\\n            // not sure what was returned: don't mark as success\\n            default { }\\n        }\\n        return returnValue != 0;\\n    }\\n\\n    /**\\n     * @dev convert enum to string value\\n     */\\n    function errorToString(Errors error) internal pure returns(string memory) {\\n        uint8 erroNum = uint8(error);\\n        uint maxlength = 10;\\n        bytes memory reversed = new bytes(maxlength);\\n        uint i = 0;\\n        while (erroNum != 0) {\\n            uint8 remainder = erroNum % 10;\\n            erroNum = erroNum / 10;\\n            reversed[i++] = byte(48 + remainder);\\n        }\\n        bytes memory s = new bytes(i + 1);\\n        for (uint j = 0; j <= i; j++) {\\n            s[j] = reversed[i - j];\\n        }\\n        return string(s);\\n    }\\n\\n    /**\\n     * @dev Get the decimals of an ERC20 token, return 0 if it isn't defined\\n     * We check the returndatasize to covert both cases that the token has\\n     * and doesn't have the function decimals()\\n     */\\n    function getDecimals(address token) public view returns (uint8) {\\n        require(Address.isContract(token), \\\"getDecimals non-contract\\\");\\n        IERC20 erc20 = IERC20(token);\\n        try erc20.decimals() returns (uint256 d) {\\n            return uint8(d);    \\n        } catch {\\n            revert(\\\"get ERC20 decimal failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the amount of coin deposited to this smartcontract\\n     */\\n    function balanceOf(address token) public view returns (uint) {\\n        if (token == ETH_TOKEN) {\\n            return address(this).balance;\\n        }\\n        require(Address.isContract(token), \\\"balanceOf non-contract\\\");\\n        try IERC20(token).balanceOf(address(this)) returns (uint256 b) {\\n            return b;\\n        } catch {\\n            revert(\\\"get ERC20 balance failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32d7b739a420dc5af625859ad63a442953a669f83ae64a19cce063435a85f327\",\"license\":\"MIT\"},\"contracts/vault_variants/vault_BSC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeMath, Counters, Incognito, Withdrawable } from \\\"../vault.sol\\\";\\nimport \\\"../trade_utils.sol\\\";\\n\\ncontract VaultBSC {\\n    using SafeMath for uint;\\n    using Counters for Counters.Counter;\\n    /**\\n     * @dev Storage slot with the incognito proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.incognito.\\\" subtracted by 1\\n     */\\n    bytes32 private constant _INCOGNITO_SLOT = 0x62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd2;\\n    address constant public ETH_TOKEN = 0x0000000000000000000000000000000000000000;\\n    /**\\n     * @dev Storage variables for Vault\\n     * This section is APPEND-ONLY, in order to preserve upgradeability\\n     * since we use Proxy Pattern\\n     */\\n    mapping(bytes32 => bool) public withdrawed;\\n    mapping(bytes32 => bool) public sigDataUsed;\\n    // address => token => amount\\n    mapping(address => mapping(address => uint)) public withdrawRequests;\\n    mapping(address => mapping(address => bool)) public migration;\\n    mapping(address => uint) public totalDepositedToSCAmount;\\n    Withdrawable public prevVault;\\n    bool public notEntered;\\n    bool public isInitialized;\\n    /**\\n    * @dev Added in Storage Layout version : 2.0\\n    */\\n    uint8 constant public CURRENT_NETWORK_ID = 2; // BSC\\n    uint8 constant public BURN_REQUEST_METADATA_TYPE = 253;\\n    uint8 constant public BURN_TO_CONTRACT_REQUEST_METADATA_TYPE = 152;\\n    uint8 constant public BURN_CALL_REQUEST_METADATA_TYPE = 158;\\n    Counters.Counter private idCounter;\\n\\n    address public regulator;\\n    uint256 public storageLayoutVersion;\\n    address public executor;\\n    /**\\n    * @dev END Storage variables version : 2.0\\n    */\\n\\n    /**\\n    * @dev END Storage variables\\n    */\\n\\n    struct BurnInstData {\\n        uint8 meta; // type of the instruction\\n        uint8 shard; // ID of the Incognito shard containing the instruction, must be 1\\n        address token; // ETH address of the token contract (0x0 for ETH)\\n        address payable to; // ETH address of the receiver of the token\\n        uint amount; // burned amount (on Incognito)\\n        bytes32 itx; // Incognito's burning tx\\n    }\\n\\n    struct RedepositOptions {\\n        address redepositToken;\\n        bytes redepositIncAddress;\\n        address payable withdrawAddress;\\n    }\\n\\n    struct ShieldInfo {\\n        address sender; // the guy shield request\\n        bytes32 tx; // txid which sent fund to core team's addresses\\n    }\\n\\n    enum Prefix {\\n        ETHEREUM_EXECUTE_SIGNATURE,\\n        ETHEREUM_REQUEST_WITHDRAW_SIGNATURE,\\n        BSC_EXECUTE_SIGNATURE,\\n        BSC_REQUEST_WITHDRAW_SIGNATURE,\\n        PLG_EXECUTE_SIGNATURE,\\n        PLG_REQUEST_WITHDRAW_SIGNATURE,\\n        FTM_EXECUTE_SIGNATURE,\\n        FTM_REQUEST_WITHDRAW_SIGNATURE\\n    }\\n\\n    // error code\\n    enum Errors {\\n        EMPTY,\\n        NO_REENTRANCE,\\n        MAX_UINT_REACHED,\\n        VALUE_OVER_FLOW,\\n        INTERNAL_TX_ERROR,\\n        ALREADY_USED, // 5\\n        INVALID_DATA,\\n        TOKEN_NOT_ENOUGH,\\n        WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH,\\n        INVALID_RETURN_DATA,\\n        NOT_EQUAL, // 10\\n        NULL_VALUE,\\n        ONLY_PREVAULT,\\n        PREVAULT_NOT_PAUSED,\\n        SAFEMATH_EXCEPTION,\\n        ALREADY_INITIALIZED, // 15\\n        INVALID_SIGNATURE,\\n        NOT_AUTHORISED,\\n        ALREADY_UPGRADED,\\n        INVALID_DATA_BURN_CALL_INST,\\n        ONLY_SELF_CALL\\n    }\\n\\n    event Deposit(address token, string incognitoAddress, uint amount);\\n    event Withdraw(address token, address to, uint amount);\\n    event UpdateTokenTotal(address[] assets, uint[] amounts);\\n    event UpdateIncognitoProxy(address newIncognitoProxy);\\n    event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx);\\n    event DepositV2(address token, string incognitoAddress, uint amount, uint256 depositID);\\n    event ExecuteFnLog(bytes32 id, uint256 phaseID, bytes errorData);\\n\\n    /**\\n     * modifier for contract version\\n     */\\n    modifier onlyPreVault(){\\n        require(address(prevVault) != address(0x0) && msg.sender == address(prevVault), errorToString(Errors.ONLY_PREVAULT));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, notEntered will be true\\n        require(notEntered, errorToString(Errors.NO_REENTRANCE));\\n\\n        // Any calls to nonReentrant after this point will fail\\n        notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Creates new Vault to hold assets for Incognito Chain\\n     * @param _prevVault: previous version of the Vault to refer back if necessary\\n     * @param _regulator: ...\\n     * @param _executor: helper contract to perform external call from\\n     * After migrating all assets to a new Vault, we still need to refer\\n     * back to previous Vault to make sure old withdrawals aren't being reused\\n     */\\n    function initialize(address _prevVault, address _regulator, address _executor) external {\\n        require(!isInitialized, errorToString(Errors.ALREADY_INITIALIZED));\\n        prevVault = Withdrawable(_prevVault);\\n        isInitialized = true;\\n        notEntered = true;\\n        require(regulator == address(0x0), errorToString(Errors.NOT_AUTHORISED));\\n        regulator = _regulator;\\n        executor = _executor;\\n        storageLayoutVersion = 2;\\n    }\\n\\n    /**\\n     * @dev upgrade helper for storage layout version 2\\n     * @param _regulator: ...\\n     * @param _executor: helper contract to perform external call from\\n     */\\n    function upgradeVaultStorage(address _regulator, address _executor) external {\\n        // storageLayoutVersion is a new variable introduced in this storage layout version, then set to 2 to match the storage layout version itself\\n        require(storageLayoutVersion == 0, errorToString(Errors.ALREADY_UPGRADED));\\n        // make sure the version increase can only happen once\\n        storageLayoutVersion = 2;\\n        require(regulator == address(0x0), errorToString(Errors.NOT_AUTHORISED));\\n        regulator = _regulator;\\n        executor = _executor;\\n    }\\n\\n    /**\\n     * @dev Returns the current incognito proxy.\\n     */\\n    function _incognito() internal view returns (address icg) {\\n        bytes32 slot = _INCOGNITO_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            icg := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes a ETH deposit to the vault to mint pETH over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @param incognitoAddress: Incognito Address to receive pETH\\n     * @param txId: move fund transaction hash\\n     * @param signData: regulator signature\\n     */\\n    function deposit(string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external payable nonReentrant {\\n        require(address(this).balance <= 10 ** 27, errorToString(Errors.MAX_UINT_REACHED));\\n        verifyRegulator(txId, signData);\\n\\n        emit Deposit(ETH_TOKEN, incognitoAddress, msg.value);\\n    }\\n\\n    /**\\n     * @dev Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @notice Before calling this function, enough ERC20 must be allowed to\\n     * tranfer from msg.sender to this contract\\n     * @param token: address of the ERC20 token\\n     * @param amount: to deposit to the vault and mint on Incognito Chain\\n     * @param incognitoAddress: Incognito Address to receive pERC20\\n     * @param txId: move fund transaction hash\\n     * @param signData: regulator signature\\n     */\\n    function depositERC20(address token, uint amount, string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external nonReentrant {\\n        verifyRegulator(txId, signData);\\n\\n        IERC20 erc20Interface = IERC20(token);\\n        uint8 decimals = getDecimals(address(token));\\n        uint tokenBalance = erc20Interface.balanceOf(address(this));\\n        uint beforeTransfer = tokenBalance;\\n        uint emitAmount = amount;\\n        if (decimals > 9) {\\n            emitAmount = emitAmount / (10 ** (uint(decimals) - 9));\\n            tokenBalance = tokenBalance / (10 ** (uint(decimals) - 9));\\n        }\\n        require(emitAmount <= 10 ** 18 && tokenBalance <= 10 ** 18 && emitAmount.safeAdd(tokenBalance) <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\\n        erc20Interface.transferFrom(msg.sender, address(this), amount);\\n        require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        require(balanceOf(token).safeSub(beforeTransfer) == amount, errorToString(Errors.NOT_EQUAL));\\n\\n        emit Deposit(token, incognitoAddress, emitAmount);\\n    }\\n\\n    /**\\n     * @dev Makes a ETH deposit to the vault to mint pETH over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @param incognitoAddress: Incognito Address to receive pETH\\n     */\\n    function deposit_V2(string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external payable nonReentrant {\\n        require(address(this).balance <= 10 ** 27, errorToString(Errors.MAX_UINT_REACHED));\\n        verifyRegulator(txId, signData);\\n        emit DepositV2(ETH_TOKEN, incognitoAddress, msg.value, idCounter.current());\\n        idCounter.increment();\\n    }\\n\\n    /**\\n     * @dev Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain\\n     * @notice This only works when the contract is not Paused\\n     * @notice The maximum amount to deposit is capped since Incognito balance is stored as uint64\\n     * @notice Before calling this function, enough ERC20 must be allowed to\\n     * tranfer from msg.sender to this contract\\n     * @param token: address of the ERC20 token\\n     * @param amount: to deposit to the vault and mint on Incognito Chain\\n     * @param incognitoAddress: Incognito Address to receive pERC20\\n     */\\n    function depositERC20_V2(address token, uint amount, string calldata incognitoAddress, bytes32 txId, bytes calldata signData) external nonReentrant {\\n        verifyRegulator(txId, signData);\\n        IERC20 erc20Interface = IERC20(token);\\n        uint8 decimals = getDecimals(address(token));\\n        uint tokenBalance = erc20Interface.balanceOf(address(this));\\n        uint beforeTransfer = tokenBalance;\\n        uint emitAmount = amount;\\n        if (decimals > 9) {\\n            emitAmount = emitAmount / (10 ** (uint(decimals) - 9));\\n            tokenBalance = tokenBalance / (10 ** (uint(decimals) - 9));\\n        }\\n        require(emitAmount <= 10 ** 18 && tokenBalance <= 10 ** 18 && emitAmount.safeAdd(tokenBalance) <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\\n        erc20Interface.transferFrom(msg.sender, address(this), amount);\\n        require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        require(balanceOf(token).safeSub(beforeTransfer) == amount, errorToString(Errors.NOT_EQUAL));\\n\\n        emit DepositV2(token, incognitoAddress, emitAmount, idCounter.current());\\n        idCounter.increment();\\n    }\\n\\n    /**\\n     * @dev Checks if a burn proof has been used before\\n     * @notice First, we check inside the storage of this contract itself. If the\\n     * hash has been used before, we return the result. Otherwise, we query\\n     * previous vault recursively until the first Vault (prevVault address is 0x0)\\n     * @param hash: of the burn proof\\n     * @return bool: whether the proof has been used or not\\n     */\\n    function isWithdrawed(bytes32 hash) public view returns(bool) {\\n        if (withdrawed[hash]) {\\n            return true;\\n        } else if (address(prevVault) == address(0)) {\\n            return false;\\n        }\\n        return prevVault.isWithdrawed(hash);\\n    }\\n\\n    /**\\n     * @dev Parses a burn instruction and returns the components\\n     * @param inst: the full instruction, containing both metadata and body\\n     */\\n    function parseBurnInst(bytes memory inst) public pure returns (BurnInstData memory) {\\n        BurnInstData memory data;\\n        data.meta = uint8(inst[0]);\\n        data.shard = uint8(inst[1]);\\n        address token;\\n        address payable to;\\n        uint amount;\\n        bytes32 itx;\\n        assembly {\\n        // skip first 0x20 bytes (stored length of inst)\\n            token := mload(add(inst, 0x22)) // [3:34]\\n            to := mload(add(inst, 0x42)) // [34:66]\\n            amount := mload(add(inst, 0x62)) // [66:98]\\n            itx := mload(add(inst, 0x82)) // [98:130]\\n        }\\n        data.token = token;\\n        data.to = to;\\n        data.amount = amount;\\n        data.itx = itx;\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Parses an extended burn instruction and returns the components\\n     * @param inst: the full instruction, containing both metadata and body\\n     */\\n    function parseCalldataFromBurnInst(bytes calldata inst) public pure returns (BurnInstData memory, RedepositOptions memory, bytes memory) {\\n        require(inst.length >= 296, errorToString(Errors.INVALID_DATA_BURN_CALL_INST));\\n        BurnInstData memory bdata;\\n        // layout: meta(1), shard(1), network(1), extToken(32), extCallAddr(32), amount(32), txID(32), recvToken(32), withdrawAddr(32), redepositAddr(101), extCalldata(*)\\n        {\\n            bdata.meta = uint8(inst[0]);\\n            bdata.shard = uint8(inst[1]);\\n            uint8 networkID = uint8(inst[2]);\\n            require(bdata.meta == BURN_CALL_REQUEST_METADATA_TYPE && bdata.shard == 1 && networkID == CURRENT_NETWORK_ID, errorToString(Errors.INVALID_DATA_BURN_CALL_INST));\\n        }\\n        RedepositOptions memory opt;\\n        {\\n            (bdata.token, bdata.to, bdata.amount, bdata.itx, opt.redepositToken, opt.withdrawAddress) = abi.decode(inst[3:195], (address, address, uint256, bytes32, address, address));\\n        }\\n    \\n        opt.redepositIncAddress = bytes(inst[195:296]);\\n        return (bdata, opt, bytes(inst[296:]));\\n    }\\n\\n    /**\\n     * @dev Verifies that a burn instruction is valid\\n     * @notice All params except inst are the list of 2 elements corresponding to\\n     * the proof on beacon and bridge\\n     * @notice All params are the same as in `withdraw`\\n     */\\n    function verifyInst(\\n        bytes memory inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) view internal {\\n        // Each instruction can only by redeemed once\\n        bytes32 beaconInstHash = keccak256(abi.encodePacked(inst, heights));\\n\\n        // Verify instruction on beacon\\n        require(Incognito(_incognito()).instructionApproved(\\n                true, // Only check instruction on beacon\\n                beaconInstHash,\\n                heights,\\n                instPaths,\\n                instPathIsLefts,\\n                instRoots,\\n                blkData,\\n                sigIdxs,\\n                sigVs,\\n                sigRs,\\n                sigSs\\n            ), errorToString(Errors.INVALID_DATA));\\n    }\\n\\n    /**\\n     * @dev Withdraws pETH/pIERC20 by providing a burn proof over at Incognito Chain\\n     * @notice This function takes a burn instruction on Incognito Chain, checks\\n     * for its validity and returns the token back to ETH chain\\n     * @notice This only works when the contract is not Paused\\n     * @param inst: the decoded instruction as a list of bytes\\n     * @param heights: the blocks containing the instruction\\n     * @param instPaths: merkle path of the instruction\\n     * @param instPathIsLefts: whether each node on the path is the left or right child\\n     * @param instRoots: root of the merkle tree contains all instructions\\n     * @param blkData: merkle has of the block body\\n     * @param sigIdxs: indices of the validators who signed this block\\n     * @param sigVs: part of the signatures of the validators\\n     * @param sigRs: part of the signatures of the validators\\n     * @param sigSs: part of the signatures of the validators\\n     */\\n    function withdraw(\\n        bytes memory inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) public nonReentrant {\\n        require(inst.length >= 130, errorToString(Errors.INVALID_DATA));\\n        BurnInstData memory data = parseBurnInst(inst);\\n        require(data.meta == BURN_REQUEST_METADATA_TYPE && data.shard == 1, errorToString(Errors.INVALID_DATA)); // Check instruction type\\n\\n        // Not withdrawed\\n        require(!isWithdrawed(data.itx), errorToString(Errors.ALREADY_USED));\\n        withdrawed[data.itx] = true;\\n\\n        // Check if balance is enough\\n        if (data.token == ETH_TOKEN) {\\n            require(address(this).balance >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        } else {\\n            uint8 decimals = getDecimals(data.token);\\n            if (decimals > 9) {\\n                data.amount = data.amount.safeMul(10 ** (uint(decimals) - 9));\\n            }\\n            require(IERC20(data.token).balanceOf(address(this)) >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        }\\n\\n        verifyInst(\\n            inst,\\n            heights,\\n            instPaths,\\n            instPathIsLefts,\\n            instRoots,\\n            blkData,\\n            sigIdxs,\\n            sigVs,\\n            sigRs,\\n            sigSs\\n        );\\n\\n        // Send and notify\\n        if (data.token == ETH_TOKEN) {\\n            (bool success, ) =  data.to.call{value: data.amount}(\\\"\\\");\\n            require(success, errorToString(Errors.INTERNAL_TX_ERROR));\\n        } else {\\n            IERC20(data.token).transfer(data.to, data.amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n        emit Withdraw(data.token, data.to, data.amount);\\n    }\\n\\n    function executeWithBurnProof(\\n        bytes calldata inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) external nonReentrant {\\n        (BurnInstData memory data, RedepositOptions memory rOptions, bytes memory externalCalldata) = parseCalldataFromBurnInst(inst); // parse function also does sanity checks\\n        require(!isWithdrawed(data.itx), errorToString(Errors.ALREADY_USED)); // check if txID has been used previously\\n        withdrawed[data.itx] = true;\\n        // check if vault balance is sufficient\\n        if (data.token == ETH_TOKEN) {\\n            require(address(this).balance >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        } else {\\n            uint8 decimals = getDecimals(data.token);\\n            if (decimals > 9) {\\n                data.amount = data.amount.safeMul(10 ** (uint(decimals) - 9));\\n            }\\n            require(IERC20(data.token).balanceOf(address(this)) >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        }\\n\\n        verifyInst(\\n            inst,\\n            heights,\\n            instPaths,\\n            instPathIsLefts,\\n            instRoots,\\n            blkData,\\n            sigIdxs,\\n            sigVs,\\n            sigRs,\\n            sigSs\\n        );\\n\\n\\n        // perform external msgcall\\n        try this._callExternal(data.token, data.to, data.amount, externalCalldata, rOptions.redepositToken) returns (uint256 returnedAmount) {\\n            if (rOptions.withdrawAddress == address(0)) {\\n                // after executing, one can redeposit to Incognito Chain\\n                _redeposit(rOptions.redepositToken, rOptions.redepositIncAddress, returnedAmount, data.itx);\\n            } else {\\n                // alternatively, the received funds can be withdrawn\\n                try this._transferExternal(rOptions.redepositToken, rOptions.withdrawAddress, returnedAmount) {\\n                    emit Withdraw(rOptions.redepositToken, rOptions.withdrawAddress, returnedAmount);\\n                } catch (bytes memory lowLevelData) {\\n                    // upon revert, emit Redeposit event\\n                    _redeposit(rOptions.redepositToken, rOptions.redepositIncAddress, returnedAmount, data.itx);\\n                    emit ExecuteFnLog(data.itx, 1, lowLevelData);\\n                    return;\\n                }\\n            }\\n        } catch (bytes memory lowLevelData) {\\n            _redeposit(data.token, rOptions.redepositIncAddress, data.amount, data.itx);\\n            emit ExecuteFnLog(data.itx, 0, lowLevelData);\\n            return;\\n        }\\n    }\\n\\n    function _redeposit(address token, bytes memory redepositIncAddress, uint256 amount, bytes32 itx) internal {\\n        uint emitAmount = amount;\\n        if (token == ETH_TOKEN) {\\n            require(address(this).balance <= 10 ** 27, errorToString(Errors.MAX_UINT_REACHED));\\n        } else {\\n            uint8 decimals = getDecimals(address(token));\\n            if (decimals > 9) {\\n                emitAmount = emitAmount / (10 ** (uint(decimals) - 9));\\n            }\\n            require(emitAmount <= 10 ** 18, errorToString(Errors.VALUE_OVER_FLOW));\\n        }\\n        emit Redeposit(token, redepositIncAddress, emitAmount, itx);\\n    }\\n\\n    function _transferExternal(address token, address payable to, uint256 amount) external onlySelf() {\\n        if (token == ETH_TOKEN) {\\n            Address.sendValue(to, amount);\\n        } else {\\n            IERC20(token).transfer(to, amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n    }\\n\\n    function _callExternal(address token, address to, uint256 amount, bytes memory externalCalldata, address redepositToken) external onlySelf() returns (uint256) {\\n        uint balanceBeforeTrade = balanceOf(redepositToken);\\n        bytes memory result;\\n        uint256 msgval = 0;\\n        if (token == ETH_TOKEN) {\\n            msgval = amount;\\n        } else {\\n            IERC20(token).transfer(executor, amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n        result = Executor(executor).execute{value: msgval}(to, externalCalldata);\\n        require(result.length == 64, errorToString(Errors.INVALID_RETURN_DATA));\\n        (address returnedTokenAddress, uint returnedAmount) = abi.decode(result, (address, uint));\\n        require(returnedTokenAddress == redepositToken && balanceOf(redepositToken).safeSub(balanceBeforeTrade) == returnedAmount, errorToString(Errors.INVALID_RETURN_DATA));\\n        return returnedAmount;\\n    }\\n\\n    modifier onlySelf() {\\n        require(address(this) == msg.sender, errorToString(Errors.ONLY_SELF_CALL));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Burnt Proof is submited to store burnt amount of p-token/p-ETH and receiver's address\\n     * Receiver then can call withdrawRequest to withdraw these token to he/she incognito address.\\n     * @notice This function takes a burn instruction on Incognito Chain, checks\\n     * for its validity and returns the token back to ETH chain\\n     * @notice This only works when the contract is not Paused\\n     * @param inst: the decoded instruction as a list of bytes\\n     * @param heights: the blocks containing the instruction\\n     * @param instPaths: merkle path of the instruction\\n     * @param instPathIsLefts: whether each node on the path is the left or right child\\n     * @param instRoots: root of the merkle tree contains all instructions\\n     * @param blkData: merkle has of the block body\\n     * @param sigIdxs: indices of the validators who signed this block\\n     * @param sigVs: part of the signatures of the validators\\n     * @param sigRs: part of the signatures of the validators\\n     * @param sigSs: part of the signatures of the validators\\n     */\\n    function submitBurnProof(\\n        bytes memory inst,\\n        uint heights,\\n        bytes32[] memory instPaths,\\n        bool[] memory instPathIsLefts,\\n        bytes32 instRoots,\\n        bytes32 blkData,\\n        uint[] memory sigIdxs,\\n        uint8[] memory sigVs,\\n        bytes32[] memory sigRs,\\n        bytes32[] memory sigSs\\n    ) public nonReentrant {\\n        require(inst.length >= 130, errorToString(Errors.INVALID_DATA));\\n        BurnInstData memory data = parseBurnInst(inst);\\n        require(data.meta == BURN_TO_CONTRACT_REQUEST_METADATA_TYPE && data.shard == 1, errorToString(Errors.INVALID_DATA)); // Check instruction type\\n\\n        // Not withdrawed\\n        require(!isWithdrawed(data.itx), errorToString(Errors.ALREADY_USED));\\n        withdrawed[data.itx] = true;\\n\\n        // Check if balance is enough\\n        if (data.token == ETH_TOKEN) {\\n            require(address(this).balance >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        } else {\\n            uint8 decimals = getDecimals(data.token);\\n            if (decimals > 9) {\\n                data.amount = data.amount.safeMul(10 ** (uint(decimals) - 9));\\n            }\\n            require(IERC20(data.token).balanceOf(address(this)) >= data.amount.safeAdd(totalDepositedToSCAmount[data.token]), errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        }\\n\\n        verifyInst(\\n            inst,\\n            heights,\\n            instPaths,\\n            instPathIsLefts,\\n            instRoots,\\n            blkData,\\n            sigIdxs,\\n            sigVs,\\n            sigRs,\\n            sigSs\\n        );\\n\\n        withdrawRequests[data.to][data.token] = withdrawRequests[data.to][data.token].safeAdd(data.amount);\\n        totalDepositedToSCAmount[data.token] = totalDepositedToSCAmount[data.token].safeAdd(data.amount);\\n    }\\n\\n    /**\\n     * @dev generate address from signature data and hash.\\n     */\\n    function sigToAddress(bytes memory signData, bytes32 hash) public pure returns (address) {\\n        bytes32 s;\\n        bytes32 r;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(signData, 0x20))\\n            s := mload(add(signData, 0x40))\\n        }\\n        v = uint8(signData[64]) + 27;\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Checks if a sig data has been used before\\n     * @notice First, we check inside the storage of this contract itself. If the\\n     * hash has been used before, we return the result. Otherwise, we query\\n     * previous vault recursively until the first Vault (prevVault address is 0x0)\\n     * @param hash: of the sig data\\n     * @return bool: whether the sig data has been used or not\\n     */\\n    function isSigDataUsed(bytes32 hash) public view returns(bool) {\\n        if (sigDataUsed[hash]) {\\n            return true;\\n        } else if (address(prevVault) == address(0)) {\\n            return false;\\n        }\\n        return prevVault.isSigDataUsed(hash);\\n    }\\n\\n    struct PreSignData {\\n        Prefix prefix;\\n        address token;\\n        bytes timestamp;\\n        uint amount;\\n    }\\n\\n    function newPreSignData(Prefix prefix, address token, bytes calldata timestamp, uint amount) pure internal returns (PreSignData memory) {\\n        PreSignData memory psd = PreSignData(prefix, token, timestamp, amount);\\n        return psd;\\n    }\\n\\n    /**\\n     * @dev User requests withdraw token contains in withdrawRequests.\\n     * Deposit event will be emitted to let incognito recognize and mint new p-tokens for the user.\\n     * @param incognitoAddress: incognito's address that will receive minted p-tokens.\\n     * @param token: ethereum's token address (eg., ETH, DAI, ...)\\n     * @param amount: amount of the token in ethereum's denomination\\n     * @param signData: signature of an unique data that is signed by an account which is generated from user's incognito privkey\\n     * @param timestamp: unique data generated from client (timestamp for example)\\n     * @param txId: move fund transaction hash\\n     * @param signData: regulator signature\\n     */\\n    function requestWithdraw(\\n        string calldata incognitoAddress,\\n        address token,\\n        uint amount,\\n        bytes calldata signData,\\n        bytes calldata timestamp,\\n        bytes32 txId,\\n        bytes calldata regulatorSig\\n    ) external nonReentrant {\\n        verifyRegulator(txId, regulatorSig);\\n        // verify owner signs data\\n        address verifier = verifySignData(abi.encode(newPreSignData(Prefix.BSC_REQUEST_WITHDRAW_SIGNATURE, token, timestamp, amount), incognitoAddress), signData);\\n\\n        // migrate from preVault\\n        migrateBalance(verifier, token);\\n\\n        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\\n        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\\n        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\\n\\n        // convert denomination from ethereum's to incognito's (pcoin)\\n        uint emitAmount = amount;\\n        if (token != ETH_TOKEN) {\\n            uint8 decimals = getDecimals(token);\\n            if (decimals > 9) {\\n                emitAmount = amount / (10 ** (uint(decimals) - 9));\\n            }\\n        }\\n\\n        emit Deposit(token, incognitoAddress, emitAmount);\\n    }\\n\\n    /**\\n     * @dev execute is a general function that plays a role as proxy to interact to other smart contracts.\\n     * @param token: ethereum's token address (eg., ETH, DAI, ...)\\n     * @param amount: amount of the token in ethereum's denomination\\n     * @param recipientToken: received token address.\\n     * @param exchangeAddress: address of targeting smart contract that actually executes the desired logics like trade, invest, borrow and so on.\\n     * @param callData: encoded with signature and params of function from targeting smart contract.\\n     * @param timestamp: unique data generated from client (timestamp for example)\\n     * @param signData: signature of an unique data that is signed by an account which is generated from user's incognito privkey\\n     */\\n    function execute(\\n        address token,\\n        uint amount,\\n        address recipientToken,\\n        address exchangeAddress,\\n        bytes calldata callData,\\n        bytes calldata timestamp,\\n        bytes calldata signData\\n    ) external payable nonReentrant {\\n        //verify ower signs data from input\\n        address verifier = verifySignData(abi.encode(newPreSignData(Prefix.BSC_EXECUTE_SIGNATURE, token, timestamp, amount), recipientToken, exchangeAddress, callData), signData);\\n\\n        // migrate from preVault\\n        migrateBalance(verifier, token);\\n        require(withdrawRequests[verifier][token] >= amount, errorToString(Errors.WITHDRAW_REQUEST_TOKEN_NOT_ENOUGH));\\n\\n        // update balance of verifier\\n        totalDepositedToSCAmount[token] = totalDepositedToSCAmount[token].safeSub(amount);\\n        withdrawRequests[verifier][token] = withdrawRequests[verifier][token].safeSub(amount);\\n\\n        // define number of eth spent for forwarder.\\n        uint ethAmount = msg.value;\\n        if (token == ETH_TOKEN) {\\n            ethAmount = ethAmount.safeAdd(amount);\\n        } else {\\n            // transfer token to exchangeAddress.\\n            require(IERC20(token).balanceOf(address(this)) >= amount, errorToString(Errors.TOKEN_NOT_ENOUGH));\\n            IERC20(token).transfer(executor, amount);\\n            require(checkSuccess(), errorToString(Errors.INTERNAL_TX_ERROR));\\n        }\\n        uint returnedAmount = callExtFunc(recipientToken, ethAmount, callData, exchangeAddress);\\n\\n        // update withdrawRequests\\n        withdrawRequests[verifier][recipientToken] = withdrawRequests[verifier][recipientToken].safeAdd(returnedAmount);\\n        totalDepositedToSCAmount[recipientToken] = totalDepositedToSCAmount[recipientToken].safeAdd(returnedAmount);\\n    }\\n\\n    /**\\n     * @dev single trade\\n     */\\n    function callExtFunc(address recipientToken, uint ethAmount, bytes memory callData, address exchangeAddress) internal returns (uint) {\\n        // get balance of recipient token before trade to compare after trade.\\n        uint balanceBeforeTrade = balanceOf(recipientToken);\\n        if (recipientToken == ETH_TOKEN) {\\n            balanceBeforeTrade = balanceBeforeTrade.safeSub(msg.value);\\n        }\\n        require(address(this).balance >= ethAmount, errorToString(Errors.TOKEN_NOT_ENOUGH));\\n        bytes memory result = Executor(executor).execute{value: ethAmount}(exchangeAddress, callData);\\n        (address returnedTokenAddress, uint returnedAmount) = abi.decode(result, (address, uint));\\n        require(returnedTokenAddress == recipientToken && balanceOf(recipientToken).safeSub(balanceBeforeTrade) == returnedAmount, errorToString(Errors.INVALID_RETURN_DATA));\\n        return returnedAmount;\\n    }\\n\\n    /**\\n     * @dev set regulator\\n     */\\n    function setRegulator(address _regulator) external {\\n        require((regulator == address(0x0) || msg.sender == regulator) && _regulator != address(0x0), errorToString(Errors.NOT_AUTHORISED));\\n        regulator = _regulator;\\n    }\\n\\n    /**\\n     * @dev verify regulator\\n     */\\n    function verifyRegulator(bytes32 txId, bytes memory signData) internal view {\\n        // verify regulator signs data\\n        address signer = sigToAddress(signData, keccak256(abi.encode(ShieldInfo(msg.sender, txId))));\\n        require(signer == regulator, errorToString(Errors.INVALID_SIGNATURE));\\n    }\\n\\n    /**\\n     * @dev verify sign data\\n     */\\n    function verifySignData(bytes memory data, bytes memory signData) internal returns(address){\\n        bytes32 hash = keccak256(data);\\n        require(!isSigDataUsed(hash), errorToString(Errors.ALREADY_USED));\\n        address verifier = sigToAddress(signData, hash);\\n        // reject when verifier equals zero\\n        require(verifier != address(0x0), errorToString(Errors.INVALID_SIGNATURE));\\n        // mark data hash of sig as used\\n        sigDataUsed[hash] = true;\\n\\n        return verifier;\\n    }\\n\\n    /**\\n      * @dev migrate balance from previous vault\\n      * Note: uncomment for next version\\n      */\\n    function migrateBalance(address owner, address token) internal {\\n        if (address(prevVault) != address(0x0) && !migration[owner][token]) {\\n            withdrawRequests[owner][token] = withdrawRequests[owner][token].safeAdd(prevVault.getDepositedBalance(token, owner));\\n            migration[owner][token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the amount of specific coin for specific wallet\\n     */\\n    function getDepositedBalance(\\n        address token,\\n        address owner\\n    ) public view returns (uint) {\\n        if (address(prevVault) != address(0x0) && !migration[owner][token]) {\\n            return withdrawRequests[owner][token].safeAdd(prevVault.getDepositedBalance(token, owner));\\n        }\\n        return withdrawRequests[owner][token];\\n    }\\n\\n    /**\\n     * @dev Move total number of assets to newVault\\n     * @notice This only works when the preVault is Paused\\n     * @notice This can only be called by preVault\\n     * @param assets: address of the ERC20 tokens to move, 0x0 for ETH\\n     * @param amounts: total number of the ERC20 tokens to move, 0x0 for ETH\\n     */\\n    function updateAssets(address[] calldata assets, uint[] calldata amounts) external onlyPreVault returns(bool) {\\n        require(assets.length == amounts.length,  errorToString(Errors.NOT_EQUAL));\\n        require(Withdrawable(prevVault).paused(), errorToString(Errors.PREVAULT_NOT_PAUSED));\\n        for (uint i = 0; i < assets.length; i++) {\\n            totalDepositedToSCAmount[assets[i]] = totalDepositedToSCAmount[assets[i]].safeAdd(amounts[i]);\\n        }\\n        emit UpdateTokenTotal(assets, amounts);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Payable receive function to receive Ether from oldVault when migrating\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() private pure returns (bool) {\\n        uint256 returnValue = 0;\\n        assembly {\\n        // check number of bytes returned from last function call\\n            switch returndatasize()\\n\\n            // no bytes returned: assume success\\n            case 0x0 {\\n                returnValue := 1\\n            }\\n\\n            // 32 bytes returned: check if non-zero\\n            case 0x20 {\\n            // copy 32 bytes into scratch space\\n                returndatacopy(0x0, 0x0, 0x20)\\n\\n            // load those bytes into returnValue\\n                returnValue := mload(0x0)\\n            }\\n\\n            // not sure what was returned: don't mark as success\\n            default { }\\n        }\\n        return returnValue != 0;\\n    }\\n\\n    /**\\n     * @dev convert enum to string value\\n     */\\n    function errorToString(Errors error) internal pure returns(string memory) {\\n        uint8 erroNum = uint8(error);\\n        uint maxlength = 10;\\n        bytes memory reversed = new bytes(maxlength);\\n        uint i = 0;\\n        while (erroNum != 0) {\\n            uint8 remainder = erroNum % 10;\\n            erroNum = erroNum / 10;\\n            reversed[i++] = byte(48 + remainder);\\n        }\\n        bytes memory s = new bytes(i + 1);\\n        for (uint j = 0; j <= i; j++) {\\n            s[j] = reversed[i - j];\\n        }\\n        return string(s);\\n    }\\n\\n    /**\\n     * @dev Get the decimals of an ERC20 token, return 0 if it isn't defined\\n     * We check the returndatasize to covert both cases that the token has\\n     * and doesn't have the function decimals()\\n     */\\n    function getDecimals(address token) public view returns (uint8) {\\n        require(Address.isContract(token), \\\"getDecimals non-contract\\\");\\n        IERC20 erc20 = IERC20(token);\\n        try erc20.decimals() returns (uint256 d) {\\n            return uint8(d);    \\n        } catch {\\n            revert(\\\"get ERC20 decimal failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the amount of coin deposited to this smartcontract\\n     */\\n    function balanceOf(address token) public view returns (uint) {\\n        if (token == ETH_TOKEN) {\\n            return address(this).balance;\\n        }\\n        require(Address.isContract(token), \\\"balanceOf non-contract\\\");\\n        try IERC20(token).balanceOf(address(this)) returns (uint256 b) {\\n            return b;\\n        } catch {\\n            revert(\\\"get ERC20 balance failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0305bc0cea6e0c82c71c66f71a3cbfb0dec017a80672d2aeeecc47529471b068\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506150ef806100206000396000f3fe6080604052600436106102a45760003560e01c8063995fac111161016e578063cde0a4f8116100cb578063dd8fee141161007f578063f75b98ce11610064578063f75b98ce146106f6578063fa84702e14610716578063fee8efda1461072b576102ab565b8063dd8fee14146106c1578063e4bd7074146106d6576102ab565b8063d6a1fe3b116100b0578063d6a1fe3b14610677578063d7200eb11461068c578063dca40d9e146106a1576102ab565b8063cde0a4f814610637578063cf54aaa014610657576102ab565b8063bd835c4211610122578063c0c53b8b11610107578063c0c53b8b146105ef578063c34c08e51461060f578063c791d70514610624576102ab565b8063bd835c42146105ba578063bda9b509146105cf576102ab565b8063a73b153211610153578063a73b15321461055a578063a807b5bb1461057a578063b8237dbb1461059a576102ab565b8063995fac1114610525578063a3f5d8cc14610545576102ab565b80636304541c1161021c57806373bf9651116101d05780637e16e6e1116101b55780637e16e6e1146104d257806384b3ac03146104ff5780638588ccd614610512576102ab565b806373bf965114610492578063749c5f86146104b2576102ab565b806366945b311161020157806366945b311461042e5780636f2cbc481461045d57806370a0823114610472576102ab565b80636304541c146103e157806365b5a00f1461040e576102ab565b8063392e53cd116102735780633fec6b40116102585780633fec6b401461037d578063568c04fd146103aa57806358bc8337146103cc576102ab565b8063392e53cd146103485780633ed1b3761461035d576102ab565b8063145e2a6b146102b05780631beb7de2146102d25780631ea1940e146102f25780631ed4276d14610328576102ab565b366102ab57005b600080fd5b3480156102bc57600080fd5b506102d06102cb36600461404b565b61074b565b005b3480156102de57600080fd5b506102d06102ed3660046145cd565b610834565b3480156102fe57600080fd5b5061031261030d366004614345565b610c91565b60405161031f9190614c3a565b60405180910390f35b34801561033457600080fd5b506103126103433660046142c0565b610ca6565b34801561035457600080fd5b50610312610ec7565b34801561036957600080fd5b506102d061037836600461439d565b610ed7565b34801561038957600080fd5b5061039d61039836600461458a565b611437565b60405161031f9190614a2f565b3480156103b657600080fd5b506103bf6114c6565b60405161031f9190614fc6565b3480156103d857600080fd5b5061039d6114cb565b3480156103ed57600080fd5b506104016103fc366004613f54565b6114d0565b60405161031f9190614cf2565b34801561041a57600080fd5b50610401610429366004614013565b6114e2565b34801561043a57600080fd5b5061044e61044936600461435d565b6114ff565b60405161031f93929190614ec9565b34801561046957600080fd5b506103bf6116e2565b34801561047e57600080fd5b5061040161048d366004613f54565b6116e7565b34801561049e57600080fd5b506102d06104ad3660046145cd565b6117bb565b3480156104be57600080fd5b506103126104cd366004614345565b611b33565b3480156104de57600080fd5b506104f26104ed3660046144dc565b611c03565b60405161031f9190614ebb565b6102d061050d3660046147e7565b611c85565b6102d0610520366004614154565b611dae565b34801561053157600080fd5b50610312610540366004614013565b61224d565b34801561055157600080fd5b5061031261226d565b34801561056657600080fd5b506102d0610575366004614013565b61227d565b34801561058657600080fd5b506102d061059536600461422d565b612320565b3480156105a657600080fd5b506102d06105b536600461422d565b6125ff565b3480156105c657600080fd5b506103bf6128ed565b3480156105db57600080fd5b506104016105ea3660046140d5565b6128f2565b3480156105fb57600080fd5b506102d061060a36600461408b565b612b16565b34801561061b57600080fd5b5061039d612c20565b6102d06106323660046147e7565b612c2f565b34801561064357600080fd5b506102d0610652366004613f54565b612d43565b34801561066357600080fd5b506103bf610672366004613f54565b612dd1565b34801561068357600080fd5b50610401612e8b565b34801561069857600080fd5b506103bf612e91565b3480156106ad57600080fd5b506103126106bc366004614345565b612e96565b3480156106cd57600080fd5b5061039d612eab565b3480156106e257600080fd5b506103126106f1366004614345565b612eba565b34801561070257600080fd5b50610401610711366004614013565b612f3a565b34801561072257600080fd5b5061039d613066565b34801561073757600080fd5b506102d06107463660046146ff565b613075565b30331461075860146132e1565b9061077f5760405162461bcd60e51b81526004016107769190614d38565b60405180910390fd5b506001600160a01b03831661079d57610798828261343b565b61082f565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906107cb9085908590600401614a67565b600060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506108056134d7565b61080f60046132e1565b9061082d5760405162461bcd60e51b81526004016107769190614d38565b505b505050565b600554600160a01b900460ff1661084b60016132e1565b906108695760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b1916905589516082111561088760066132e1565b906108a55760405162461bcd60e51b81526004016107769190614d38565b506108ae613c8a565b6108b78b611c03565b805190915060ff1660fd1480156108d55750806020015160ff166001145b6108df60066132e1565b906108fd5760405162461bcd60e51b81526004016107769190614d38565b5061090b8160a00151611b33565b1561091660056132e1565b906109345760405162461bcd60e51b81526004016107769190614d38565b5060a081015160009081526020819052604090819020805460ff191660011790558101516001600160a01b03166109bf576040808201516001600160a01b0316600090815260046020522054608082015161098e9161350b565b47101561099b60076132e1565b906109b95760405162461bcd60e51b81526004016107769190614d38565b50610ad1565b60006109ce8260400151612dd1565b905060098160ff1611156109fb5760808201516109f59060081960ff841601600a0a613571565b60808301525b6040808301516001600160a01b03166000908152600460205220546080830151610a249161350b565b82604001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a549190614a2f565b60206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa4919061485e565b1015610ab060076132e1565b90610ace5760405162461bcd60e51b81526004016107769190614d38565b50505b610ae38b8b8b8b8b8b8b8b8b8b6135d3565b60408101516001600160a01b0316610b8c57600081606001516001600160a01b03168260800151604051610b1690614a2c565b60006040518083038185875af1925050503d8060008114610b53576040519150601f19603f3d011682016040523d82523d6000602084013e610b58565b606091505b5050905080610b6760046132e1565b90610b855760405162461bcd60e51b81526004016107769190614d38565b5050610c2a565b80604001516001600160a01b031663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610bc6929190614a67565b600060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b50505050610c006134d7565b610c0a60046132e1565b90610c285760405162461bcd60e51b81526004016107769190614d38565b505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610c6993929190614a43565b60405180910390a150506005805460ff60a01b1916600160a01b179055505050505050505050565b60016020526000908152604090205460ff1681565b6005546000906001600160a01b031615801590610ccd57506005546001600160a01b031633145b610cd7600c6132e1565b90610cf55760405162461bcd60e51b81526004016107769190614d38565b50838214610d03600a6132e1565b90610d215760405162461bcd60e51b81526004016107769190614d38565b50600560009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da89190614329565b610db2600d6132e1565b90610dd05760405162461bcd60e51b81526004016107769190614d38565b5060005b84811015610e7e57610e37848483818110610deb57fe5b9050602002013560046000898986818110610e0257fe5b9050602002016020810190610e179190613f54565b6001600160a01b031681526020810191909152604001600020549061350b565b60046000888885818110610e4757fe5b9050602002016020810190610e5c9190613f54565b6001600160a01b03168152602081019190915260400160002055600101610dd4565b507f6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f85858585604051610eb49493929190614ba2565b60405180910390a1506001949350505050565b600554600160a81b900460ff1681565b600554600160a01b900460ff16610eee60016132e1565b90610f0c5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055610f22613c8a565b610f2a613cbf565b6060610f368e8e6114ff565b925092509250610f498360a00151611b33565b15610f5460056132e1565b90610f725760405162461bcd60e51b81526004016107769190614d38565b5060a083015160009081526020819052604090819020805460ff191660011790558301516001600160a01b0316610ffd576040808401516001600160a01b03166000908152600460205220546080840151610fcc9161350b565b471015610fd960076132e1565b90610ff75760405162461bcd60e51b81526004016107769190614d38565b5061110f565b600061100c8460400151612dd1565b905060098160ff1611156110395760808401516110339060081960ff841601600a0a613571565b60808501525b6040808501516001600160a01b031660009081526004602052205460808501516110629161350b565b84604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110929190614a2f565b60206040518083038186803b1580156110aa57600080fd5b505afa1580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e2919061485e565b10156110ee60076132e1565b9061110c5760405162461bcd60e51b81526004016107769190614d38565b50505b6111658e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8d8d6135d3565b60408084015160608501516080860151855193517fbda9b509000000000000000000000000000000000000000000000000000000008152309463bda9b509946111b8949093909290918891600401614a9a565b602060405180830381600087803b1580156111d257600080fd5b505af1925050508015611202575060408051601f3d908101601f191682019092526111ff9181019061485e565b60015b61129b573d808015611230576040519150601f19603f3d011682016040523d82523d6000602084013e611235565b606091505b506112528460400151846020015186608001518760a001516136ce565b7fdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d4168460a0015160008360405161128a93929190614cfb565b60405180910390a150505050611417565b60408301516001600160a01b03166112ca576112c583600001518460200151838760a001516136ce565b611412565b825160408085015190517f145e2a6b000000000000000000000000000000000000000000000000000000008152309263145e2a6b9261130d928690600401614a43565b600060405180830381600087803b15801561132757600080fd5b505af1925050508015611338575060015b6113ce573d808015611366576040519150601f19603f3d011682016040523d82523d6000602084013e61136b565b606091505b5061138484600001518560200151848860a001516136ce565b7fdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d4168560a001516001836040516113bc93929190614cfb565b60405180910390a15050505050611417565b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836000015184604001518360405161140993929190614a43565b60405180910390a15b505050505b50506005805460ff60a01b1916600160a01b179055505050505050505050565b60008060008060208601519150604086015192508560408151811061145857fe5b602001015160f81c60f81b60f81c601b0190506001858284866040516000815260200160405260405161148e9493929190614d1a565b6020604051602081039080840390855afa1580156114b0573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60fd81565b600081565b60046020526000908152604090205481565b600260209081526000928352604080842090915290825290205481565b611507613c8a565b61150f613cbf565b606061012884101561152160136132e1565b9061153f5760405162461bcd60e51b81526004016107769190614d38565b50611548613c8a565b8585600081811061155557fe5b919091013560f81c8252508585600181811061156d57fe5b919091013560f81c60208301525060008686600281811061158a57fe5b845192013560f81c92505060ff16609e1480156115ae5750816020015160ff166001145b80156115bd575060ff81166002145b6115c760136132e1565b906115e55760405162461bcd60e51b81526004016107769190614d38565b50506115ef613cbf565b6115fd60c36003888a61503f565b81019061160a9190613f77565b6001600160a01b03908116604088810191909152918116875260a08801929092526080870192909252918216606086015291169083015261165061012860c3888a61503f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506020820152818161169988610128818c61503f565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250969e959d50919b50939950505050505050505050565b609881565b60006001600160a01b0382166116fe5750476117b6565b611707826137c4565b6117235760405162461bcd60e51b815260040161077690614e16565b6040516370a0823160e01b81526001600160a01b038316906370a082319061174f903090600401614a2f565b60206040518083038186803b15801561176757600080fd5b505afa925050508015611797575060408051601f3d908101601f191682019092526117949181019061485e565b60015b6117b35760405162461bcd60e51b815260040161077690614e84565b90505b919050565b600554600160a01b900460ff166117d260016132e1565b906117f05760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b1916905589516082111561180e60066132e1565b9061182c5760405162461bcd60e51b81526004016107769190614d38565b50611835613c8a565b61183e8b611c03565b805190915060ff16609814801561185c5750806020015160ff166001145b61186660066132e1565b906118845760405162461bcd60e51b81526004016107769190614d38565b506118928160a00151611b33565b1561189d60056132e1565b906118bb5760405162461bcd60e51b81526004016107769190614d38565b5060a081015160009081526020819052604090819020805460ff191660011790558101516001600160a01b0316611946576040808201516001600160a01b031660009081526004602052205460808201516119159161350b565b47101561192260076132e1565b906119405760405162461bcd60e51b81526004016107769190614d38565b50611a58565b60006119558260400151612dd1565b905060098160ff16111561198257608082015161197c9060081960ff841601600a0a613571565b60808301525b6040808301516001600160a01b031660009081526004602052205460808301516119ab9161350b565b82604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016119db9190614a2f565b60206040518083038186803b1580156119f357600080fd5b505afa158015611a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2b919061485e565b1015611a3760076132e1565b90611a555760405162461bcd60e51b81526004016107769190614d38565b50505b611a6a8b8b8b8b8b8b8b8b8b8b6135d3565b608081015160608201516001600160a01b0390811660009081526002602090815260408083208187015190941683529290522054611aa79161350b565b60608201516001600160a01b03908116600090815260026020908152604080832081870180518616855290835281842095909555608086015194519093168252600490522054611af69161350b565b6040918201516001600160a01b031660009081526004602052919091205550506005805460ff60a01b1916600160a01b1790555050505050505050565b60008181526020819052604081205460ff1615611b52575060016117b6565b6005546001600160a01b0316611b6a575060006117b6565b6005546040517f749c5f860000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063749c5f8690611bb3908590600401614cf2565b60206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b39190614329565b611c0b613c8a565b611c13613c8a565b82600081518110611c2057fe5b016020015160f81c8152825183906001908110611c3957fe5b0160209081015160f81c9082015260228301516042840151606285015160828601516001600160a01b039384166040860152929091166060840152608083015260a08201529050919050565b600554600160a01b900460ff16611c9c60016132e1565b90611cba5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b191690556b033b2e3c9fd0803ce8000000471115611ce260026132e1565b90611d005760405162461bcd60e51b81526004016107769190614d38565b50611d418383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137ca92505050565b7fd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab38516000868634611d716006613837565b604051611d82959493929190614b6b565b60405180910390a1611d94600661383b565b50506005805460ff60a01b1916600160a01b179055505050565b600554600160a01b900460ff16611dc560016132e1565b90611de35760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b191690556000611e60611e0460028d88888f613844565b8a8a8a8a604051602001611e1c959493929190614f37565b60408051601f198184030181526020601f8701819004810284018101909252858352919086908690819084018382808284376000920191909152506138ca92505050565b9050611e6c818c61396e565b6001600160a01b038082166000908152600260209081526040808320938f16835292905220548a1115611e9f60086132e1565b90611ebd5760405162461bcd60e51b81526004016107769190614d38565b506001600160a01b038b16600090815260046020526040902054611ee1908b613ab0565b6001600160a01b03808d1660008181526004602090815260408083209590955592851681526002835283812091815291522054611f1e908b613ab0565b60026000836001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002081905550600034905060006001600160a01b03168c6001600160a01b03161415611f9b57611f94818c61350b565b90506120dc565b6040516370a0823160e01b81528b906001600160a01b038e16906370a0823190611fc9903090600401614a2f565b60206040518083038186803b158015611fe157600080fd5b505afa158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612019919061485e565b101561202560076132e1565b906120435760405162461bcd60e51b81526004016107769190614d38565b5060095460405163a9059cbb60e01b81526001600160a01b038e81169263a9059cbb9261207892909116908f90600401614a67565b600060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b505050506120b26134d7565b6120bc60046132e1565b906120da5760405162461bcd60e51b81526004016107769190614d38565b505b600061212e8b838b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d613b06565b905061218b8160026000866001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000205461350b90919063ffffffff16565b60026000856001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000208190555061220f81600460008e6001600160a01b03166001600160a01b031681526020019081526020016000205461350b90919063ffffffff16565b6001600160a01b03909b1660009081526004602052604090209a909a5550506005805460ff60a01b1916600160a01b17905550505050505050505050565b600360209081526000928352604080842090915290825290205460ff1681565b600554600160a01b900460ff1681565b6008541561228b60126132e1565b906122a95760405162461bcd60e51b81526004016107769190614d38565b5060026008556007546001600160a01b0316156122c660116132e1565b906122e45760405162461bcd60e51b81526004016107769190614d38565b50600780546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560098054929093169116179055565b600554600160a01b900460ff1661233760016132e1565b906123555760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526123a39185919085908590819084018382808284376000920191909152506137ca92505050565b8660006123af82612dd1565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016123df9190614a2f565b60206040518083038186803b1580156123f757600080fd5b505afa15801561240b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242f919061485e565b90508089600960ff8516111561246a5760098460ff1603600a0a818161245157fe5b04905060098460ff1603600a0a838161246657fe5b0492505b670de0b6b3a7640000811115801561248a5750670de0b6b3a76400008311155b80156124a75750670de0b6b3a76400006124a4828561350b565b11155b6124b160036132e1565b906124cf5760405162461bcd60e51b81526004016107769190614d38565b50846001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b815260040161250093929190614a43565b600060405180830381600087803b15801561251a57600080fd5b505af115801561252e573d6000803e3d6000fd5b5050505061253a6134d7565b61254460046132e1565b906125625760405162461bcd60e51b81526004016107769190614d38565b508a612577836125718f6116e7565b90613ab0565b14612582600a6132e1565b906125a05760405162461bcd60e51b81526004016107769190614d38565b507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8c8b8b846040516125d69493929190614b37565b60405180910390a150506005805460ff60a01b1916600160a01b17905550505050505050505050565b600554600160a01b900460ff1661261660016132e1565b906126345760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526126829185919085908590819084018382808284376000920191909152506137ca92505050565b86600061268e82612dd1565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016126be9190614a2f565b60206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e919061485e565b90508089600960ff851611156127495760098460ff1603600a0a818161273057fe5b04905060098460ff1603600a0a838161274557fe5b0492505b670de0b6b3a764000081111580156127695750670de0b6b3a76400008311155b80156127865750670de0b6b3a7640000612783828561350b565b11155b61279060036132e1565b906127ae5760405162461bcd60e51b81526004016107769190614d38565b50846001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b81526004016127df93929190614a43565b600060405180830381600087803b1580156127f957600080fd5b505af115801561280d573d6000803e3d6000fd5b505050506128196134d7565b61282360046132e1565b906128415760405162461bcd60e51b81526004016107769190614d38565b508a612850836125718f6116e7565b1461285b600a6132e1565b906128795760405162461bcd60e51b81526004016107769190614d38565b507fd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab38518c8b8b846128a96006613837565b6040516128ba959493929190614b6b565b60405180910390a16128cc600661383b565b50506005805460ff60a01b1916600160a01b17905550505050505050505050565b609e81565b600030331461290160146132e1565b9061291f5760405162461bcd60e51b81526004016107769190614d38565b50600061292b836116e7565b9050606060006001600160a01b0389166129465750856129de565b60095460405163a9059cbb60e01b81526001600160a01b038b81169263a9059cbb9261297a92909116908b90600401614a67565b600060405180830381600087803b15801561299457600080fd5b505af11580156129a8573d6000803e3d6000fd5b505050506129b46134d7565b6129be60046132e1565b906129dc5760405162461bcd60e51b81526004016107769190614d38565b505b600954604051631cff79cd60e01b81526001600160a01b0390911690631cff79cd908390612a12908c908b90600401614ae0565b6000604051808303818588803b158015612a2b57600080fd5b505af1158015612a3f573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612a689190810190614517565b91508151604014612a7960096132e1565b90612a975760405162461bcd60e51b81526004016107769190614d38565b5060008083806020019051810190612aaf9190613fe6565b91509150866001600160a01b0316826001600160a01b0316148015612adf575080612add866125718a6116e7565b145b612ae960096132e1565b90612b075760405162461bcd60e51b81526004016107769190614d38565b509a9950505050505050505050565b600554600160a81b900460ff1615612b2e600f6132e1565b90612b4c5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b197fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff6001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff199094169390931716600160a81b1716600160a01b179091556007541615612bc060116132e1565b90612bde5760405162461bcd60e51b81526004016107769190614d38565b50600780546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560098054929093169116179055506002600855565b6009546001600160a01b031681565b600554600160a01b900460ff16612c4660016132e1565b90612c645760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b191690556b033b2e3c9fd0803ce8000000471115612c8c60026132e1565b90612caa5760405162461bcd60e51b81526004016107769190614d38565b50612ceb8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137ca92505050565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e6000868634604051612d219493929190614b37565b60405180910390a150506005805460ff60a01b1916600160a01b179055505050565b6007546001600160a01b03161580612d6557506007546001600160a01b031633145b8015612d7957506001600160a01b03811615155b612d8360116132e1565b90612da15760405162461bcd60e51b81526004016107769190614d38565b506007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000612ddc826137c4565b612df85760405162461bcd60e51b815260040161077690614e4d565b6000829050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3657600080fd5b505afa925050508015612e66575060408051601f3d908101601f19168201909252612e639181019061485e565b60015b612e825760405162461bcd60e51b815260040161077690614d4b565b91506117b69050565b60085481565b600281565b60006020819052908152604090205460ff1681565b6007546001600160a01b031681565b60008181526001602052604081205460ff1615612ed9575060016117b6565b6005546001600160a01b0316612ef1575060006117b6565b6005546040517fe4bd70740000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e4bd707490611bb3908590600401614cf2565b6005546000906001600160a01b031615801590612f7d57506001600160a01b0380831660009081526003602090815260408083209387168352929052205460ff16155b1561303957600554604051637badcc6760e11b8152613032916001600160a01b03169063f75b98ce90612fb69087908790600401614a80565b60206040518083038186803b158015612fce57600080fd5b505afa158015612fe2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613006919061485e565b6001600160a01b038085166000908152600260209081526040808320938916835292905220549061350b565b90506114c0565b506001600160a01b0380821660009081526002602090815260408083209386168352929052205492915050565b6005546001600160a01b031681565b600554600160a01b900460ff1661308c60016132e1565b906130aa5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526130f89185919085908590819084018382808284376000920191909152506137ca92505050565b600061316361310b60038c89898e613844565b8d8d60405160200161311f93929190614f80565b60408051601f198184030181526020601f8c018190048102840181019092528a835291908b908b90819084018382808284376000920191909152506138ca92505050565b905061316f818b61396e565b6001600160a01b038082166000908152600260209081526040808320938e16835292905220548911156131a260086132e1565b906131c05760405162461bcd60e51b81526004016107769190614d38565b506001600160a01b038082166000908152600260209081526040808320938e16835292905220546131f1908a613ab0565b6001600160a01b038083166000908152600260209081526040808320938f16835292815282822093909355600490925290205461322e908a613ab0565b6001600160a01b038b1660008181526004602052604090209190915589901561328257600061325c8c612dd1565b905060098160ff1611156132805760098160ff1603600a0a8b8161327c57fe5b0491505b505b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8b8e8e846040516132b79493929190614b37565b60405180910390a150506005805460ff60a01b1916600160a01b1790555050505050505050505050565b606060008260148111156132f157fe5b60408051600a808252818301909252919250906060908260208201818036833701905050905060005b60ff841615613380578151600a60ff959095168581049560018401939106916030830160f81b918591811061334b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505061331a565b60608160010167ffffffffffffffff8111801561339c57600080fd5b506040519080825280601f01601f1916602001820160405280156133c7576020820181803683370190505b50905060005b8281116134305783818403815181106133e257fe5b602001015160f81c60f81b8282815181106133f957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016133cd565b509695505050505050565b8047101561345b5760405162461bcd60e51b815260040161077690614ddf565b6000826001600160a01b03168260405161347490614a2c565b60006040518083038185875af1925050503d80600081146134b1576040519150601f19603f3d011682016040523d82523d6000602084013e6134b6565b606091505b505090508061082f5760405162461bcd60e51b815260040161077690614d82565b6000803d80156134ee57602081146134f757613503565b60019150613503565b60206000803e60005191505b501515905090565b60008282018381108015906135205750828110155b6040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906135695760405162461bcd60e51b81526004016107769190614d38565b509392505050565b600082820283158061352057508284828161358857fe5b04146040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906135695760405162461bcd60e51b81526004016107769190614d38565b60008a8a6040516020016135e8929190614a0a565b604051602081830303815290604052805190602001209050613608613c65565b6001600160a01b031663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016136489b9a99989796959493929190614c45565b60206040518083038186803b15801561366057600080fd5b505afa158015613674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136989190614329565b6136a260066132e1565b906136c05760405162461bcd60e51b81526004016107769190614d38565b505050505050505050505050565b816001600160a01b03851661371b576b033b2e3c9fd0803ce80000004711156136f760026132e1565b906137155760405162461bcd60e51b81526004016107769190614d38565b50613781565b600061372686612dd1565b905060098160ff16111561374a5760098160ff1603600a0a828161374657fe5b0491505b670de0b6b3a764000082111561376060036132e1565b9061377e5760405162461bcd60e51b81526004016107769190614d38565b50505b7eb45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d858583856040516137b59493929190614b02565b60405180910390a15050505050565b3b151590565b6000613819826040518060400160405280336001600160a01b03168152602001868152506040516020016137fe9190614fa6565b60405160208183030381529060405280519060200120611437565b6007549091506001600160a01b0380831691161461080f60106132e1565b5490565b80546001019055565b61384c613cf2565b613854613cf2565b604051806080016040528088600781111561386b57fe5b8152602001876001600160a01b0316815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200184905291505095945050505050565b815160208301206000906138dd81612eba565b156138e860056132e1565b906139065760405162461bcd60e51b81526004016107769190614d38565b5060006139138483611437565b90506001600160a01b038116151561392b60106132e1565b906139495760405162461bcd60e51b81526004016107769190614d38565b506000918252600160208190526040909220805460ff19169092179091559392505050565b6005546001600160a01b0316158015906139ae57506001600160a01b0380831660009081526003602090815260408083209385168352929052205460ff16155b15613aac57600554604051637badcc6760e11b8152613a63916001600160a01b03169063f75b98ce906139e79085908790600401614a80565b60206040518083038186803b1580156139ff57600080fd5b505afa158015613a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a37919061485e565b6001600160a01b038085166000908152600260209081526040808320938716835292905220549061350b565b6001600160a01b038084166000818152600260209081526040808320948716808452948252808320959095559181526003825283812092815291905220805460ff191660011790555b5050565b6000828211156040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b81525090613aff5760405162461bcd60e51b81526004016107769190614d38565b5050900390565b600080613b12866116e7565b90506001600160a01b038616613b2f57613b2c8134613ab0565b90505b84471015613b3d60076132e1565b90613b5b5760405162461bcd60e51b81526004016107769190614d38565b50600954604051631cff79cd60e01b81526060916001600160a01b031690631cff79cd908890613b919088908a90600401614ae0565b6000604051808303818588803b158015613baa57600080fd5b505af1158015613bbe573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052613be79190810190614517565b905060008082806020019051810190613c009190613fe6565b91509150886001600160a01b0316826001600160a01b0316148015613c30575080613c2e856125718c6116e7565b145b613c3a60096132e1565b90613c585760405162461bcd60e51b81526004016107769190614d38565b5098975050505050505050565b7f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd25490565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604051806060016040528060006001600160a01b031681526020016060815260200160006001600160a01b031681525090565b6040805160808101909152806000815260200160006001600160a01b0316815260200160608152602001600081525090565b80356114c081615093565b60008083601f840112613d40578182fd5b50813567ffffffffffffffff811115613d57578182fd5b6020830191508360208083028501011115613d7157600080fd5b9250929050565b600082601f830112613d88578081fd5b8135613d9b613d9682614ffb565b614fd4565b818152915060208083019084810181840286018201871015613dbc57600080fd5b60005b84811015613de4578135613dd2816150ab565b84529282019290820190600101613dbf565b505050505092915050565b600082601f830112613dff578081fd5b8135613e0d613d9682614ffb565b818152915060208083019084810181840286018201871015613e2e57600080fd5b60005b84811015613de457813584529282019290820190600101613e31565b600082601f830112613e5d578081fd5b8135613e6b613d9682614ffb565b818152915060208083019084810181840286018201871015613e8c57600080fd5b6000805b85811015613eba57823560ff81168114613ea8578283fd5b85529383019391830191600101613e90565b50505050505092915050565b60008083601f840112613ed7578182fd5b50813567ffffffffffffffff811115613eee578182fd5b602083019150836020828501011115613d7157600080fd5b600082601f830112613f16578081fd5b8135613f24613d968261501b565b9150808252836020828501011115613f3b57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613f65578081fd5b8135613f7081615093565b9392505050565b60008060008060008060c08789031215613f8f578182fd5b8635613f9a81615093565b95506020870135613faa81615093565b945060408701359350606087013592506080870135613fc881615093565b915060a0870135613fd881615093565b809150509295509295509295565b60008060408385031215613ff8578182fd5b825161400381615093565b6020939093015192949293505050565b60008060408385031215614025578182fd5b823561403081615093565b9150602083013561404081615093565b809150509250929050565b60008060006060848603121561405f578081fd5b833561406a81615093565b9250602084013561407a81615093565b929592945050506040919091013590565b60008060006060848603121561409f578081fd5b83356140aa81615093565b925060208401356140ba81615093565b915060408401356140ca81615093565b809150509250925092565b600080600080600060a086880312156140ec578283fd5b85356140f781615093565b9450602086013561410781615093565b935060408601359250606086013567ffffffffffffffff811115614129578182fd5b61413588828901613f06565b925050608086013561414681615093565b809150509295509295909350565b60008060008060008060008060008060e08b8d031215614172578788fd5b8a3561417d81615093565b995060208b0135985060408b013561419481615093565b97506141a38c60608d01613d24565b965060808b013567ffffffffffffffff808211156141bf578586fd5b6141cb8e838f01613ec6565b909850965060a08d01359150808211156141e3578586fd5b6141ef8e838f01613ec6565b909650945060c08d0135915080821115614207578384fd5b506142148d828e01613ec6565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060a0888a031215614247578081fd5b873561425281615093565b965060208801359550604088013567ffffffffffffffff80821115614275578283fd5b6142818b838c01613ec6565b909750955060608a0135945060808a01359150808211156142a0578283fd5b506142ad8a828b01613ec6565b989b979a50959850939692959293505050565b600080600080604085870312156142d5578182fd5b843567ffffffffffffffff808211156142ec578384fd5b6142f888838901613d2f565b90965094506020870135915080821115614310578384fd5b5061431d87828801613d2f565b95989497509550505050565b60006020828403121561433a578081fd5b8151613f70816150ab565b600060208284031215614356578081fd5b5035919050565b6000806020838503121561436f578182fd5b823567ffffffffffffffff811115614385578283fd5b61439185828601613ec6565b90969095509350505050565b60008060008060008060008060008060006101408c8e0312156143be578485fd5b67ffffffffffffffff808d3511156143d4578586fd5b6143e18e8e358f01613ec6565b909c509a5060208d0135995060408d01358110156143fd578586fd5b61440d8e60408f01358f01613def565b98508060608e0135111561441f578586fd5b61442f8e60608f01358f01613d78565b975060808d0135965060a08d013595508060c08e0135111561444f578182fd5b61445f8e60c08f01358f01613def565b94508060e08e01351115614471578182fd5b6144818e60e08f01358f01613e4d565b9350806101008e01351115614494578182fd5b6144a58e6101008f01358f01613def565b9250806101208e013511156144b8578182fd5b506144ca8d6101208e01358e01613def565b90509295989b509295989b9093969950565b6000602082840312156144ed578081fd5b813567ffffffffffffffff811115614503578182fd5b61450f84828501613f06565b949350505050565b600060208284031215614528578081fd5b815167ffffffffffffffff81111561453e578182fd5b8201601f8101841361454e578182fd5b805161455c613d968261501b565b818152856020838501011115614570578384fd5b614581826020830160208601615067565b95945050505050565b6000806040838503121561459c578182fd5b823567ffffffffffffffff8111156145b2578283fd5b6145be85828601613f06565b95602094909401359450505050565b6000806000806000806000806000806101408b8d0312156145ec578384fd5b8a3567ffffffffffffffff80821115614603578586fd5b61460f8e838f01613f06565b9b5060208d01359a5060408d013591508082111561462b578586fd5b6146378e838f01613def565b995060608d013591508082111561464c578586fd5b6146588e838f01613d78565b985060808d0135975060a08d0135965060c08d013591508082111561467b578586fd5b6146878e838f01613def565b955060e08d013591508082111561469c578485fd5b6146a88e838f01613e4d565b94506101008d01359150808211156146be578384fd5b6146ca8e838f01613def565b93506101208d01359150808211156146e0578283fd5b506146ed8d828e01613def565b9150509295989b9194979a5092959850565b600080600080600080600080600080600060e08c8e03121561471f578485fd5b67ffffffffffffffff808d351115614735578586fd5b6147428e8e358f01613ec6565b909c509a506147548e60208f01613d24565b995060408d013598508060608e0135111561476d578586fd5b61477d8e60608f01358f01613ec6565b909850965060808d0135811015614792578586fd5b6147a28e60808f01358f01613ec6565b909650945060a08d0135935060c08d01358110156147be578182fd5b506147cf8d60c08e01358e01613ec6565b81935080925050509295989b509295989b9093969950565b6000806000806000606086880312156147fe578283fd5b853567ffffffffffffffff80821115614815578485fd5b61482189838a01613ec6565b9097509550602088013594506040880135915080821115614840578283fd5b5061484d88828901613ec6565b969995985093965092949392505050565b60006020828403121561486f578081fd5b5051919050565b6000815180845260208085019450808401835b838110156148a7578151151587529582019590820190600101614889565b509495945050505050565b6000815180845260208085019450808401835b838110156148a7578151875295820195908201906001016148c5565b6000815180845260208085019450808401835b838110156148a757815160ff16875295820195908201906001016148f4565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452614955816020860160208601615067565b601f01601f19169290920160200192915050565b60ff815116825260ff602082015116602083015260408101516001600160a01b03808216604085015280606084015116606085015250506080810151608083015260a081015160a08301525050565b60008151600881106149c657fe5b808452506001600160a01b0360208301511660208401526040820151608060408501526149f6608085018261493d565b606093840151949093019390935250919050565b60008351614a1c818460208801615067565b9190910191825250602001919050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b038088168352808716602084015285604084015260a06060840152614acb60a084018661493d565b91508084166080840152509695505050505050565b60006001600160a01b03841682526040602083015261450f604083018461493d565b60006001600160a01b038616825260806020830152614b24608083018661493d565b6040830194909452506060015292915050565b60006001600160a01b038616825260606020830152614b5a606083018587614913565b905082604083015295945050505050565b60006001600160a01b038716825260806020830152614b8e608083018688614913565b604083019490945250606001529392505050565b6040808252810184905260008560608301825b87811015614be55760208335614bca81615093565b6001600160a01b031683529283019290910190600101614bb5565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115614c1d578283fd5b602085029150818660208301370160200190815295945050505050565b901515815260200190565b60006101608d151583528c60208401528b6040840152806060840152614c6d8184018c6148b2565b90508281036080840152614c81818b614876565b90508860a08401528760c084015282810360e0840152614ca181886148b2565b9050828103610100840152614cb681876148e1565b9050828103610120840152614ccb81866148b2565b9050828103610140840152614ce081856148b2565b9e9d5050505050505050505050505050565b90815260200190565b600084825283602083015260606040830152614581606083018461493d565b93845260ff9290921660208401526040830152606082015260800190565b600060208252613f70602083018461493d565b60208082526018908201527f67657420455243323020646563696d616c206661696c65640000000000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526016908201527f62616c616e63654f66206e6f6e2d636f6e747261637400000000000000000000604082015260600190565b60208082526018908201527f676574446563696d616c73206e6f6e2d636f6e74726163740000000000000000604082015260600190565b60208082526018908201527f6765742045524332302062616c616e6365206661696c65640000000000000000604082015260600190565b60c081016114c08284614969565b6000610100614ed88387614969565b8060c08401526001600160a01b038086511682850152602086015191506060610120850152614f0b61016085018361493d565b9150806040870151166101408501525082810360e0840152614f2d818561493d565b9695505050505050565b600060808252614f4a60808301886149b8565b6001600160a01b038781166020850152861660408401528281036060840152614f74818587614913565b98975050505050505050565b600060408252614f9360408301866149b8565b8281036020840152614f2d818587614913565b81516001600160a01b031681526020918201519181019190915260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715614ff357600080fd5b604052919050565b600067ffffffffffffffff821115615011578081fd5b5060209081020190565b600067ffffffffffffffff821115615031578081fd5b50601f01601f191660200190565b6000808585111561504e578182fd5b8386111561505a578182fd5b5050820193919092039150565b60005b8381101561508257818101518382015260200161506a565b8381111561082d5750506000910152565b6001600160a01b03811681146150a857600080fd5b50565b80151581146150a857600080fdfea26469706673582212204bf4e00c9cc3ccc671ec6675530ad385d6e8002e9ad7dc8d8b7a283c9a83497264736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102a45760003560e01c8063995fac111161016e578063cde0a4f8116100cb578063dd8fee141161007f578063f75b98ce11610064578063f75b98ce146106f6578063fa84702e14610716578063fee8efda1461072b576102ab565b8063dd8fee14146106c1578063e4bd7074146106d6576102ab565b8063d6a1fe3b116100b0578063d6a1fe3b14610677578063d7200eb11461068c578063dca40d9e146106a1576102ab565b8063cde0a4f814610637578063cf54aaa014610657576102ab565b8063bd835c4211610122578063c0c53b8b11610107578063c0c53b8b146105ef578063c34c08e51461060f578063c791d70514610624576102ab565b8063bd835c42146105ba578063bda9b509146105cf576102ab565b8063a73b153211610153578063a73b15321461055a578063a807b5bb1461057a578063b8237dbb1461059a576102ab565b8063995fac1114610525578063a3f5d8cc14610545576102ab565b80636304541c1161021c57806373bf9651116101d05780637e16e6e1116101b55780637e16e6e1146104d257806384b3ac03146104ff5780638588ccd614610512576102ab565b806373bf965114610492578063749c5f86146104b2576102ab565b806366945b311161020157806366945b311461042e5780636f2cbc481461045d57806370a0823114610472576102ab565b80636304541c146103e157806365b5a00f1461040e576102ab565b8063392e53cd116102735780633fec6b40116102585780633fec6b401461037d578063568c04fd146103aa57806358bc8337146103cc576102ab565b8063392e53cd146103485780633ed1b3761461035d576102ab565b8063145e2a6b146102b05780631beb7de2146102d25780631ea1940e146102f25780631ed4276d14610328576102ab565b366102ab57005b600080fd5b3480156102bc57600080fd5b506102d06102cb36600461404b565b61074b565b005b3480156102de57600080fd5b506102d06102ed3660046145cd565b610834565b3480156102fe57600080fd5b5061031261030d366004614345565b610c91565b60405161031f9190614c3a565b60405180910390f35b34801561033457600080fd5b506103126103433660046142c0565b610ca6565b34801561035457600080fd5b50610312610ec7565b34801561036957600080fd5b506102d061037836600461439d565b610ed7565b34801561038957600080fd5b5061039d61039836600461458a565b611437565b60405161031f9190614a2f565b3480156103b657600080fd5b506103bf6114c6565b60405161031f9190614fc6565b3480156103d857600080fd5b5061039d6114cb565b3480156103ed57600080fd5b506104016103fc366004613f54565b6114d0565b60405161031f9190614cf2565b34801561041a57600080fd5b50610401610429366004614013565b6114e2565b34801561043a57600080fd5b5061044e61044936600461435d565b6114ff565b60405161031f93929190614ec9565b34801561046957600080fd5b506103bf6116e2565b34801561047e57600080fd5b5061040161048d366004613f54565b6116e7565b34801561049e57600080fd5b506102d06104ad3660046145cd565b6117bb565b3480156104be57600080fd5b506103126104cd366004614345565b611b33565b3480156104de57600080fd5b506104f26104ed3660046144dc565b611c03565b60405161031f9190614ebb565b6102d061050d3660046147e7565b611c85565b6102d0610520366004614154565b611dae565b34801561053157600080fd5b50610312610540366004614013565b61224d565b34801561055157600080fd5b5061031261226d565b34801561056657600080fd5b506102d0610575366004614013565b61227d565b34801561058657600080fd5b506102d061059536600461422d565b612320565b3480156105a657600080fd5b506102d06105b536600461422d565b6125ff565b3480156105c657600080fd5b506103bf6128ed565b3480156105db57600080fd5b506104016105ea3660046140d5565b6128f2565b3480156105fb57600080fd5b506102d061060a36600461408b565b612b16565b34801561061b57600080fd5b5061039d612c20565b6102d06106323660046147e7565b612c2f565b34801561064357600080fd5b506102d0610652366004613f54565b612d43565b34801561066357600080fd5b506103bf610672366004613f54565b612dd1565b34801561068357600080fd5b50610401612e8b565b34801561069857600080fd5b506103bf612e91565b3480156106ad57600080fd5b506103126106bc366004614345565b612e96565b3480156106cd57600080fd5b5061039d612eab565b3480156106e257600080fd5b506103126106f1366004614345565b612eba565b34801561070257600080fd5b50610401610711366004614013565b612f3a565b34801561072257600080fd5b5061039d613066565b34801561073757600080fd5b506102d06107463660046146ff565b613075565b30331461075860146132e1565b9061077f5760405162461bcd60e51b81526004016107769190614d38565b60405180910390fd5b506001600160a01b03831661079d57610798828261343b565b61082f565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906107cb9085908590600401614a67565b600060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506108056134d7565b61080f60046132e1565b9061082d5760405162461bcd60e51b81526004016107769190614d38565b505b505050565b600554600160a01b900460ff1661084b60016132e1565b906108695760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b1916905589516082111561088760066132e1565b906108a55760405162461bcd60e51b81526004016107769190614d38565b506108ae613c8a565b6108b78b611c03565b805190915060ff1660fd1480156108d55750806020015160ff166001145b6108df60066132e1565b906108fd5760405162461bcd60e51b81526004016107769190614d38565b5061090b8160a00151611b33565b1561091660056132e1565b906109345760405162461bcd60e51b81526004016107769190614d38565b5060a081015160009081526020819052604090819020805460ff191660011790558101516001600160a01b03166109bf576040808201516001600160a01b0316600090815260046020522054608082015161098e9161350b565b47101561099b60076132e1565b906109b95760405162461bcd60e51b81526004016107769190614d38565b50610ad1565b60006109ce8260400151612dd1565b905060098160ff1611156109fb5760808201516109f59060081960ff841601600a0a613571565b60808301525b6040808301516001600160a01b03166000908152600460205220546080830151610a249161350b565b82604001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a549190614a2f565b60206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa4919061485e565b1015610ab060076132e1565b90610ace5760405162461bcd60e51b81526004016107769190614d38565b50505b610ae38b8b8b8b8b8b8b8b8b8b6135d3565b60408101516001600160a01b0316610b8c57600081606001516001600160a01b03168260800151604051610b1690614a2c565b60006040518083038185875af1925050503d8060008114610b53576040519150601f19603f3d011682016040523d82523d6000602084013e610b58565b606091505b5050905080610b6760046132e1565b90610b855760405162461bcd60e51b81526004016107769190614d38565b5050610c2a565b80604001516001600160a01b031663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610bc6929190614a67565b600060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b50505050610c006134d7565b610c0a60046132e1565b90610c285760405162461bcd60e51b81526004016107769190614d38565b505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610c6993929190614a43565b60405180910390a150506005805460ff60a01b1916600160a01b179055505050505050505050565b60016020526000908152604090205460ff1681565b6005546000906001600160a01b031615801590610ccd57506005546001600160a01b031633145b610cd7600c6132e1565b90610cf55760405162461bcd60e51b81526004016107769190614d38565b50838214610d03600a6132e1565b90610d215760405162461bcd60e51b81526004016107769190614d38565b50600560009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da89190614329565b610db2600d6132e1565b90610dd05760405162461bcd60e51b81526004016107769190614d38565b5060005b84811015610e7e57610e37848483818110610deb57fe5b9050602002013560046000898986818110610e0257fe5b9050602002016020810190610e179190613f54565b6001600160a01b031681526020810191909152604001600020549061350b565b60046000888885818110610e4757fe5b9050602002016020810190610e5c9190613f54565b6001600160a01b03168152602081019190915260400160002055600101610dd4565b507f6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f85858585604051610eb49493929190614ba2565b60405180910390a1506001949350505050565b600554600160a81b900460ff1681565b600554600160a01b900460ff16610eee60016132e1565b90610f0c5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055610f22613c8a565b610f2a613cbf565b6060610f368e8e6114ff565b925092509250610f498360a00151611b33565b15610f5460056132e1565b90610f725760405162461bcd60e51b81526004016107769190614d38565b5060a083015160009081526020819052604090819020805460ff191660011790558301516001600160a01b0316610ffd576040808401516001600160a01b03166000908152600460205220546080840151610fcc9161350b565b471015610fd960076132e1565b90610ff75760405162461bcd60e51b81526004016107769190614d38565b5061110f565b600061100c8460400151612dd1565b905060098160ff1611156110395760808401516110339060081960ff841601600a0a613571565b60808501525b6040808501516001600160a01b031660009081526004602052205460808501516110629161350b565b84604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110929190614a2f565b60206040518083038186803b1580156110aa57600080fd5b505afa1580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e2919061485e565b10156110ee60076132e1565b9061110c5760405162461bcd60e51b81526004016107769190614d38565b50505b6111658e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8d8d6135d3565b60408084015160608501516080860151855193517fbda9b509000000000000000000000000000000000000000000000000000000008152309463bda9b509946111b8949093909290918891600401614a9a565b602060405180830381600087803b1580156111d257600080fd5b505af1925050508015611202575060408051601f3d908101601f191682019092526111ff9181019061485e565b60015b61129b573d808015611230576040519150601f19603f3d011682016040523d82523d6000602084013e611235565b606091505b506112528460400151846020015186608001518760a001516136ce565b7fdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d4168460a0015160008360405161128a93929190614cfb565b60405180910390a150505050611417565b60408301516001600160a01b03166112ca576112c583600001518460200151838760a001516136ce565b611412565b825160408085015190517f145e2a6b000000000000000000000000000000000000000000000000000000008152309263145e2a6b9261130d928690600401614a43565b600060405180830381600087803b15801561132757600080fd5b505af1925050508015611338575060015b6113ce573d808015611366576040519150601f19603f3d011682016040523d82523d6000602084013e61136b565b606091505b5061138484600001518560200151848860a001516136ce565b7fdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d4168560a001516001836040516113bc93929190614cfb565b60405180910390a15050505050611417565b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836000015184604001518360405161140993929190614a43565b60405180910390a15b505050505b50506005805460ff60a01b1916600160a01b179055505050505050505050565b60008060008060208601519150604086015192508560408151811061145857fe5b602001015160f81c60f81b60f81c601b0190506001858284866040516000815260200160405260405161148e9493929190614d1a565b6020604051602081039080840390855afa1580156114b0573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60fd81565b600081565b60046020526000908152604090205481565b600260209081526000928352604080842090915290825290205481565b611507613c8a565b61150f613cbf565b606061012884101561152160136132e1565b9061153f5760405162461bcd60e51b81526004016107769190614d38565b50611548613c8a565b8585600081811061155557fe5b919091013560f81c8252508585600181811061156d57fe5b919091013560f81c60208301525060008686600281811061158a57fe5b845192013560f81c92505060ff16609e1480156115ae5750816020015160ff166001145b80156115bd575060ff81166002145b6115c760136132e1565b906115e55760405162461bcd60e51b81526004016107769190614d38565b50506115ef613cbf565b6115fd60c36003888a61503f565b81019061160a9190613f77565b6001600160a01b03908116604088810191909152918116875260a08801929092526080870192909252918216606086015291169083015261165061012860c3888a61503f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506020820152818161169988610128818c61503f565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250969e959d50919b50939950505050505050505050565b609881565b60006001600160a01b0382166116fe5750476117b6565b611707826137c4565b6117235760405162461bcd60e51b815260040161077690614e16565b6040516370a0823160e01b81526001600160a01b038316906370a082319061174f903090600401614a2f565b60206040518083038186803b15801561176757600080fd5b505afa925050508015611797575060408051601f3d908101601f191682019092526117949181019061485e565b60015b6117b35760405162461bcd60e51b815260040161077690614e84565b90505b919050565b600554600160a01b900460ff166117d260016132e1565b906117f05760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b1916905589516082111561180e60066132e1565b9061182c5760405162461bcd60e51b81526004016107769190614d38565b50611835613c8a565b61183e8b611c03565b805190915060ff16609814801561185c5750806020015160ff166001145b61186660066132e1565b906118845760405162461bcd60e51b81526004016107769190614d38565b506118928160a00151611b33565b1561189d60056132e1565b906118bb5760405162461bcd60e51b81526004016107769190614d38565b5060a081015160009081526020819052604090819020805460ff191660011790558101516001600160a01b0316611946576040808201516001600160a01b031660009081526004602052205460808201516119159161350b565b47101561192260076132e1565b906119405760405162461bcd60e51b81526004016107769190614d38565b50611a58565b60006119558260400151612dd1565b905060098160ff16111561198257608082015161197c9060081960ff841601600a0a613571565b60808301525b6040808301516001600160a01b031660009081526004602052205460808301516119ab9161350b565b82604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016119db9190614a2f565b60206040518083038186803b1580156119f357600080fd5b505afa158015611a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2b919061485e565b1015611a3760076132e1565b90611a555760405162461bcd60e51b81526004016107769190614d38565b50505b611a6a8b8b8b8b8b8b8b8b8b8b6135d3565b608081015160608201516001600160a01b0390811660009081526002602090815260408083208187015190941683529290522054611aa79161350b565b60608201516001600160a01b03908116600090815260026020908152604080832081870180518616855290835281842095909555608086015194519093168252600490522054611af69161350b565b6040918201516001600160a01b031660009081526004602052919091205550506005805460ff60a01b1916600160a01b1790555050505050505050565b60008181526020819052604081205460ff1615611b52575060016117b6565b6005546001600160a01b0316611b6a575060006117b6565b6005546040517f749c5f860000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063749c5f8690611bb3908590600401614cf2565b60206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b39190614329565b611c0b613c8a565b611c13613c8a565b82600081518110611c2057fe5b016020015160f81c8152825183906001908110611c3957fe5b0160209081015160f81c9082015260228301516042840151606285015160828601516001600160a01b039384166040860152929091166060840152608083015260a08201529050919050565b600554600160a01b900460ff16611c9c60016132e1565b90611cba5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b191690556b033b2e3c9fd0803ce8000000471115611ce260026132e1565b90611d005760405162461bcd60e51b81526004016107769190614d38565b50611d418383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137ca92505050565b7fd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab38516000868634611d716006613837565b604051611d82959493929190614b6b565b60405180910390a1611d94600661383b565b50506005805460ff60a01b1916600160a01b179055505050565b600554600160a01b900460ff16611dc560016132e1565b90611de35760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b191690556000611e60611e0460028d88888f613844565b8a8a8a8a604051602001611e1c959493929190614f37565b60408051601f198184030181526020601f8701819004810284018101909252858352919086908690819084018382808284376000920191909152506138ca92505050565b9050611e6c818c61396e565b6001600160a01b038082166000908152600260209081526040808320938f16835292905220548a1115611e9f60086132e1565b90611ebd5760405162461bcd60e51b81526004016107769190614d38565b506001600160a01b038b16600090815260046020526040902054611ee1908b613ab0565b6001600160a01b03808d1660008181526004602090815260408083209590955592851681526002835283812091815291522054611f1e908b613ab0565b60026000836001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002081905550600034905060006001600160a01b03168c6001600160a01b03161415611f9b57611f94818c61350b565b90506120dc565b6040516370a0823160e01b81528b906001600160a01b038e16906370a0823190611fc9903090600401614a2f565b60206040518083038186803b158015611fe157600080fd5b505afa158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612019919061485e565b101561202560076132e1565b906120435760405162461bcd60e51b81526004016107769190614d38565b5060095460405163a9059cbb60e01b81526001600160a01b038e81169263a9059cbb9261207892909116908f90600401614a67565b600060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b505050506120b26134d7565b6120bc60046132e1565b906120da5760405162461bcd60e51b81526004016107769190614d38565b505b600061212e8b838b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d613b06565b905061218b8160026000866001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000205461350b90919063ffffffff16565b60026000856001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000208190555061220f81600460008e6001600160a01b03166001600160a01b031681526020019081526020016000205461350b90919063ffffffff16565b6001600160a01b03909b1660009081526004602052604090209a909a5550506005805460ff60a01b1916600160a01b17905550505050505050505050565b600360209081526000928352604080842090915290825290205460ff1681565b600554600160a01b900460ff1681565b6008541561228b60126132e1565b906122a95760405162461bcd60e51b81526004016107769190614d38565b5060026008556007546001600160a01b0316156122c660116132e1565b906122e45760405162461bcd60e51b81526004016107769190614d38565b50600780546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560098054929093169116179055565b600554600160a01b900460ff1661233760016132e1565b906123555760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526123a39185919085908590819084018382808284376000920191909152506137ca92505050565b8660006123af82612dd1565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016123df9190614a2f565b60206040518083038186803b1580156123f757600080fd5b505afa15801561240b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242f919061485e565b90508089600960ff8516111561246a5760098460ff1603600a0a818161245157fe5b04905060098460ff1603600a0a838161246657fe5b0492505b670de0b6b3a7640000811115801561248a5750670de0b6b3a76400008311155b80156124a75750670de0b6b3a76400006124a4828561350b565b11155b6124b160036132e1565b906124cf5760405162461bcd60e51b81526004016107769190614d38565b50846001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b815260040161250093929190614a43565b600060405180830381600087803b15801561251a57600080fd5b505af115801561252e573d6000803e3d6000fd5b5050505061253a6134d7565b61254460046132e1565b906125625760405162461bcd60e51b81526004016107769190614d38565b508a612577836125718f6116e7565b90613ab0565b14612582600a6132e1565b906125a05760405162461bcd60e51b81526004016107769190614d38565b507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8c8b8b846040516125d69493929190614b37565b60405180910390a150506005805460ff60a01b1916600160a01b17905550505050505050505050565b600554600160a01b900460ff1661261660016132e1565b906126345760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526126829185919085908590819084018382808284376000920191909152506137ca92505050565b86600061268e82612dd1565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016126be9190614a2f565b60206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e919061485e565b90508089600960ff851611156127495760098460ff1603600a0a818161273057fe5b04905060098460ff1603600a0a838161274557fe5b0492505b670de0b6b3a764000081111580156127695750670de0b6b3a76400008311155b80156127865750670de0b6b3a7640000612783828561350b565b11155b61279060036132e1565b906127ae5760405162461bcd60e51b81526004016107769190614d38565b50846001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b81526004016127df93929190614a43565b600060405180830381600087803b1580156127f957600080fd5b505af115801561280d573d6000803e3d6000fd5b505050506128196134d7565b61282360046132e1565b906128415760405162461bcd60e51b81526004016107769190614d38565b508a612850836125718f6116e7565b1461285b600a6132e1565b906128795760405162461bcd60e51b81526004016107769190614d38565b507fd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab38518c8b8b846128a96006613837565b6040516128ba959493929190614b6b565b60405180910390a16128cc600661383b565b50506005805460ff60a01b1916600160a01b17905550505050505050505050565b609e81565b600030331461290160146132e1565b9061291f5760405162461bcd60e51b81526004016107769190614d38565b50600061292b836116e7565b9050606060006001600160a01b0389166129465750856129de565b60095460405163a9059cbb60e01b81526001600160a01b038b81169263a9059cbb9261297a92909116908b90600401614a67565b600060405180830381600087803b15801561299457600080fd5b505af11580156129a8573d6000803e3d6000fd5b505050506129b46134d7565b6129be60046132e1565b906129dc5760405162461bcd60e51b81526004016107769190614d38565b505b600954604051631cff79cd60e01b81526001600160a01b0390911690631cff79cd908390612a12908c908b90600401614ae0565b6000604051808303818588803b158015612a2b57600080fd5b505af1158015612a3f573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612a689190810190614517565b91508151604014612a7960096132e1565b90612a975760405162461bcd60e51b81526004016107769190614d38565b5060008083806020019051810190612aaf9190613fe6565b91509150866001600160a01b0316826001600160a01b0316148015612adf575080612add866125718a6116e7565b145b612ae960096132e1565b90612b075760405162461bcd60e51b81526004016107769190614d38565b509a9950505050505050505050565b600554600160a81b900460ff1615612b2e600f6132e1565b90612b4c5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b197fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff6001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff199094169390931716600160a81b1716600160a01b179091556007541615612bc060116132e1565b90612bde5760405162461bcd60e51b81526004016107769190614d38565b50600780546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560098054929093169116179055506002600855565b6009546001600160a01b031681565b600554600160a01b900460ff16612c4660016132e1565b90612c645760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b191690556b033b2e3c9fd0803ce8000000471115612c8c60026132e1565b90612caa5760405162461bcd60e51b81526004016107769190614d38565b50612ceb8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137ca92505050565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e6000868634604051612d219493929190614b37565b60405180910390a150506005805460ff60a01b1916600160a01b179055505050565b6007546001600160a01b03161580612d6557506007546001600160a01b031633145b8015612d7957506001600160a01b03811615155b612d8360116132e1565b90612da15760405162461bcd60e51b81526004016107769190614d38565b506007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000612ddc826137c4565b612df85760405162461bcd60e51b815260040161077690614e4d565b6000829050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3657600080fd5b505afa925050508015612e66575060408051601f3d908101601f19168201909252612e639181019061485e565b60015b612e825760405162461bcd60e51b815260040161077690614d4b565b91506117b69050565b60085481565b600281565b60006020819052908152604090205460ff1681565b6007546001600160a01b031681565b60008181526001602052604081205460ff1615612ed9575060016117b6565b6005546001600160a01b0316612ef1575060006117b6565b6005546040517fe4bd70740000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e4bd707490611bb3908590600401614cf2565b6005546000906001600160a01b031615801590612f7d57506001600160a01b0380831660009081526003602090815260408083209387168352929052205460ff16155b1561303957600554604051637badcc6760e11b8152613032916001600160a01b03169063f75b98ce90612fb69087908790600401614a80565b60206040518083038186803b158015612fce57600080fd5b505afa158015612fe2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613006919061485e565b6001600160a01b038085166000908152600260209081526040808320938916835292905220549061350b565b90506114c0565b506001600160a01b0380821660009081526002602090815260408083209386168352929052205492915050565b6005546001600160a01b031681565b600554600160a01b900460ff1661308c60016132e1565b906130aa5760405162461bcd60e51b81526004016107769190614d38565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526130f89185919085908590819084018382808284376000920191909152506137ca92505050565b600061316361310b60038c89898e613844565b8d8d60405160200161311f93929190614f80565b60408051601f198184030181526020601f8c018190048102840181019092528a835291908b908b90819084018382808284376000920191909152506138ca92505050565b905061316f818b61396e565b6001600160a01b038082166000908152600260209081526040808320938e16835292905220548911156131a260086132e1565b906131c05760405162461bcd60e51b81526004016107769190614d38565b506001600160a01b038082166000908152600260209081526040808320938e16835292905220546131f1908a613ab0565b6001600160a01b038083166000908152600260209081526040808320938f16835292815282822093909355600490925290205461322e908a613ab0565b6001600160a01b038b1660008181526004602052604090209190915589901561328257600061325c8c612dd1565b905060098160ff1611156132805760098160ff1603600a0a8b8161327c57fe5b0491505b505b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8b8e8e846040516132b79493929190614b37565b60405180910390a150506005805460ff60a01b1916600160a01b1790555050505050505050505050565b606060008260148111156132f157fe5b60408051600a808252818301909252919250906060908260208201818036833701905050905060005b60ff841615613380578151600a60ff959095168581049560018401939106916030830160f81b918591811061334b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505061331a565b60608160010167ffffffffffffffff8111801561339c57600080fd5b506040519080825280601f01601f1916602001820160405280156133c7576020820181803683370190505b50905060005b8281116134305783818403815181106133e257fe5b602001015160f81c60f81b8282815181106133f957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016133cd565b509695505050505050565b8047101561345b5760405162461bcd60e51b815260040161077690614ddf565b6000826001600160a01b03168260405161347490614a2c565b60006040518083038185875af1925050503d80600081146134b1576040519150601f19603f3d011682016040523d82523d6000602084013e6134b6565b606091505b505090508061082f5760405162461bcd60e51b815260040161077690614d82565b6000803d80156134ee57602081146134f757613503565b60019150613503565b60206000803e60005191505b501515905090565b60008282018381108015906135205750828110155b6040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906135695760405162461bcd60e51b81526004016107769190614d38565b509392505050565b600082820283158061352057508284828161358857fe5b04146040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906135695760405162461bcd60e51b81526004016107769190614d38565b60008a8a6040516020016135e8929190614a0a565b604051602081830303815290604052805190602001209050613608613c65565b6001600160a01b031663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016136489b9a99989796959493929190614c45565b60206040518083038186803b15801561366057600080fd5b505afa158015613674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136989190614329565b6136a260066132e1565b906136c05760405162461bcd60e51b81526004016107769190614d38565b505050505050505050505050565b816001600160a01b03851661371b576b033b2e3c9fd0803ce80000004711156136f760026132e1565b906137155760405162461bcd60e51b81526004016107769190614d38565b50613781565b600061372686612dd1565b905060098160ff16111561374a5760098160ff1603600a0a828161374657fe5b0491505b670de0b6b3a764000082111561376060036132e1565b9061377e5760405162461bcd60e51b81526004016107769190614d38565b50505b7eb45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d858583856040516137b59493929190614b02565b60405180910390a15050505050565b3b151590565b6000613819826040518060400160405280336001600160a01b03168152602001868152506040516020016137fe9190614fa6565b60405160208183030381529060405280519060200120611437565b6007549091506001600160a01b0380831691161461080f60106132e1565b5490565b80546001019055565b61384c613cf2565b613854613cf2565b604051806080016040528088600781111561386b57fe5b8152602001876001600160a01b0316815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200184905291505095945050505050565b815160208301206000906138dd81612eba565b156138e860056132e1565b906139065760405162461bcd60e51b81526004016107769190614d38565b5060006139138483611437565b90506001600160a01b038116151561392b60106132e1565b906139495760405162461bcd60e51b81526004016107769190614d38565b506000918252600160208190526040909220805460ff19169092179091559392505050565b6005546001600160a01b0316158015906139ae57506001600160a01b0380831660009081526003602090815260408083209385168352929052205460ff16155b15613aac57600554604051637badcc6760e11b8152613a63916001600160a01b03169063f75b98ce906139e79085908790600401614a80565b60206040518083038186803b1580156139ff57600080fd5b505afa158015613a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a37919061485e565b6001600160a01b038085166000908152600260209081526040808320938716835292905220549061350b565b6001600160a01b038084166000818152600260209081526040808320948716808452948252808320959095559181526003825283812092815291905220805460ff191660011790555b5050565b6000828211156040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b81525090613aff5760405162461bcd60e51b81526004016107769190614d38565b5050900390565b600080613b12866116e7565b90506001600160a01b038616613b2f57613b2c8134613ab0565b90505b84471015613b3d60076132e1565b90613b5b5760405162461bcd60e51b81526004016107769190614d38565b50600954604051631cff79cd60e01b81526060916001600160a01b031690631cff79cd908890613b919088908a90600401614ae0565b6000604051808303818588803b158015613baa57600080fd5b505af1158015613bbe573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052613be79190810190614517565b905060008082806020019051810190613c009190613fe6565b91509150886001600160a01b0316826001600160a01b0316148015613c30575080613c2e856125718c6116e7565b145b613c3a60096132e1565b90613c585760405162461bcd60e51b81526004016107769190614d38565b5098975050505050505050565b7f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd25490565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604051806060016040528060006001600160a01b031681526020016060815260200160006001600160a01b031681525090565b6040805160808101909152806000815260200160006001600160a01b0316815260200160608152602001600081525090565b80356114c081615093565b60008083601f840112613d40578182fd5b50813567ffffffffffffffff811115613d57578182fd5b6020830191508360208083028501011115613d7157600080fd5b9250929050565b600082601f830112613d88578081fd5b8135613d9b613d9682614ffb565b614fd4565b818152915060208083019084810181840286018201871015613dbc57600080fd5b60005b84811015613de4578135613dd2816150ab565b84529282019290820190600101613dbf565b505050505092915050565b600082601f830112613dff578081fd5b8135613e0d613d9682614ffb565b818152915060208083019084810181840286018201871015613e2e57600080fd5b60005b84811015613de457813584529282019290820190600101613e31565b600082601f830112613e5d578081fd5b8135613e6b613d9682614ffb565b818152915060208083019084810181840286018201871015613e8c57600080fd5b6000805b85811015613eba57823560ff81168114613ea8578283fd5b85529383019391830191600101613e90565b50505050505092915050565b60008083601f840112613ed7578182fd5b50813567ffffffffffffffff811115613eee578182fd5b602083019150836020828501011115613d7157600080fd5b600082601f830112613f16578081fd5b8135613f24613d968261501b565b9150808252836020828501011115613f3b57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613f65578081fd5b8135613f7081615093565b9392505050565b60008060008060008060c08789031215613f8f578182fd5b8635613f9a81615093565b95506020870135613faa81615093565b945060408701359350606087013592506080870135613fc881615093565b915060a0870135613fd881615093565b809150509295509295509295565b60008060408385031215613ff8578182fd5b825161400381615093565b6020939093015192949293505050565b60008060408385031215614025578182fd5b823561403081615093565b9150602083013561404081615093565b809150509250929050565b60008060006060848603121561405f578081fd5b833561406a81615093565b9250602084013561407a81615093565b929592945050506040919091013590565b60008060006060848603121561409f578081fd5b83356140aa81615093565b925060208401356140ba81615093565b915060408401356140ca81615093565b809150509250925092565b600080600080600060a086880312156140ec578283fd5b85356140f781615093565b9450602086013561410781615093565b935060408601359250606086013567ffffffffffffffff811115614129578182fd5b61413588828901613f06565b925050608086013561414681615093565b809150509295509295909350565b60008060008060008060008060008060e08b8d031215614172578788fd5b8a3561417d81615093565b995060208b0135985060408b013561419481615093565b97506141a38c60608d01613d24565b965060808b013567ffffffffffffffff808211156141bf578586fd5b6141cb8e838f01613ec6565b909850965060a08d01359150808211156141e3578586fd5b6141ef8e838f01613ec6565b909650945060c08d0135915080821115614207578384fd5b506142148d828e01613ec6565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060a0888a031215614247578081fd5b873561425281615093565b965060208801359550604088013567ffffffffffffffff80821115614275578283fd5b6142818b838c01613ec6565b909750955060608a0135945060808a01359150808211156142a0578283fd5b506142ad8a828b01613ec6565b989b979a50959850939692959293505050565b600080600080604085870312156142d5578182fd5b843567ffffffffffffffff808211156142ec578384fd5b6142f888838901613d2f565b90965094506020870135915080821115614310578384fd5b5061431d87828801613d2f565b95989497509550505050565b60006020828403121561433a578081fd5b8151613f70816150ab565b600060208284031215614356578081fd5b5035919050565b6000806020838503121561436f578182fd5b823567ffffffffffffffff811115614385578283fd5b61439185828601613ec6565b90969095509350505050565b60008060008060008060008060008060006101408c8e0312156143be578485fd5b67ffffffffffffffff808d3511156143d4578586fd5b6143e18e8e358f01613ec6565b909c509a5060208d0135995060408d01358110156143fd578586fd5b61440d8e60408f01358f01613def565b98508060608e0135111561441f578586fd5b61442f8e60608f01358f01613d78565b975060808d0135965060a08d013595508060c08e0135111561444f578182fd5b61445f8e60c08f01358f01613def565b94508060e08e01351115614471578182fd5b6144818e60e08f01358f01613e4d565b9350806101008e01351115614494578182fd5b6144a58e6101008f01358f01613def565b9250806101208e013511156144b8578182fd5b506144ca8d6101208e01358e01613def565b90509295989b509295989b9093969950565b6000602082840312156144ed578081fd5b813567ffffffffffffffff811115614503578182fd5b61450f84828501613f06565b949350505050565b600060208284031215614528578081fd5b815167ffffffffffffffff81111561453e578182fd5b8201601f8101841361454e578182fd5b805161455c613d968261501b565b818152856020838501011115614570578384fd5b614581826020830160208601615067565b95945050505050565b6000806040838503121561459c578182fd5b823567ffffffffffffffff8111156145b2578283fd5b6145be85828601613f06565b95602094909401359450505050565b6000806000806000806000806000806101408b8d0312156145ec578384fd5b8a3567ffffffffffffffff80821115614603578586fd5b61460f8e838f01613f06565b9b5060208d01359a5060408d013591508082111561462b578586fd5b6146378e838f01613def565b995060608d013591508082111561464c578586fd5b6146588e838f01613d78565b985060808d0135975060a08d0135965060c08d013591508082111561467b578586fd5b6146878e838f01613def565b955060e08d013591508082111561469c578485fd5b6146a88e838f01613e4d565b94506101008d01359150808211156146be578384fd5b6146ca8e838f01613def565b93506101208d01359150808211156146e0578283fd5b506146ed8d828e01613def565b9150509295989b9194979a5092959850565b600080600080600080600080600080600060e08c8e03121561471f578485fd5b67ffffffffffffffff808d351115614735578586fd5b6147428e8e358f01613ec6565b909c509a506147548e60208f01613d24565b995060408d013598508060608e0135111561476d578586fd5b61477d8e60608f01358f01613ec6565b909850965060808d0135811015614792578586fd5b6147a28e60808f01358f01613ec6565b909650945060a08d0135935060c08d01358110156147be578182fd5b506147cf8d60c08e01358e01613ec6565b81935080925050509295989b509295989b9093969950565b6000806000806000606086880312156147fe578283fd5b853567ffffffffffffffff80821115614815578485fd5b61482189838a01613ec6565b9097509550602088013594506040880135915080821115614840578283fd5b5061484d88828901613ec6565b969995985093965092949392505050565b60006020828403121561486f578081fd5b5051919050565b6000815180845260208085019450808401835b838110156148a7578151151587529582019590820190600101614889565b509495945050505050565b6000815180845260208085019450808401835b838110156148a7578151875295820195908201906001016148c5565b6000815180845260208085019450808401835b838110156148a757815160ff16875295820195908201906001016148f4565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452614955816020860160208601615067565b601f01601f19169290920160200192915050565b60ff815116825260ff602082015116602083015260408101516001600160a01b03808216604085015280606084015116606085015250506080810151608083015260a081015160a08301525050565b60008151600881106149c657fe5b808452506001600160a01b0360208301511660208401526040820151608060408501526149f6608085018261493d565b606093840151949093019390935250919050565b60008351614a1c818460208801615067565b9190910191825250602001919050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b038088168352808716602084015285604084015260a06060840152614acb60a084018661493d565b91508084166080840152509695505050505050565b60006001600160a01b03841682526040602083015261450f604083018461493d565b60006001600160a01b038616825260806020830152614b24608083018661493d565b6040830194909452506060015292915050565b60006001600160a01b038616825260606020830152614b5a606083018587614913565b905082604083015295945050505050565b60006001600160a01b038716825260806020830152614b8e608083018688614913565b604083019490945250606001529392505050565b6040808252810184905260008560608301825b87811015614be55760208335614bca81615093565b6001600160a01b031683529283019290910190600101614bb5565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115614c1d578283fd5b602085029150818660208301370160200190815295945050505050565b901515815260200190565b60006101608d151583528c60208401528b6040840152806060840152614c6d8184018c6148b2565b90508281036080840152614c81818b614876565b90508860a08401528760c084015282810360e0840152614ca181886148b2565b9050828103610100840152614cb681876148e1565b9050828103610120840152614ccb81866148b2565b9050828103610140840152614ce081856148b2565b9e9d5050505050505050505050505050565b90815260200190565b600084825283602083015260606040830152614581606083018461493d565b93845260ff9290921660208401526040830152606082015260800190565b600060208252613f70602083018461493d565b60208082526018908201527f67657420455243323020646563696d616c206661696c65640000000000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526016908201527f62616c616e63654f66206e6f6e2d636f6e747261637400000000000000000000604082015260600190565b60208082526018908201527f676574446563696d616c73206e6f6e2d636f6e74726163740000000000000000604082015260600190565b60208082526018908201527f6765742045524332302062616c616e6365206661696c65640000000000000000604082015260600190565b60c081016114c08284614969565b6000610100614ed88387614969565b8060c08401526001600160a01b038086511682850152602086015191506060610120850152614f0b61016085018361493d565b9150806040870151166101408501525082810360e0840152614f2d818561493d565b9695505050505050565b600060808252614f4a60808301886149b8565b6001600160a01b038781166020850152861660408401528281036060840152614f74818587614913565b98975050505050505050565b600060408252614f9360408301866149b8565b8281036020840152614f2d818587614913565b81516001600160a01b031681526020918201519181019190915260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715614ff357600080fd5b604052919050565b600067ffffffffffffffff821115615011578081fd5b5060209081020190565b600067ffffffffffffffff821115615031578081fd5b50601f01601f191660200190565b6000808585111561504e578182fd5b8386111561505a578182fd5b5050820193919092039150565b60005b8381101561508257818101518382015260200161506a565b8381111561082d5750506000910152565b6001600160a01b03811681146150a857600080fd5b50565b80151581146150a857600080fdfea26469706673582212204bf4e00c9cc3ccc671ec6675530ad385d6e8002e9ad7dc8d8b7a283c9a83497264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Get the amount of coin deposited to this smartcontract"
      },
      "deposit(string,bytes32,bytes)": {
        "details": "Makes a ETH deposit to the vault to mint pETH over at Incognito Chain",
        "params": {
          "incognitoAddress": ": Incognito Address to receive pETH",
          "signData": ": regulator signature",
          "txId": ": move fund transaction hash"
        }
      },
      "depositERC20(address,uint256,string,bytes32,bytes)": {
        "details": "Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain",
        "params": {
          "amount": ": to deposit to the vault and mint on Incognito Chain",
          "incognitoAddress": ": Incognito Address to receive pERC20",
          "signData": ": regulator signature",
          "token": ": address of the ERC20 token",
          "txId": ": move fund transaction hash"
        }
      },
      "depositERC20_V2(address,uint256,string,bytes32,bytes)": {
        "details": "Makes a ERC20 deposit to the vault to mint pERC20 over at Incognito Chain",
        "params": {
          "amount": ": to deposit to the vault and mint on Incognito Chain",
          "incognitoAddress": ": Incognito Address to receive pERC20",
          "token": ": address of the ERC20 token"
        }
      },
      "deposit_V2(string,bytes32,bytes)": {
        "details": "Makes a ETH deposit to the vault to mint pETH over at Incognito Chain",
        "params": {
          "incognitoAddress": ": Incognito Address to receive pETH"
        }
      },
      "execute(address,uint256,address,address,bytes,bytes,bytes)": {
        "details": "execute is a general function that plays a role as proxy to interact to other smart contracts.",
        "params": {
          "amount": ": amount of the token in ethereum's denomination",
          "callData": ": encoded with signature and params of function from targeting smart contract.",
          "exchangeAddress": ": address of targeting smart contract that actually executes the desired logics like trade, invest, borrow and so on.",
          "recipientToken": ": received token address.",
          "signData": ": signature of an unique data that is signed by an account which is generated from user's incognito privkey",
          "timestamp": ": unique data generated from client (timestamp for example)",
          "token": ": ethereum's token address (eg., ETH, DAI, ...)"
        }
      },
      "getDecimals(address)": {
        "details": "Get the decimals of an ERC20 token, return 0 if it isn't defined We check the returndatasize to covert both cases that the token has and doesn't have the function decimals()"
      },
      "getDepositedBalance(address,address)": {
        "details": "Get the amount of specific coin for specific wallet"
      },
      "initialize(address,address,address)": {
        "details": "Creates new Vault to hold assets for Incognito Chain",
        "params": {
          "_executor": ": helper contract to perform external call from After migrating all assets to a new Vault, we still need to refer back to previous Vault to make sure old withdrawals aren't being reused",
          "_prevVault": ": previous version of the Vault to refer back if necessary",
          "_regulator": ": ..."
        }
      },
      "isSigDataUsed(bytes32)": {
        "details": "Checks if a sig data has been used before",
        "params": {
          "hash": ": of the sig data"
        },
        "returns": {
          "_0": "bool: whether the sig data has been used or not"
        }
      },
      "isWithdrawed(bytes32)": {
        "details": "Checks if a burn proof has been used before",
        "params": {
          "hash": ": of the burn proof"
        },
        "returns": {
          "_0": "bool: whether the proof has been used or not"
        }
      },
      "parseBurnInst(bytes)": {
        "details": "Parses a burn instruction and returns the components",
        "params": {
          "inst": ": the full instruction, containing both metadata and body"
        }
      },
      "parseCalldataFromBurnInst(bytes)": {
        "details": "Parses an extended burn instruction and returns the components",
        "params": {
          "inst": ": the full instruction, containing both metadata and body"
        }
      },
      "requestWithdraw(string,address,uint256,bytes,bytes,bytes32,bytes)": {
        "details": "User requests withdraw token contains in withdrawRequests. Deposit event will be emitted to let incognito recognize and mint new p-tokens for the user.",
        "params": {
          "amount": ": amount of the token in ethereum's denomination",
          "incognitoAddress": ": incognito's address that will receive minted p-tokens.",
          "signData": ": regulator signature",
          "timestamp": ": unique data generated from client (timestamp for example)",
          "token": ": ethereum's token address (eg., ETH, DAI, ...)",
          "txId": ": move fund transaction hash"
        }
      },
      "setRegulator(address)": {
        "details": "set regulator"
      },
      "sigToAddress(bytes,bytes32)": {
        "details": "generate address from signature data and hash."
      },
      "submitBurnProof(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "Burnt Proof is submited to store burnt amount of p-token/p-ETH and receiver's address Receiver then can call withdrawRequest to withdraw these token to he/she incognito address.",
        "params": {
          "blkData": ": merkle has of the block body",
          "heights": ": the blocks containing the instruction",
          "inst": ": the decoded instruction as a list of bytes",
          "instPathIsLefts": ": whether each node on the path is the left or right child",
          "instPaths": ": merkle path of the instruction",
          "instRoots": ": root of the merkle tree contains all instructions",
          "sigIdxs": ": indices of the validators who signed this block",
          "sigRs": ": part of the signatures of the validators",
          "sigSs": ": part of the signatures of the validators",
          "sigVs": ": part of the signatures of the validators"
        }
      },
      "updateAssets(address[],uint256[])": {
        "details": "Move total number of assets to newVault",
        "params": {
          "amounts": ": total number of the ERC20 tokens to move, 0x0 for ETH",
          "assets": ": address of the ERC20 tokens to move, 0x0 for ETH"
        }
      },
      "upgradeVaultStorage(address,address)": {
        "details": "upgrade helper for storage layout version 2",
        "params": {
          "_executor": ": helper contract to perform external call from",
          "_regulator": ": ..."
        }
      },
      "withdraw(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "Withdraws pETH/pIERC20 by providing a burn proof over at Incognito Chain",
        "params": {
          "blkData": ": merkle has of the block body",
          "heights": ": the blocks containing the instruction",
          "inst": ": the decoded instruction as a list of bytes",
          "instPathIsLefts": ": whether each node on the path is the left or right child",
          "instPaths": ": merkle path of the instruction",
          "instRoots": ": root of the merkle tree contains all instructions",
          "sigIdxs": ": indices of the validators who signed this block",
          "sigRs": ": part of the signatures of the validators",
          "sigSs": ": part of the signatures of the validators",
          "sigVs": ": part of the signatures of the validators"
        }
      }
    },
    "stateVariables": {
      "CURRENT_NETWORK_ID": {
        "details": "Added in Storage Layout version : 2.0"
      },
      "_INCOGNITO_SLOT": {
        "details": "Storage slot with the incognito proxy. This is the keccak-256 hash of \"eip1967.proxy.incognito.\" subtracted by 1"
      },
      "withdrawed": {
        "details": "Storage variables for Vault This section is APPEND-ONLY, in order to preserve upgradeability since we use Proxy Pattern"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(string,bytes32,bytes)": {
        "notice": "This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64"
      },
      "depositERC20(address,uint256,string,bytes32,bytes)": {
        "notice": "This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64Before calling this function, enough ERC20 must be allowed to tranfer from msg.sender to this contract"
      },
      "depositERC20_V2(address,uint256,string,bytes32,bytes)": {
        "notice": "This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64Before calling this function, enough ERC20 must be allowed to tranfer from msg.sender to this contract"
      },
      "deposit_V2(string,bytes32,bytes)": {
        "notice": "This only works when the contract is not PausedThe maximum amount to deposit is capped since Incognito balance is stored as uint64"
      },
      "isSigDataUsed(bytes32)": {
        "notice": "First, we check inside the storage of this contract itself. If the hash has been used before, we return the result. Otherwise, we query previous vault recursively until the first Vault (prevVault address is 0x0)"
      },
      "isWithdrawed(bytes32)": {
        "notice": "First, we check inside the storage of this contract itself. If the hash has been used before, we return the result. Otherwise, we query previous vault recursively until the first Vault (prevVault address is 0x0)"
      },
      "submitBurnProof(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])": {
        "notice": "This function takes a burn instruction on Incognito Chain, checks for its validity and returns the token back to ETH chainThis only works when the contract is not Paused"
      },
      "updateAssets(address[],uint256[])": {
        "notice": "This only works when the preVault is PausedThis can only be called by preVault"
      },
      "withdraw(bytes,uint256,bytes32[],bool[],bytes32,bytes32,uint256[],uint8[],bytes32[],bytes32[])": {
        "notice": "This function takes a burn instruction on Incognito Chain, checks for its validity and returns the token back to ETH chainThis only works when the contract is not Paused"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11375,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "withdrawed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 11379,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "sigDataUsed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 11385,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "withdrawRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11391,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "migration",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11395,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "totalDepositedToSCAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11397,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "prevVault",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Withdrawable)8274"
      },
      {
        "astId": 11399,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "notEntered",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 11401,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "isInitialized",
        "offset": 21,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 11416,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "idCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)8158_storage"
      },
      {
        "astId": 11418,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "regulator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11420,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "storageLayoutVersion",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11422,
        "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
        "label": "executor",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Withdrawable)8274": {
        "encoding": "inplace",
        "label": "contract Withdrawable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)8158_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8157,
            "contract": "contracts/vault_variants/vault_BSC.sol:VaultBSC",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}