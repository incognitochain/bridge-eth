{
  "address": "0xCC8c88e9Dae72fa07aC077933a2E73d146FECdf0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter2",
          "name": "_swaproute02",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "_inspectMultiTrades",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct UniswapProxy.CallSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "_inspectTradeInput",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct UniswapProxy.CallSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "_inspectTradeInputSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct UniswapProxy.CallSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addDappAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dappAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "dappExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fns",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "multiTrades",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeDappAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swaprouter02",
      "outputs": [
        {
          "internalType": "contract ISwapRouter2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "tradeInput",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "tradeInputSingle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmatic",
      "outputs": [
        {
          "internalType": "contract Wmatic",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf3d309f555ea3ecfa020bf4773f66ce5e5354dc9ef7b9c4309cbab7e95f24201",
  "receipt": {
    "to": null,
    "from": "0xE2516f0F38d9400a8ceCe5672884De72FBD01cE1",
    "contractAddress": "0xCC8c88e9Dae72fa07aC077933a2E73d146FECdf0",
    "transactionIndex": 32,
    "gasUsed": "1912039",
    "logsBloom": "0x
    "blockHash": "0xb6633111b259beb31bd04a1045fad16a7b4b8bf16660e26b4955cd3e7b6f3434",
    "transactionHash": "0xf3d309f555ea3ecfa020bf4773f66ce5e5354dc9ef7b9c4309cbab7e95f24201",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 33421387,
        "transactionHash": "0xf3d309f555ea3ecfa020bf4773f66ce5e5354dc9ef7b9c4309cbab7e95f24201",
        "address": "0xCC8c88e9Dae72fa07aC077933a2E73d146FECdf0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e2516f0f38d9400a8cece5672884de72fbd01ce1"
        ],
        "data": "0x",
        "logIndex": 110,
        "blockHash": "0xb6633111b259beb31bd04a1045fad16a7b4b8bf16660e26b4955cd3e7b6f3434"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 33421387,
        "transactionHash": "0xf3d309f555ea3ecfa020bf4773f66ce5e5354dc9ef7b9c4309cbab7e95f24201",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e2516f0f38d9400a8cece5672884de72fbd01ce1",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000111b323e82b8214000000000000000000000000000000000000000000000000fc41415129bc6e2c000000000000000000000000000000000000000000000fcd18ba084c98a02185000000000000000000000000000000000000000000000000fb2f8e2d4190ec18000000000000000000000000000000000000000000000fcd19cbbb7080cba399",
        "logIndex": 111,
        "blockHash": "0xb6633111b259beb31bd04a1045fad16a7b4b8bf16660e26b4955cd3e7b6f3434"
      }
    ],
    "blockNumber": 33421387,
    "cumulativeGasUsed": "7067853",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c40ff0f7c60aafd4e5509bcb12e6143",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwapRouter2\",\"name\":\"_swaproute02\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"_inspectMultiTrades\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UniswapProxy.CallSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter2.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"_inspectTradeInput\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UniswapProxy.CallSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter2.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"_inspectTradeInputSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UniswapProxy.CallSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addDappAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dappAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"dappExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fns\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"multiTrades\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeDappAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaprouter02\",\"outputs\":[{\"internalType\":\"contract ISwapRouter2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter2.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"tradeInput\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter2.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"tradeInputSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"contract Wmatic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor\",\"params\":{\"_swaproute02\":\"uniswap routes contract address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/uniswap_proxy.sol\":\"UniswapProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint amount) external;\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x48ab23021f110d2901cc213e835b0a0873a99e5eb41d10142ee1e47b6d54697a\",\"license\":\"MIT\"},\"contracts/polygon/uniswap_proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/Path.sol\\\";\\nimport \\\"../trade_utils.sol\\\";\\n\\ninterface ISwapRouter2 {\\n\\t/// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n\\t/// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n\\t/// @param deadline The time by which this function must be called before failing\\n\\t/// @param data The encoded function data for each of the calls to make to this contract\\n\\t/// @return results The results from each of the calls passed in via data\\n\\tfunction multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n\\t/// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n\\t/// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n\\t/// @param previousBlockhash The expected parent blockHash\\n\\t/// @param data The encoded function data for each of the calls to make to this contract\\n\\t/// @return results The results from each of the calls passed in via data\\n\\t// function multicall(bytes32 previousBlockhash, bytes[] calldata data)\\n\\t// external\\n\\t// payable\\n\\t// returns (bytes[] memory results);\\n\\tstruct ExactInputSingleParams {\\n\\t\\taddress tokenIn;\\n\\t\\taddress tokenOut;\\n\\t\\tuint24 fee;\\n\\t\\taddress recipient;\\n\\t\\tuint256 amountIn;\\n\\t\\tuint256 amountOutMinimum;\\n\\t\\tuint160 sqrtPriceLimitX96;\\n\\t}\\n\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another token\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n\\t/// @return amountOut The amount of the received token\\n\\tfunction exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n\\tstruct ExactInputParams {\\n\\t\\tbytes path;\\n\\t\\taddress recipient;\\n\\t\\tuint256 amountIn;\\n\\t\\tuint256 amountOutMinimum;\\n\\t}\\n\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n\\t/// @return amountOut The amount of the received token\\n\\tfunction exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\tfunction WETH9() external returns(address);\\n}\\n\\ninterface Wmatic is IERC20 {\\n\\tfunction withdraw(uint256 amount) external;\\n}\\n\\ncontract UniswapProxy is Executor {\\n\\tusing Path for bytes;\\n\\t// Variables\\n\\taddress constant public ETH_CONTRACT_ADDRESS = 0x0000000000000000000000000000000000000000;\\n\\tuint constant public MAX = uint(-1);\\n\\tISwapRouter2 public swaprouter02;\\n\\tWmatic public wmatic;\\n\\n\\tstruct CallSummary {\\n\\t\\taddress to;\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t\\tbytes data;\\n\\t}\\n\\n\\t/**\\n     * @dev Contract constructor\\n     * @param _swaproute02 uniswap routes contract address\\n     */\\n\\tconstructor(ISwapRouter2 _swaproute02) payable {\\n\\t\\tswaprouter02 = _swaproute02;\\n\\t\\twmatic = Wmatic(swaprouter02.WETH9());\\n\\t}\\n\\n\\tfunction tradeInputSingle(ISwapRouter2.ExactInputSingleParams calldata params, bool isNative) external payable returns(address, uint) {\\n\\t\\tcheckApproved(IERC20(params.tokenIn), params.amountIn);\\n\\t\\tuint amountOut = swaprouter02.exactInputSingle{value: msg.value}(params);\\n\\t\\trequire(amountOut >= params.amountOutMinimum, \\\"lower than expected output\\\");\\n\\t\\taddress returnToken = withdrawMatic(params.tokenOut, amountOut, isNative);\\n\\t\\treturn (returnToken, amountOut);\\n\\t}\\n\\n\\tfunction tradeInput(ISwapRouter2.ExactInputParams calldata params, bool isNative) external payable returns(address, uint) {\\n\\t\\t(address tokenIn,,) = params.path.decodeFirstPool();\\n\\t\\tcheckApproved(IERC20(tokenIn), params.amountIn);\\n\\t\\tuint amountOut = swaprouter02.exactInput{value: msg.value}(params);\\n\\t\\tbytes memory tempPath = params.path;\\n\\t\\taddress returnToken;\\n\\t\\twhile (true) {\\n\\t\\t\\tbool hasMultiplePools = tempPath.hasMultiplePools();\\n\\t\\t\\t// decide whether to continue or terminate\\n\\t\\t\\tif (hasMultiplePools) {\\n\\t\\t\\t\\ttempPath = tempPath.skipToken();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t(,returnToken,) = tempPath.decodeFirstPool();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturnToken = withdrawMatic(returnToken, amountOut, isNative);\\n\\t\\treturn (returnToken, amountOut);\\n\\t}\\n\\n\\tfunction multiTrades(uint256 deadline, bytes[] calldata data, IERC20 sellToken, address buyToken, uint256 sellAmount, bool isNative) external payable returns(address, uint) {\\n\\t\\tcheckApproved(sellToken, sellAmount);\\n\\t\\tuint256 amountOut;\\n\\t\\tbytes[] memory results = swaprouter02.multicall{value: msg.value}(deadline, data);\\n\\t\\tfor (uint i = 0; i < results.length; i++) {\\n\\t\\t\\tamountOut += abi.decode(results[i], (uint256));\\n\\t\\t}\\n\\t\\taddress returnToken = withdrawMatic(buyToken, amountOut, isNative);\\n\\n\\t\\treturn (returnToken, amountOut);\\n\\t}\\n\\n\\tfunction _inspectTradeInputSingle(ISwapRouter2.ExactInputSingleParams calldata params, bool isNative) external view returns (bytes memory, CallSummary memory) {\\n\\t\\tbytes memory rdata = abi.encodeWithSelector(0x421f4388, params, isNative);\\n\\t\\tCallSummary memory cs = CallSummary(address(swaprouter02), params.tokenIn, params.amountIn,\\n\\t\\t\\tabi.encodeWithSelector(0x04e45aaf, params)\\n\\t\\t);\\n\\t\\treturn (rdata, cs);\\n\\t}\\n\\n\\tfunction _inspectTradeInput(ISwapRouter2.ExactInputParams calldata params, bool isNative) external view returns(bytes memory, CallSummary memory) {\\n\\t\\t(address tokenIn,,) = params.path.decodeFirstPool();\\n\\t\\tbytes memory rdata = abi.encodeWithSelector(0xc8dc75e6, params, isNative);\\n\\t\\tCallSummary memory cs = CallSummary(address(swaprouter02), tokenIn, params.amountIn,\\n\\t\\t\\tabi.encodeWithSelector(0xb858183f, params)\\n\\t\\t);\\n\\t\\treturn (rdata, cs);\\n\\t}\\n\\n\\tfunction _inspectMultiTrades(uint256 deadline, bytes[] calldata data, IERC20 sellToken, address buyToken, uint256 sellAmount, bool isNative) external view returns (bytes memory, CallSummary memory) {\\n\\t\\tbytes memory rdata = abi.encodeWithSelector(0x92171fd8, block.timestamp + 1000000000, data, sellToken, buyToken, sellAmount, isNative);\\n\\t\\tCallSummary memory cs = CallSummary(address(swaprouter02), address(sellToken), sellAmount,\\n\\t\\t\\tabi.encodeWithSelector(0x5ae401dc, block.timestamp + 1000000000, data)\\n\\t\\t);\\n\\t\\treturn (rdata, cs);\\n\\t}\\n\\n\\tfunction checkApproved(IERC20 srcToken, uint256 amount) internal {\\n\\t\\tif (msg.value == 0 && srcToken.allowance(address(this), address(swaprouter02)) < amount) {\\n\\t\\t\\tsrcToken.approve(address(swaprouter02), MAX);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawMatic(address tokenOut, uint256 amountOut, bool isNative) internal returns(address returnToken) {\\n\\t\\tif (tokenOut == address(wmatic) && isNative) {\\n\\t\\t\\t// convert wmatic to matic\\n\\t\\t\\t// recipient in params must be this contract\\n\\t\\t\\twmatic.withdraw(amountOut);\\n\\t\\t\\treturnToken = ETH_CONTRACT_ADDRESS;\\n\\t\\t\\ttransfer(returnToken, amountOut);\\n\\t\\t} else {\\n\\t\\t\\treturnToken = tokenOut;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction transfer(address token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount, \\\"IUP: transfer amount exceeds balance\\\");\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"IUP: transfer failed\\\");\\n\\t\\t} else {\\n\\t\\t\\tIERC20(token).transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess(), \\\"IUP: transfer token failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n\\tfunction checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n\\n\\t/**\\n     * @dev Payable receive function to receive Ether from oldVault when migrating\\n     */\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x11aa626b49ebaea63e68769108b5bd55bbb17887d935b449c1ac2d377552e410\",\"license\":\"GPL-2.0-or-later\"},\"contracts/trade_utils.sol\":{\"content\":\"pragma solidity >=0.6.12 <=0.8.9;\\n\\nimport './IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract TradeUtils {\\n\\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n\\tfunction balanceOf(IERC20 token) internal view returns (uint256) {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\treturn address(this).balance;\\n\\t\\t}\\n        return token.balanceOf(address(this));\\n    }\\n\\n\\tfunction transfer(IERC20 token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount);\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n          \\trequire(success);\\n\\t\\t} else {\\n\\t\\t\\ttoken.transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(IERC20 token, address proxy, uint amount) internal {\\n\\t\\tif (token != ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\ttoken.approve(proxy, 0);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t\\ttoken.approve(proxy, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n}\\n\\nabstract contract Executor is Ownable {\\n\\tmapping (address => bool) public dappAddresses;\\n\\n\\tconstructor() internal {\\n\\t\\tdappAddresses[address(this)] = true;\\n\\t}\\n\\n\\tfunction addDappAddress(address addr) external onlyOwner {\\n\\t\\trequire(addr != address(0x0), \\\"Executor:A0\\\"); // address is zero\\n\\t\\tdappAddresses[addr] = true;\\n\\t}\\n\\n\\tfunction removeDappAddress(address addr) external onlyOwner {\\n\\t\\trequire(addr != address(0x0), \\\"Executor:A0\\\"); // address is zero\\n\\t\\tdappAddresses[addr] = false;\\n\\t}\\n\\n\\tfunction dappExists(address addr) public view returns (bool) {\\n\\t\\treturn dappAddresses[addr];\\n\\t}\\n\\n    function execute(address fns, bytes calldata data) external payable returns (bytes memory) {\\n    \\trequire(dappExists(fns), \\\"Executor:DNE\\\"); // dapp does not exist\\n        (bool success, bytes memory result) = fns.delegatecall(data);\\n        if (!success) {\\n        \\t// Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xf0d72d29eec562c5ca894642bce780ebbc671ffad618459046d1f9adc045224d\"}},\"version\":1}",
  "bytecode": "0x60806040526040516200218a3803806200218a833981016040819052620000269162000158565b60006200003262000154565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350306000908152600160208181526040808420805460ff1916909317909255600280546001600160a01b0319166001600160a01b03868116919091179182905583516312a9293f60e21b81529351911693634aa4a4fc936004808201949392918390030190829087803b158015620000f257600080fd5b505af115801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d919062000158565b600380546001600160a01b0319166001600160a01b03929092169190911790555062000197565b3390565b6000602082840312156200016a578081fd5b815162000177816200017e565b9392505050565b6001600160a01b03811681146200019457600080fd5b50565b611fe380620001a76000396000f3fe60806040526004361061012d5760003560e01c80638da5cb5b116100a5578063c8dc75e611610074578063d6edf5f011610059578063d6edf5f014610309578063f2fde38b14610329578063fb41be161461034957610134565b8063c8dc75e6146102d4578063d49d5181146102e757610134565b80638da5cb5b1461026c57806392171fd814610281578063a2de021214610294578063bbf6f5a7146102b457610134565b80636da41924116100fc57806372e94bf6116100e157806372e94bf61461020a578063772be2371461021f578063787ca4381461023f57610134565b80636da41924146101d3578063715018a6146101f557610134565b8063017e1619146101395780631cff79cd14610170578063421f4388146101905780636b150c3c146101b157610134565b3661013457005b600080fd5b34801561014557600080fd5b5061015961015436600461193b565b61035e565b604051610167929190611c52565b60405180910390f35b61018361017e366004611787565b610447565b6040516101679190611c3f565b6101a361019e36600461193b565b610678565b604051610167929190611c1b565b3480156101bd57600080fd5b506101c661078a565b6040516101679190611bed565b3480156101df57600080fd5b506101f36101ee36600461176b565b610799565b005b34801561020157600080fd5b506101f361087d565b34801561021657600080fd5b506101c6610948565b34801561022b57600080fd5b5061015961023a366004611984565b61094d565b34801561024b57600080fd5b5061025f61025a36600461176b565b610a56565b6040516101679190611c34565b34801561027857600080fd5b506101c6610a6b565b6101a361028f366004611984565b610a7a565b3480156102a057600080fd5b5061025f6102af36600461176b565b610b92565b3480156102c057600080fd5b506101596102cf3660046118eb565b610bb4565b6101a36102e23660046118eb565b610cf0565b3480156102f357600080fd5b506102fc610e4c565b6040516101679190611e1a565b34801561031557600080fd5b506101f361032436600461176b565b610e52565b34801561033557600080fd5b506101f361034436600461176b565b610f30565b34801561035557600080fd5b506101c6611051565b606061036861172a565b600063421f43888585604051602401610382929190611dfc565b60408051601f19818403018152918152602080830180516001600160e01b031660e09590951b949094179093528051608081019091526002546001600160a01b03168152909250600091818101906103dc9089018961176b565b6001600160a01b03168152602001876080013581526020016304e45aaf8860405160240161040a9190611dee565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b929092179091529052919350909150505b9250929050565b606061045284610b92565b6104a3576040805162461bcd60e51b815260206004820152600c60248201527f4578656375746f723a444e450000000000000000000000000000000000000000604482015290519081900360640190fd5b600080856001600160a01b031685856040518083838082843760405192019450600093509091505080830381855af49150503d8060008114610501576040519150601f19603f3d011682016040523d82523d6000602084013e610506565b606091505b50915091508161066d5760448151101561051f57600080fd5b600481018051909160240190602081101561053957600080fd5b810190808051604051939291908464010000000082111561055957600080fd5b90830190602082018581111561056e57600080fd5b825164010000000081118282018810171561058857600080fd5b82525081516020918201929091019080838360005b838110156105b557818101518382015260200161059d565b50505050905090810190601f1680156105e25780820380516001836020036101000a031916815260200191505b5060405250505060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561063257818101518382015260200161061a565b50505050905090810190601f16801561065f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9150505b9392505050565b60008061069561068b602086018661176b565b8560800135611060565b6002546040517f04e45aaf0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906304e45aaf9034906106e1908990600401611dee565b6020604051808303818588803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610733919061196c565b90508460a001358110156107625760405162461bcd60e51b815260040161075990611d80565b60405180910390fd5b600061077e610777604088016020890161176b565b8387611194565b96919550909350505050565b6002546001600160a01b031681565b6107a161124c565b6001600160a01b03166107b2610a6b565b6001600160a01b03161461080d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610856576040805162461bcd60e51b815260206004820152600b60248201526a04578656375746f723a41360ac1b604482015290519081900360640190fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b61088561124c565b6001600160a01b0316610896610a6b565b6001600160a01b0316146108f1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081565b606061095761172a565b60006392171fd842633b9aca00018a8a8a8a8a8a6040516024016109819796959493929190611e46565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050905060006040518060800160405280600260009054906101000a90046001600160a01b03166001600160a01b03168152602001896001600160a01b03168152602001878152602001635ae401dc42633b9aca00018d8d604051602401610a1593929190611e23565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b9290921790915290529193509091505097509795505050505050565b60016020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080610a878685611060565b6002546040517f5ae401dc00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690635ae401dc903490610adb908f908f908f90600401611e23565b6000604051808303818588803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610b319190810190611807565b905060005b8151811015610b7257818181518110610b4b57fe5b6020026020010151806020019051810190610b66919061196c565b90920191600101610b36565b506000610b80888488611194565b9c929b50919950505050505050505050565b6001600160a01b03811660009081526001602052604090205460ff165b919050565b6060610bbe61172a565b6000610c07610bcd8680611e91565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061125092505050565b50509050600063c8dc75e68686604051602401610c25929190611dca565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050905060006040518060800160405280600260009054906101000a90046001600160a01b03166001600160a01b03168152602001846001600160a01b031681526020018860400135815260200163b858183f89604051602401610cb39190611db7565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b92909217909152905291945090925050509250929050565b60008080610d01610bcd8680611e91565b50509050610d13818660400135611060565b6002546040517fb858183f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063b858183f903490610d5f908a90600401611db7565b6020604051808303818588803b158015610d7857600080fd5b505af1158015610d8c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610db1919061196c565b90506000610dbf8780611e91565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b6000610e0183611281565b90508015610e1957610e1283611289565b9250610e2d565b610e2283611250565b509250610e33915050565b50610df6565b610e3e818489611194565b989297509195505050505050565b60001981565b610e5a61124c565b6001600160a01b0316610e6b610a6b565b6001600160a01b031614610ec6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610f0f576040805162461bcd60e51b815260206004820152600b60248201526a04578656375746f723a41360ac1b604482015290519081900360640190fd5b6001600160a01b03166000908152600160205260409020805460ff19169055565b610f3861124c565b6001600160a01b0316610f49610a6b565b6001600160a01b031614610fa4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610fe95760405162461bcd60e51b8152600401808060200182810382526026815260200180611f886026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3415801561110957506002546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815282916001600160a01b038086169263dd62ed3e926110b7923092911690600401611c01565b60206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611107919061196c565b105b15611190576002546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038481169263095ea7b39261115d929091169060001990600401611c1b565b600060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b505050505b5050565b6003546000906001600160a01b0385811691161480156111b15750815b15611244576003546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632e1a7d4d906111ff908690600401611e1a565b600060405180830381600087803b15801561121957600080fd5b505af115801561122d573d6000803e3d6000fd5b505050506000905061123f81846112a6565b610671565b509192915050565b3390565b6000808061125e84826113f3565b925061126b8460146114bf565b90506112788460176113f3565b91509193909250565b516042111590565b80516060906112a09083906017906016190161157b565b92915050565b6001600160a01b03821661135657804710156112d45760405162461bcd60e51b815260040161075990611d23565b6000336001600160a01b0316826040516112ed90611bea565b60006040518083038185875af1925050503d806000811461132a576040519150601f19603f3d011682016040523d82523d6000602084013e61132f565b606091505b50509050806113505760405162461bcd60e51b815260040161075990611cb5565b50611190565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063a9059cbb9061139d9033908590600401611c1b565b600060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050506113d76116f6565b6111905760405162461bcd60e51b815260040161075990611cec565b60008182601401101561144d576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156114a6576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015611519576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015611572576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f0110156115d5576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b82828401101561162c576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611684576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b6060821580156116a357604051915060008252602082016040526116ed565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156116dc5780518352602092830192016116c4565b5050858452601f01601f1916604052505b50949350505050565b6000803d801561170d576020811461171657611722565b60019150611722565b60206000803e60005191505b501515905090565b604080516080810182526000808252602082018190529181019190915260608082015290565b8035610baf81611f6f565b80358015158114610baf57600080fd5b60006020828403121561177c578081fd5b813561067181611f6f565b60008060006040848603121561179b578182fd5b83356117a681611f6f565b9250602084013567ffffffffffffffff808211156117c2578384fd5b818601915086601f8301126117d5578384fd5b8135818111156117e3578485fd5b8760208285010111156117f4578485fd5b6020830194508093505050509250925092565b60006020808385031215611819578182fd5b825167ffffffffffffffff80821115611830578384fd5b8185019150601f8681840112611844578485fd5b82518281111561185057fe5b61185d8586830201611ed6565b81815285810190858701885b848110156118db57815188018c603f820112611883578a8bfd5b8981015160408982111561189357fe5b6118a4828a01601f19168d01611ed6565b8281528f828486010111156118b7578d8efd5b6118c6838e8301848701611f3f565b87525050509288019290880190600101611869565b50909a9950505050505050505050565b600080604083850312156118fd578182fd5b823567ffffffffffffffff811115611913578283fd5b830160808186031215611924578283fd5b91506119326020840161175b565b90509250929050565b60008082840361010081121561194f578283fd5b60e081121561195c578283fd5b5082915061193260e0840161175b565b60006020828403121561197d578081fd5b5051919050565b600080600080600080600060c0888a03121561199e578283fd5b87359650602088013567ffffffffffffffff808211156119bc578485fd5b818a0191508a601f8301126119cf578485fd5b8135818111156119dd578586fd5b8b602080830285010111156119f0578586fd5b602083019850809750505050611a0860408901611750565b9350611a1660608901611750565b925060808801359150611a2b60a0890161175b565b905092959891949750929550565b6001600160a01b03169052565b8183526020808401936000918085028201810184845b87811015611a9657848303601f19018952611a778288611efa565b611a82858284611aa3565b9a86019a9450505090830190600101611a5c565b5090979650505050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611ae5816020860160208601611f3f565b601f01601f19169290920160200192915050565b6000611b058283611efa565b60808552611b17608086018284611aa3565b9150506020830135611b2881611f6f565b6001600160a01b031660208501526040838101359085015260609283013592909301919091525090565b8035611b5d81611f6f565b6001600160a01b039081168352602082013590611b7982611f6f565b166020830152604081013562ffffff8116808214611b9657600080fd5b6040840152506060810135611baa81611f6f565b611bb76060840182611a39565b506080810135608083015260a081013560a0830152611bd860c08201611750565b611be560c0840182611a39565b505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082526106716020830184611acd565b600060408252611c656040830185611acd565b82810360208401526001600160a01b038085511682528060208601511660208301525060408401516040820152606084015160806060830152611cab6080830182611acd565b9695505050505050565b60208082526014908201527f4955503a207472616e73666572206661696c6564000000000000000000000000604082015260600190565b6020808252601a908201527f4955503a207472616e7366657220746f6b656e206661696c6564000000000000604082015260600190565b60208082526024908201527f4955503a207472616e7366657220616d6f756e7420657863656564732062616c60408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f6c6f776572207468616e206578706563746564206f7574707574000000000000604082015260600190565b6000602082526106716020830184611af9565b600060408252611ddd6040830185611af9565b905082151560208301529392505050565b60e081016112a08284611b52565b6101008101611e0b8285611b52565b82151560e08301529392505050565b90815260200190565b600084825260406020830152611e3d604083018486611a46565b95945050505050565b600088825260c06020830152611e6060c08301888a611a46565b6001600160a01b0396871660408401529490951660608201526080810192909252151560a090910152949350505050565b6000808335601e19843603018112611ea7578283fd5b83018035915067ffffffffffffffff821115611ec1578283fd5b60200191503681900382131561044057600080fd5b60405181810167ffffffffffffffff81118282101715611ef257fe5b604052919050565b6000808335601e19843603018112611f10578283fd5b830160208101925035905067ffffffffffffffff811115611f3057600080fd5b80360383131561044057600080fd5b60005b83811015611f5a578181015183820152602001611f42565b83811115611f69576000848401525b50505050565b6001600160a01b0381168114611f8457600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220529b2d291db1d31677a67bce0debee55e08f9747d237f255443cac49f0d269f664736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c80638da5cb5b116100a5578063c8dc75e611610074578063d6edf5f011610059578063d6edf5f014610309578063f2fde38b14610329578063fb41be161461034957610134565b8063c8dc75e6146102d4578063d49d5181146102e757610134565b80638da5cb5b1461026c57806392171fd814610281578063a2de021214610294578063bbf6f5a7146102b457610134565b80636da41924116100fc57806372e94bf6116100e157806372e94bf61461020a578063772be2371461021f578063787ca4381461023f57610134565b80636da41924146101d3578063715018a6146101f557610134565b8063017e1619146101395780631cff79cd14610170578063421f4388146101905780636b150c3c146101b157610134565b3661013457005b600080fd5b34801561014557600080fd5b5061015961015436600461193b565b61035e565b604051610167929190611c52565b60405180910390f35b61018361017e366004611787565b610447565b6040516101679190611c3f565b6101a361019e36600461193b565b610678565b604051610167929190611c1b565b3480156101bd57600080fd5b506101c661078a565b6040516101679190611bed565b3480156101df57600080fd5b506101f36101ee36600461176b565b610799565b005b34801561020157600080fd5b506101f361087d565b34801561021657600080fd5b506101c6610948565b34801561022b57600080fd5b5061015961023a366004611984565b61094d565b34801561024b57600080fd5b5061025f61025a36600461176b565b610a56565b6040516101679190611c34565b34801561027857600080fd5b506101c6610a6b565b6101a361028f366004611984565b610a7a565b3480156102a057600080fd5b5061025f6102af36600461176b565b610b92565b3480156102c057600080fd5b506101596102cf3660046118eb565b610bb4565b6101a36102e23660046118eb565b610cf0565b3480156102f357600080fd5b506102fc610e4c565b6040516101679190611e1a565b34801561031557600080fd5b506101f361032436600461176b565b610e52565b34801561033557600080fd5b506101f361034436600461176b565b610f30565b34801561035557600080fd5b506101c6611051565b606061036861172a565b600063421f43888585604051602401610382929190611dfc565b60408051601f19818403018152918152602080830180516001600160e01b031660e09590951b949094179093528051608081019091526002546001600160a01b03168152909250600091818101906103dc9089018961176b565b6001600160a01b03168152602001876080013581526020016304e45aaf8860405160240161040a9190611dee565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b929092179091529052919350909150505b9250929050565b606061045284610b92565b6104a3576040805162461bcd60e51b815260206004820152600c60248201527f4578656375746f723a444e450000000000000000000000000000000000000000604482015290519081900360640190fd5b600080856001600160a01b031685856040518083838082843760405192019450600093509091505080830381855af49150503d8060008114610501576040519150601f19603f3d011682016040523d82523d6000602084013e610506565b606091505b50915091508161066d5760448151101561051f57600080fd5b600481018051909160240190602081101561053957600080fd5b810190808051604051939291908464010000000082111561055957600080fd5b90830190602082018581111561056e57600080fd5b825164010000000081118282018810171561058857600080fd5b82525081516020918201929091019080838360005b838110156105b557818101518382015260200161059d565b50505050905090810190601f1680156105e25780820380516001836020036101000a031916815260200191505b5060405250505060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561063257818101518382015260200161061a565b50505050905090810190601f16801561065f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9150505b9392505050565b60008061069561068b602086018661176b565b8560800135611060565b6002546040517f04e45aaf0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906304e45aaf9034906106e1908990600401611dee565b6020604051808303818588803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610733919061196c565b90508460a001358110156107625760405162461bcd60e51b815260040161075990611d80565b60405180910390fd5b600061077e610777604088016020890161176b565b8387611194565b96919550909350505050565b6002546001600160a01b031681565b6107a161124c565b6001600160a01b03166107b2610a6b565b6001600160a01b03161461080d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610856576040805162461bcd60e51b815260206004820152600b60248201526a04578656375746f723a41360ac1b604482015290519081900360640190fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b61088561124c565b6001600160a01b0316610896610a6b565b6001600160a01b0316146108f1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081565b606061095761172a565b60006392171fd842633b9aca00018a8a8a8a8a8a6040516024016109819796959493929190611e46565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050905060006040518060800160405280600260009054906101000a90046001600160a01b03166001600160a01b03168152602001896001600160a01b03168152602001878152602001635ae401dc42633b9aca00018d8d604051602401610a1593929190611e23565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b9290921790915290529193509091505097509795505050505050565b60016020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080610a878685611060565b6002546040517f5ae401dc00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690635ae401dc903490610adb908f908f908f90600401611e23565b6000604051808303818588803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610b319190810190611807565b905060005b8151811015610b7257818181518110610b4b57fe5b6020026020010151806020019051810190610b66919061196c565b90920191600101610b36565b506000610b80888488611194565b9c929b50919950505050505050505050565b6001600160a01b03811660009081526001602052604090205460ff165b919050565b6060610bbe61172a565b6000610c07610bcd8680611e91565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061125092505050565b50509050600063c8dc75e68686604051602401610c25929190611dca565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050905060006040518060800160405280600260009054906101000a90046001600160a01b03166001600160a01b03168152602001846001600160a01b031681526020018860400135815260200163b858183f89604051602401610cb39190611db7565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b92909217909152905291945090925050509250929050565b60008080610d01610bcd8680611e91565b50509050610d13818660400135611060565b6002546040517fb858183f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063b858183f903490610d5f908a90600401611db7565b6020604051808303818588803b158015610d7857600080fd5b505af1158015610d8c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610db1919061196c565b90506000610dbf8780611e91565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b6000610e0183611281565b90508015610e1957610e1283611289565b9250610e2d565b610e2283611250565b509250610e33915050565b50610df6565b610e3e818489611194565b989297509195505050505050565b60001981565b610e5a61124c565b6001600160a01b0316610e6b610a6b565b6001600160a01b031614610ec6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610f0f576040805162461bcd60e51b815260206004820152600b60248201526a04578656375746f723a41360ac1b604482015290519081900360640190fd5b6001600160a01b03166000908152600160205260409020805460ff19169055565b610f3861124c565b6001600160a01b0316610f49610a6b565b6001600160a01b031614610fa4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610fe95760405162461bcd60e51b8152600401808060200182810382526026815260200180611f886026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3415801561110957506002546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815282916001600160a01b038086169263dd62ed3e926110b7923092911690600401611c01565b60206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611107919061196c565b105b15611190576002546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038481169263095ea7b39261115d929091169060001990600401611c1b565b600060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b505050505b5050565b6003546000906001600160a01b0385811691161480156111b15750815b15611244576003546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632e1a7d4d906111ff908690600401611e1a565b600060405180830381600087803b15801561121957600080fd5b505af115801561122d573d6000803e3d6000fd5b505050506000905061123f81846112a6565b610671565b509192915050565b3390565b6000808061125e84826113f3565b925061126b8460146114bf565b90506112788460176113f3565b91509193909250565b516042111590565b80516060906112a09083906017906016190161157b565b92915050565b6001600160a01b03821661135657804710156112d45760405162461bcd60e51b815260040161075990611d23565b6000336001600160a01b0316826040516112ed90611bea565b60006040518083038185875af1925050503d806000811461132a576040519150601f19603f3d011682016040523d82523d6000602084013e61132f565b606091505b50509050806113505760405162461bcd60e51b815260040161075990611cb5565b50611190565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063a9059cbb9061139d9033908590600401611c1b565b600060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050506113d76116f6565b6111905760405162461bcd60e51b815260040161075990611cec565b60008182601401101561144d576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156114a6576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015611519576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015611572576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f0110156115d5576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b82828401101561162c576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611684576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b6060821580156116a357604051915060008252602082016040526116ed565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156116dc5780518352602092830192016116c4565b5050858452601f01601f1916604052505b50949350505050565b6000803d801561170d576020811461171657611722565b60019150611722565b60206000803e60005191505b501515905090565b604080516080810182526000808252602082018190529181019190915260608082015290565b8035610baf81611f6f565b80358015158114610baf57600080fd5b60006020828403121561177c578081fd5b813561067181611f6f565b60008060006040848603121561179b578182fd5b83356117a681611f6f565b9250602084013567ffffffffffffffff808211156117c2578384fd5b818601915086601f8301126117d5578384fd5b8135818111156117e3578485fd5b8760208285010111156117f4578485fd5b6020830194508093505050509250925092565b60006020808385031215611819578182fd5b825167ffffffffffffffff80821115611830578384fd5b8185019150601f8681840112611844578485fd5b82518281111561185057fe5b61185d8586830201611ed6565b81815285810190858701885b848110156118db57815188018c603f820112611883578a8bfd5b8981015160408982111561189357fe5b6118a4828a01601f19168d01611ed6565b8281528f828486010111156118b7578d8efd5b6118c6838e8301848701611f3f565b87525050509288019290880190600101611869565b50909a9950505050505050505050565b600080604083850312156118fd578182fd5b823567ffffffffffffffff811115611913578283fd5b830160808186031215611924578283fd5b91506119326020840161175b565b90509250929050565b60008082840361010081121561194f578283fd5b60e081121561195c578283fd5b5082915061193260e0840161175b565b60006020828403121561197d578081fd5b5051919050565b600080600080600080600060c0888a03121561199e578283fd5b87359650602088013567ffffffffffffffff808211156119bc578485fd5b818a0191508a601f8301126119cf578485fd5b8135818111156119dd578586fd5b8b602080830285010111156119f0578586fd5b602083019850809750505050611a0860408901611750565b9350611a1660608901611750565b925060808801359150611a2b60a0890161175b565b905092959891949750929550565b6001600160a01b03169052565b8183526020808401936000918085028201810184845b87811015611a9657848303601f19018952611a778288611efa565b611a82858284611aa3565b9a86019a9450505090830190600101611a5c565b5090979650505050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611ae5816020860160208601611f3f565b601f01601f19169290920160200192915050565b6000611b058283611efa565b60808552611b17608086018284611aa3565b9150506020830135611b2881611f6f565b6001600160a01b031660208501526040838101359085015260609283013592909301919091525090565b8035611b5d81611f6f565b6001600160a01b039081168352602082013590611b7982611f6f565b166020830152604081013562ffffff8116808214611b9657600080fd5b6040840152506060810135611baa81611f6f565b611bb76060840182611a39565b506080810135608083015260a081013560a0830152611bd860c08201611750565b611be560c0840182611a39565b505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082526106716020830184611acd565b600060408252611c656040830185611acd565b82810360208401526001600160a01b038085511682528060208601511660208301525060408401516040820152606084015160806060830152611cab6080830182611acd565b9695505050505050565b60208082526014908201527f4955503a207472616e73666572206661696c6564000000000000000000000000604082015260600190565b6020808252601a908201527f4955503a207472616e7366657220746f6b656e206661696c6564000000000000604082015260600190565b60208082526024908201527f4955503a207472616e7366657220616d6f756e7420657863656564732062616c60408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f6c6f776572207468616e206578706563746564206f7574707574000000000000604082015260600190565b6000602082526106716020830184611af9565b600060408252611ddd6040830185611af9565b905082151560208301529392505050565b60e081016112a08284611b52565b6101008101611e0b8285611b52565b82151560e08301529392505050565b90815260200190565b600084825260406020830152611e3d604083018486611a46565b95945050505050565b600088825260c06020830152611e6060c08301888a611a46565b6001600160a01b0396871660408401529490951660608201526080810192909252151560a090910152949350505050565b6000808335601e19843603018112611ea7578283fd5b83018035915067ffffffffffffffff821115611ec1578283fd5b60200191503681900382131561044057600080fd5b60405181810167ffffffffffffffff81118282101715611ef257fe5b604052919050565b6000808335601e19843603018112611f10578283fd5b830160208101925035905067ffffffffffffffff811115611f3057600080fd5b80360383131561044057600080fd5b60005b83811015611f5a578181015183820152602001611f42565b83811115611f69576000848401525b50505050565b6001600160a01b0381168114611f8457600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220529b2d291db1d31677a67bce0debee55e08f9747d237f255443cac49f0d269f664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor",
        "params": {
          "_swaproute02": "uniswap routes contract address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/polygon/uniswap_proxy.sol:UniswapProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2998,
        "contract": "contracts/polygon/uniswap_proxy.sol:UniswapProxy",
        "label": "dappAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2290,
        "contract": "contracts/polygon/uniswap_proxy.sol:UniswapProxy",
        "label": "swaprouter02",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwapRouter2)2265"
      },
      {
        "astId": 2292,
        "contract": "contracts/polygon/uniswap_proxy.sol:UniswapProxy",
        "label": "wmatic",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Wmatic)2273"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapRouter2)2265": {
        "encoding": "inplace",
        "label": "contract ISwapRouter2",
        "numberOfBytes": "20"
      },
      "t_contract(Wmatic)2273": {
        "encoding": "inplace",
        "label": "contract Wmatic",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}