{
  "address": "0xAe85BB3D2ED209736E4d236DcE24624EA1A04249",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter2",
          "name": "_swaproute02",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETH_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "_inspectMultiTrades",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct UniswapProxy.CallSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "_inspectTradeInput",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct UniswapProxy.CallSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "_inspectTradeInputSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct UniswapProxy.CallSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fns",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "multiTrades",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swaprouter02",
      "outputs": [
        {
          "internalType": "contract ISwapRouter2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "tradeInput",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter2.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "tradeInputSingle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmatic",
      "outputs": [
        {
          "internalType": "contract Wmatic",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x89a572fdbce6c66734cd5930bf26c7f0d44499ce1d3e0a0491d1c171474b9f55",
  "receipt": {
    "to": null,
    "from": "0xb5A581c6EA895fBfD0d7529ac04e24Bf12804c2d",
    "contractAddress": "0xAe85BB3D2ED209736E4d236DcE24624EA1A04249",
    "transactionIndex": 11,
    "gasUsed": "1543447",
    "logsBloom": "0x
    "blockHash": "0x746a4b754e88e1b52d16dd863802c803779fa813bb6d6d846cd35f421f82fb9e",
    "transactionHash": "0x89a572fdbce6c66734cd5930bf26c7f0d44499ce1d3e0a0491d1c171474b9f55",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 28060183,
        "transactionHash": "0x89a572fdbce6c66734cd5930bf26c7f0d44499ce1d3e0a0491d1c171474b9f55",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b5a581c6ea895fbfd0d7529ac04e24bf12804c2d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000db56465695f000000000000000000000000000000000000000000000000000d14412ba8f3154200000000000000000000000000000000000000000000152b841fd7ab1237c1ae0000000000000000000000000000000000000000000000000d068bc74389b64200000000000000000000000000000000000000000000152b842d8d0f77a120ae",
        "logIndex": 61,
        "blockHash": "0x746a4b754e88e1b52d16dd863802c803779fa813bb6d6d846cd35f421f82fb9e"
      }
    ],
    "blockNumber": 28060183,
    "cumulativeGasUsed": "3609988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
  ],
  "numDeployments": 2,
  "solcInputHash": "6b0b5fb1e9576b02e579264f9ecd6168",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwapRouter2\",\"name\":\"_swaproute02\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"_inspectMultiTrades\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UniswapProxy.CallSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter2.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"_inspectTradeInput\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UniswapProxy.CallSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter2.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"_inspectTradeInputSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UniswapProxy.CallSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fns\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"multiTrades\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaprouter02\",\"outputs\":[{\"internalType\":\"contract ISwapRouter2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter2.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"tradeInput\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter2.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"tradeInputSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"contract Wmatic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor\",\"params\":{\"_swaproute02\":\"uniswap routes contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/uniswap_proxy.sol\":\"UniswapProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint amount) external;\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x48ab23021f110d2901cc213e835b0a0873a99e5eb41d10142ee1e47b6d54697a\",\"license\":\"MIT\"},\"contracts/polygon/uniswap_proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/Path.sol\\\";\\nimport \\\"../trade_utils.sol\\\";\\n\\ninterface ISwapRouter2 {\\n\\t/// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n\\t/// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n\\t/// @param deadline The time by which this function must be called before failing\\n\\t/// @param data The encoded function data for each of the calls to make to this contract\\n\\t/// @return results The results from each of the calls passed in via data\\n\\tfunction multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n\\t/// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n\\t/// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n\\t/// @param previousBlockhash The expected parent blockHash\\n\\t/// @param data The encoded function data for each of the calls to make to this contract\\n\\t/// @return results The results from each of the calls passed in via data\\n\\t// function multicall(bytes32 previousBlockhash, bytes[] calldata data)\\n\\t// external\\n\\t// payable\\n\\t// returns (bytes[] memory results);\\n\\tstruct ExactInputSingleParams {\\n\\t\\taddress tokenIn;\\n\\t\\taddress tokenOut;\\n\\t\\tuint24 fee;\\n\\t\\taddress recipient;\\n\\t\\tuint256 amountIn;\\n\\t\\tuint256 amountOutMinimum;\\n\\t\\tuint160 sqrtPriceLimitX96;\\n\\t}\\n\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another token\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n\\t/// @return amountOut The amount of the received token\\n\\tfunction exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n\\tstruct ExactInputParams {\\n\\t\\tbytes path;\\n\\t\\taddress recipient;\\n\\t\\tuint256 amountIn;\\n\\t\\tuint256 amountOutMinimum;\\n\\t}\\n\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n\\t/// @return amountOut The amount of the received token\\n\\tfunction exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\tfunction WETH9() external returns(address);\\n}\\n\\ninterface Wmatic is IERC20 {\\n\\tfunction withdraw(uint256 amount) external;\\n}\\n\\ncontract UniswapProxy is Executor {\\n\\tusing Path for bytes;\\n\\t// Variables\\n\\taddress constant public ETH_CONTRACT_ADDRESS = 0x0000000000000000000000000000000000000000;\\n\\tuint constant public MAX = uint(-1);\\n\\tISwapRouter2 public swaprouter02;\\n\\tWmatic public wmatic;\\n\\n\\tstruct CallSummary {\\n\\t\\taddress to;\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t\\tbytes data;\\n\\t}\\n\\n\\t/**\\n     * @dev Contract constructor\\n     * @param _swaproute02 uniswap routes contract address\\n     */\\n\\tconstructor(ISwapRouter2 _swaproute02) payable {\\n\\t\\tswaprouter02 = _swaproute02;\\n\\t\\twmatic = Wmatic(swaprouter02.WETH9());\\n\\t}\\n\\n\\tfunction tradeInputSingle(ISwapRouter2.ExactInputSingleParams calldata params, bool isNative) external payable returns(address, uint) {\\n\\t\\tcheckApproved(IERC20(params.tokenIn), params.amountIn);\\n\\t\\tuint amountOut = swaprouter02.exactInputSingle{value: msg.value}(params);\\n\\t\\trequire(amountOut >= params.amountOutMinimum, \\\"lower than expected output\\\");\\n\\t\\taddress returnToken = withdrawMatic(params.tokenOut, amountOut, isNative);\\n\\t\\treturn (returnToken, amountOut);\\n\\t}\\n\\n\\tfunction tradeInput(ISwapRouter2.ExactInputParams calldata params, bool isNative) external payable returns(address, uint) {\\n\\t\\t(address tokenIn,,) = params.path.decodeFirstPool();\\n\\t\\tcheckApproved(IERC20(tokenIn), params.amountIn);\\n\\t\\tuint amountOut = swaprouter02.exactInput{value: msg.value}(params);\\n\\t\\tbytes memory tempPath = params.path;\\n\\t\\taddress returnToken;\\n\\t\\twhile (true) {\\n\\t\\t\\tbool hasMultiplePools = tempPath.hasMultiplePools();\\n\\t\\t\\t// decide whether to continue or terminate\\n\\t\\t\\tif (hasMultiplePools) {\\n\\t\\t\\t\\ttempPath = tempPath.skipToken();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t(,returnToken,) = tempPath.decodeFirstPool();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturnToken = withdrawMatic(returnToken, amountOut, isNative);\\n\\t\\treturn (returnToken, amountOut);\\n\\t}\\n\\n\\tfunction multiTrades(uint256 deadline, bytes[] calldata data, IERC20 sellToken, address buyToken, uint256 sellAmount, bool isNative) external payable returns(address, uint) {\\n\\t\\tcheckApproved(sellToken, sellAmount);\\n\\t\\tuint256 amountOut;\\n\\t\\tbytes[] memory results = swaprouter02.multicall{value: msg.value}(deadline, data);\\n\\t\\tfor (uint i = 0; i < results.length; i++) {\\n\\t\\t\\tamountOut += abi.decode(results[i], (uint256));\\n\\t\\t}\\n\\t\\taddress returnToken = withdrawMatic(buyToken, amountOut, isNative);\\n\\n\\t\\treturn (returnToken, amountOut);\\n\\t}\\n\\n\\tfunction _inspectTradeInputSingle(ISwapRouter2.ExactInputSingleParams calldata params, bool isNative) external view returns (bytes memory, CallSummary memory) {\\n\\t\\tbytes memory rdata = abi.encodeWithSelector(0x421f4388, params, isNative);\\n\\t\\tCallSummary memory cs = CallSummary(address(swaprouter02), params.tokenIn, params.amountIn,\\n\\t\\t\\tabi.encodeWithSelector(0x04e45aaf, params)\\n\\t\\t);\\n\\t\\treturn (rdata, cs);\\n\\t}\\n\\n\\tfunction _inspectTradeInput(ISwapRouter2.ExactInputParams calldata params, bool isNative) external view returns(bytes memory, CallSummary memory) {\\n\\t\\t(address tokenIn,,) = params.path.decodeFirstPool();\\n\\t\\tbytes memory rdata = abi.encodeWithSelector(0xc8dc75e6, params, isNative);\\n\\t\\tCallSummary memory cs = CallSummary(address(swaprouter02), tokenIn, params.amountIn,\\n\\t\\t\\tabi.encodeWithSelector(0xb858183f, params)\\n\\t\\t);\\n\\t\\treturn (rdata, cs);\\n\\t}\\n\\n\\tfunction _inspectMultiTrades(uint256 deadline, bytes[] calldata data, IERC20 sellToken, address buyToken, uint256 sellAmount, bool isNative) external view returns (bytes memory, CallSummary memory) {\\n\\t\\tbytes memory rdata = abi.encodeWithSelector(0x92171fd8, block.timestamp + 1000000000, data, sellToken, buyToken, sellAmount, isNative);\\n\\t\\tCallSummary memory cs = CallSummary(address(swaprouter02), address(sellToken), sellAmount,\\n\\t\\t\\tabi.encodeWithSelector(0x5ae401dc, block.timestamp + 1000000000, data)\\n\\t\\t);\\n\\t\\treturn (rdata, cs);\\n\\t}\\n\\n\\tfunction checkApproved(IERC20 srcToken, uint256 amount) internal {\\n\\t\\tif (msg.value == 0 && srcToken.allowance(address(this), address(swaprouter02)) < amount) {\\n\\t\\t\\tsrcToken.approve(address(swaprouter02), MAX);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawMatic(address tokenOut, uint256 amountOut, bool isNative) internal returns(address returnToken) {\\n\\t\\tif (tokenOut == address(wmatic) && isNative) {\\n\\t\\t\\t// convert wmatic to matic\\n\\t\\t\\t// recipient in params must be this contract\\n\\t\\t\\twmatic.withdraw(amountOut);\\n\\t\\t\\treturnToken = ETH_CONTRACT_ADDRESS;\\n\\t\\t\\ttransfer(returnToken, amountOut);\\n\\t\\t} else {\\n\\t\\t\\treturnToken = tokenOut;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction transfer(address token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount, \\\"IUP: transfer amount exceeds balance\\\");\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"IUP: transfer failed\\\");\\n\\t\\t} else {\\n\\t\\t\\tIERC20(token).transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess(), \\\"IUP: transfer token failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n\\tfunction checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n\\n\\t/**\\n     * @dev Payable receive function to receive Ether from oldVault when migrating\\n     */\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x11aa626b49ebaea63e68769108b5bd55bbb17887d935b449c1ac2d377552e410\",\"license\":\"GPL-2.0-or-later\"},\"contracts/trade_utils.sol\":{\"content\":\"pragma solidity >=0.6.12 <=0.8.9;\\n\\nimport './IERC20.sol';\\n\\ncontract TradeUtils {\\n\\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n\\tfunction balanceOf(IERC20 token) internal view returns (uint256) {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\treturn address(this).balance;\\n\\t\\t}\\n        return token.balanceOf(address(this));\\n    }\\n\\n\\tfunction transfer(IERC20 token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount);\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n          \\trequire(success);\\n\\t\\t} else {\\n\\t\\t\\ttoken.transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(IERC20 token, address proxy, uint amount) internal {\\n\\t\\tif (token != ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\ttoken.approve(proxy, 0);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t\\ttoken.approve(proxy, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n}\\n\\nabstract contract Executor {\\n    function execute(address fns, bytes calldata data) external payable returns (bytes memory) {\\n        (bool success, bytes memory result) = fns.delegatecall(data);\\n        if (!success) {\\n        \\t// Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01c9dda3ecf4ec7e7a0ac459221eb453638be376e0d421e82b8c2d8bffaa3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c8063772be23711610074578063c8dc75e61161004e578063c8dc75e6146101ce578063d49d5181146101e1578063fb41be1614610203576100c7565b8063772be2371461017b57806392171fd81461019b578063bbf6f5a7146101ae576100c7565b8063421f4388116100a5578063421f4388146101235780636b150c3c1461014457806372e94bf614610166576100c7565b8063017e1619146100cc5780631cff79cd14610103576100c7565b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e736600461139f565b610218565b6040516100fa9291906116ab565b60405180910390f35b6101166101113660046111eb565b610301565b6040516100fa9190611698565b61013661013136600461139f565b6104d8565b6040516100fa92919061167f565b34801561015057600080fd5b506101596105ea565b6040516100fa9190611651565b34801561017257600080fd5b506101596105f9565b34801561018757600080fd5b506100ec6101963660046113e8565b6105fe565b6101366101a93660046113e8565b610705565b3480156101ba57600080fd5b506100ec6101c936600461134f565b610819565b6101366101dc36600461134f565b610953565b3480156101ed57600080fd5b506101f6610aaf565b6040516100fa9190611873565b34801561020f57600080fd5b50610159610ab5565b606061022261118e565b600063421f4388858560405160240161023c929190611855565b60408051601f19818403018152918152602080830180516001600160e01b031660e09590951b94909417909352805160808101909152600080546001600160a01b03168252919350909181810190610296908901896111cf565b6001600160a01b03168152602001876080013581526020016304e45aaf886040516024016102c49190611847565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b929092179091529052919350909150505b9250929050565b6060600080856001600160a01b031685856040518083838082843760405192019450600093509091505080830381855af49150503d8060008114610361576040519150601f19603f3d011682016040523d82523d6000602084013e610366565b606091505b5091509150816104cd5760448151101561037f57600080fd5b600481018051909160240190602081101561039957600080fd5b81019080805160405193929190846401000000008211156103b957600080fd5b9083019060208201858111156103ce57600080fd5b82516401000000008111828201881017156103e857600080fd5b82525081516020918201929091019080838360005b838110156104155781810151838201526020016103fd565b50505050905090810190601f1680156104425780820380516001836020036101000a031916815260200191505b5060405250505060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561049257818101518382015260200161047a565b50505050905090810190601f1680156104bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9150505b9392505050565b6000806104f56104eb60208601866111cf565b8560800135610ac4565b600080546040517f04e45aaf0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906304e45aaf903490610541908990600401611847565b6020604051808303818588803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061059391906113d0565b90508460a001358110156105c25760405162461bcd60e51b81526004016105b9906117d9565b60405180910390fd5b60006105de6105d760408801602089016111cf565b8387610bf8565b96919550909350505050565b6000546001600160a01b031681565b600081565b606061060861118e565b60006392171fd842633b9aca00018a8a8a8a8a8a604051602401610632979695949392919061189f565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505090506000604051806080016040528060008054906101000a90046001600160a01b03166001600160a01b03168152602001896001600160a01b03168152602001878152602001635ae401dc42633b9aca00018d8d6040516024016106c49392919061187c565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b9290921790915290529193509091505097509795505050505050565b6000806107128685610ac4565b600080546040517f5ae401dc00000000000000000000000000000000000000000000000000000000815282916001600160a01b031690635ae401dc903490610762908f908f908f9060040161187c565b6000604051808303818588803b15801561077b57600080fd5b505af115801561078f573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526107b8919081019061126b565b905060005b81518110156107f9578181815181106107d257fe5b60200260200101518060200190518101906107ed91906113d0565b909201916001016107bd565b506000610807888488610bf8565b9c929b50919950505050505050505050565b606061082361118e565b600061086c61083286806118ea565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cb092505050565b50509050600063c8dc75e6868660405160240161088a929190611823565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505090506000604051806080016040528060008054906101000a90046001600160a01b03166001600160a01b03168152602001846001600160a01b031681526020018860400135815260200163b858183f896040516024016109169190611810565b60408051601f198184030181529190526020810180516001600160e01b031660e09390931b92909217909152905291945090925050509250929050565b6000808061096461083286806118ea565b50509050610976818660400135610ac4565b600080546040517fb858183f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b858183f9034906109c2908a90600401611810565b6020604051808303818588803b1580156109db57600080fd5b505af11580156109ef573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a1491906113d0565b90506000610a2287806118ea565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b6000610a6483610ce1565b90508015610a7c57610a7583610ced565b9250610a90565b610a8583610cb0565b509250610a96915050565b50610a59565b610aa1818489610bf8565b989297509195505050505050565b60001981565b6001546001600160a01b031681565b34158015610b6d57506000546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815282916001600160a01b038086169263dd62ed3e92610b1b923092911690600401611665565b60206040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b91906113d0565b105b15610bf4576000546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038481169263095ea7b392610bc192909116906000199060040161167f565b600060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b505050505b5050565b6001546000906001600160a01b038581169116148015610c155750815b15610ca8576001546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632e1a7d4d90610c63908690600401611873565b600060405180830381600087803b158015610c7d57600080fd5b505af1158015610c91573d6000803e3d6000fd5b5050505060009050610ca38184610d0a565b6104d1565b509192915050565b60008080610cbe8482610e57565b9250610ccb846014610f23565b9050610cd8846017610e57565b91509193909250565b8051604211155b919050565b8051606090610d0490839060179060161901610fdf565b92915050565b6001600160a01b038216610dba5780471015610d385760405162461bcd60e51b81526004016105b99061177c565b6000336001600160a01b031682604051610d519061164e565b60006040518083038185875af1925050503d8060008114610d8e576040519150601f19603f3d011682016040523d82523d6000602084013e610d93565b606091505b5050905080610db45760405162461bcd60e51b81526004016105b99061170e565b50610bf4565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063a9059cbb90610e01903390859060040161167f565b600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b50505050610e3b61115a565b610bf45760405162461bcd60e51b81526004016105b990611745565b600081826014011015610eb1576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610f0a576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610f7d576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610fd6576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015611039576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015611090576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b818301845110156110e8576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b6060821580156111075760405191506000825260208201604052611151565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611140578051835260209283019201611128565b5050858452601f01601f1916604052505b50949350505050565b6000803d8015611171576020811461117a57611186565b60019150611186565b60206000803e60005191505b501515905090565b604080516080810182526000808252602082018190529181019190915260608082015290565b8035610ce8816119c8565b80358015158114610ce857600080fd5b6000602082840312156111e0578081fd5b81356104d1816119c8565b6000806000604084860312156111ff578182fd5b833561120a816119c8565b9250602084013567ffffffffffffffff80821115611226578384fd5b818601915086601f830112611239578384fd5b813581811115611247578485fd5b876020828501011115611258578485fd5b6020830194508093505050509250925092565b6000602080838503121561127d578182fd5b825167ffffffffffffffff80821115611294578384fd5b8185019150601f86818401126112a8578485fd5b8251828111156112b457fe5b6112c1858683020161192f565b81815285810190858701885b8481101561133f57815188018c603f8201126112e7578a8bfd5b898101516040898211156112f757fe5b611308828a01601f19168d0161192f565b8281528f8284860101111561131b578d8efd5b61132a838e8301848701611998565b875250505092880192908801906001016112cd565b50909a9950505050505050505050565b60008060408385031215611361578182fd5b823567ffffffffffffffff811115611377578283fd5b830160808186031215611388578283fd5b9150611396602084016111bf565b90509250929050565b6000808284036101008112156113b3578283fd5b60e08112156113c0578283fd5b5082915061139660e084016111bf565b6000602082840312156113e1578081fd5b5051919050565b600080600080600080600060c0888a031215611402578283fd5b87359650602088013567ffffffffffffffff80821115611420578485fd5b818a0191508a601f830112611433578485fd5b813581811115611441578586fd5b8b60208083028501011115611454578586fd5b60208301985080975050505061146c604089016111b4565b935061147a606089016111b4565b92506080880135915061148f60a089016111bf565b905092959891949750929550565b6001600160a01b03169052565b8183526020808401936000918085028201810184845b878110156114fa57848303601f190189526114db8288611953565b6114e6858284611507565b9a86019a94505050908301906001016114c0565b5090979650505050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611549816020860160208601611998565b601f01601f19169290920160200192915050565b60006115698283611953565b6080855261157b608086018284611507565b915050602083013561158c816119c8565b6001600160a01b031660208501526040838101359085015260609283013592909301919091525090565b80356115c1816119c8565b6001600160a01b0390811683526020820135906115dd826119c8565b166020830152604081013562ffffff81168082146115fa57600080fd5b604084015250606081013561160e816119c8565b61161b606084018261149d565b506080810135608083015260a081013560a083015261163c60c082016111b4565b61164960c084018261149d565b505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082526104d16020830184611531565b6000604082526116be6040830185611531565b82810360208401526001600160a01b0380855116825280602086015116602083015250604084015160408201526060840151608060608301526117046080830182611531565b9695505050505050565b60208082526014908201527f4955503a207472616e73666572206661696c6564000000000000000000000000604082015260600190565b6020808252601a908201527f4955503a207472616e7366657220746f6b656e206661696c6564000000000000604082015260600190565b60208082526024908201527f4955503a207472616e7366657220616d6f756e7420657863656564732062616c60408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f6c6f776572207468616e206578706563746564206f7574707574000000000000604082015260600190565b6000602082526104d1602083018461155d565b600060408252611836604083018561155d565b905082151560208301529392505050565b60e08101610d0482846115b6565b610100810161186482856115b6565b82151560e08301529392505050565b90815260200190565b6000848252604060208301526118966040830184866114aa565b95945050505050565b600088825260c060208301526118b960c08301888a6114aa565b6001600160a01b0396871660408401529490951660608201526080810192909252151560a090910152949350505050565b6000808335601e19843603018112611900578283fd5b83018035915067ffffffffffffffff82111561191a578283fd5b6020019150368190038213156102fa57600080fd5b60405181810167ffffffffffffffff8111828210171561194b57fe5b604052919050565b6000808335601e19843603018112611969578283fd5b830160208101925035905067ffffffffffffffff81111561198957600080fd5b8036038313156102fa57600080fd5b60005b838110156119b357818101518382015260200161199b565b838111156119c2576000848401525b50505050565b6001600160a01b03811681146119dd57600080fd5b5056fea26469706673582212202c45b3ddf7dee71650322e74acec0e15c76a8471278da473a886390760d4bb5264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor",
        "params": {
          "_swaproute02": "uniswap routes contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2180,
        "contract": "contracts/polygon/uniswap_proxy.sol:UniswapProxy",
        "label": "swaprouter02",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwapRouter2)2155"
      },
      {
        "astId": 2182,
        "contract": "contracts/polygon/uniswap_proxy.sol:UniswapProxy",
        "label": "wmatic",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Wmatic)2163"
      }
    ],
    "types": {
      "t_contract(ISwapRouter2)2155": {
        "encoding": "inplace",
        "label": "contract ISwapRouter2",
        "numberOfBytes": "20"
      },
      "t_contract(Wmatic)2163": {
        "encoding": "inplace",
        "label": "contract Wmatic",
        "numberOfBytes": "20"
      }
    }
  }
}