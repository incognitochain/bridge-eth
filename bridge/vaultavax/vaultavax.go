// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vault

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VaultAURORABurnInstData is an auto generated low-level Go binding around an user-defined struct.
type VaultAURORABurnInstData struct {
	Meta   uint8
	Shard  uint8
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Itx    [32]byte
}

// VaultAURORARedepositOptions is an auto generated low-level Go binding around an user-defined struct.
type VaultAURORARedepositOptions struct {
	RedepositToken      common.Address
	RedepositIncAddress []byte
	WithdrawAddress     common.Address
}

// VaultMetaData contains all meta data concerning the Vault contract.
var VaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"externalCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"redepositToken\",\"type\":\"address\"}],\"name\":\"_callExternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"deposit_V2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"depositERC20_V2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"DepositV2\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"ExecuteFnLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"executeWithBurnProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"redepositIncAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"name\":\"Redeposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"regulatorSig\",\"type\":\"bytes\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UpdateTokenTotal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"upgradeVaultStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_CALL_REQUEST_METADATA_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_REQUEST_METADATA_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_TO_CONTRACT_REQUEST_METADATA_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURRENT_NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDepositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isSigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structVaultAURORA.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseCalldataFromBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structVaultAURORA.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"redepositToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"redepositIncAddress\",\"type\":\"bytes\"},{\"internalType\":\"addresspayable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"internalType\":\"structVaultAURORA.RedepositOptions\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageLayoutVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedToSCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614f6f806100206000396000f3fe6080604052600436106102345760003560e01c8063995fac111161012e578063cde0a4f8116100ab578063dd8fee141161006f578063dd8fee1414610651578063e4bd707414610666578063f75b98ce14610686578063fa84702e146106a6578063fee8efda146106bb5761023b565b8063cde0a4f8146105c7578063cf54aaa0146105e7578063d6a1fe3b14610607578063d7200eb11461061c578063dca40d9e146106315761023b565b8063bd835c42116100f2578063bd835c421461054a578063bda9b5091461055f578063c0c53b8b1461057f578063c34c08e51461059f578063c791d705146105b45761023b565b8063995fac11146104b5578063a3f5d8cc146104d5578063a73b1532146104ea578063a807b5bb1461050a578063b8237dbb1461052a5761023b565b80636304541c116101bc57806373bf96511161018057806373bf965114610422578063749c5f86146104425780637e16e6e11461046257806384b3ac031461048f5780638588ccd6146104a25761023b565b80636304541c1461037157806365b5a00f1461039e57806366945b31146103be5780636f2cbc48146103ed57806370a08231146104025761023b565b8063392e53cd11610203578063392e53cd146102d85780633ed1b376146102ed5780633fec6b401461030d578063568c04fd1461033a57806358bc83371461035c5761023b565b8063145e2a6b146102405780631beb7de2146102625780631ea1940e146102825780631ed4276d146102b85761023b565b3661023b57005b600080fd5b34801561024c57600080fd5b5061026061025b366004613ef5565b6106db565b005b34801561026e57600080fd5b5061026061027d36600461446e565b6107c4565b34801561028e57600080fd5b506102a261029d3660046141eb565b610c21565b6040516102af9190614ac5565b60405180910390f35b3480156102c457600080fd5b506102a26102d3366004614167565b610c36565b3480156102e457600080fd5b506102a2610e57565b3480156102f957600080fd5b50610260610308366004614242565b610e67565b34801561031957600080fd5b5061032d61032836600461442c565b611395565b6040516102af91906148cc565b34801561034657600080fd5b5061034f611424565b6040516102af9190614e49565b34801561036857600080fd5b5061032d611429565b34801561037d57600080fd5b5061039161038c366004613dfe565b61142e565b6040516102af9190614b7d565b3480156103aa57600080fd5b506103916103b9366004613ebd565b611440565b3480156103ca57600080fd5b506103de6103d9366004614203565b61145d565b6040516102af93929190614d4d565b3480156103f957600080fd5b5061034f611640565b34801561040e57600080fd5b5061039161041d366004613dfe565b611645565b34801561042e57600080fd5b5061026061043d36600461446e565b611719565b34801561044e57600080fd5b506102a261045d3660046141eb565b611a91565b34801561046e57600080fd5b5061048261047d366004614380565b611b48565b6040516102af9190614d3f565b61026061049d366004614686565b611bca565b6102606104b0366004613ffd565b611cf3565b3480156104c157600080fd5b506102a26104d0366004613ebd565b612192565b3480156104e157600080fd5b506102a26121b2565b3480156104f657600080fd5b50610260610505366004613ebd565b6121c2565b34801561051657600080fd5b506102606105253660046140d5565b612258565b34801561053657600080fd5b506102606105453660046140d5565b612537565b34801561055657600080fd5b5061034f612825565b34801561056b57600080fd5b5061039161057a366004613f7f565b61282a565b34801561058b57600080fd5b5061026061059a366004613f35565b612a4e565b3480156105ab57600080fd5b5061032d612b23565b6102606105c2366004614686565b612b32565b3480156105d357600080fd5b506102606105e2366004613dfe565b612c46565b3480156105f357600080fd5b5061034f610602366004613dfe565b612cc7565b34801561061357600080fd5b50610391612d81565b34801561062857600080fd5b5061034f612d87565b34801561063d57600080fd5b506102a261064c3660046141eb565b612d8c565b34801561065d57600080fd5b5061032d612da1565b34801561067257600080fd5b506102a26106813660046141eb565b612db0565b34801561069257600080fd5b506103916106a1366004613ebd565b612e17565b3480156106b257600080fd5b5061032d612f43565b3480156106c757600080fd5b506102606106d636600461459f565b612f52565b3033146106e860146131be565b9061070f5760405162461bcd60e51b81526004016107069190614bc3565b60405180910390fd5b506001600160a01b03831661072d5761072882826132e7565b6107bf565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061075b9085908590600401614904565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b50505050610795613383565b61079f60046131be565b906107bd5760405162461bcd60e51b81526004016107069190614bc3565b505b505050565b600554600160a01b900460ff166107db60016131be565b906107f95760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b1916905589516082111561081760066131be565b906108355760405162461bcd60e51b81526004016107069190614bc3565b5061083e613b36565b6108478b611b48565b805190915060ff1660a01480156108655750806020015160ff166001145b61086f60066131be565b9061088d5760405162461bcd60e51b81526004016107069190614bc3565b5061089b8160a00151611a91565b156108a660056131be565b906108c45760405162461bcd60e51b81526004016107069190614bc3565b5060a081015160009081526020819052604090819020805460ff191660011790558101516001600160a01b031661094f576040808201516001600160a01b0316600090815260046020522054608082015161091e916133b7565b47101561092b60076131be565b906109495760405162461bcd60e51b81526004016107069190614bc3565b50610a61565b600061095e8260400151612cc7565b905060098160ff16111561098b5760808201516109859060081960ff841601600a0a61341d565b60808301525b6040808301516001600160a01b031660009081526004602052205460808301516109b4916133b7565b82604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109e491906148cc565b60206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3491906146fc565b1015610a4060076131be565b90610a5e5760405162461bcd60e51b81526004016107069190614bc3565b50505b610a738b8b8b8b8b8b8b8b8b8b61347f565b60408101516001600160a01b0316610b1c57600081606001516001600160a01b03168260800151604051610aa6906148c9565b60006040518083038185875af1925050503d8060008114610ae3576040519150601f19603f3d011682016040523d82523d6000602084013e610ae8565b606091505b5050905080610af760046131be565b90610b155760405162461bcd60e51b81526004016107069190614bc3565b5050610bba565b80604001516001600160a01b031663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610b56929190614904565b600060405180830381600087803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b50505050610b90613383565b610b9a60046131be565b90610bb85760405162461bcd60e51b81526004016107069190614bc3565b505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610bf9939291906148e0565b60405180910390a150506005805460ff60a01b1916600160a01b179055505050505050505050565b60016020526000908152604090205460ff1681565b6005546000906001600160a01b031615801590610c5d57506005546001600160a01b031633145b610c67600c6131be565b90610c855760405162461bcd60e51b81526004016107069190614bc3565b50838214610c93600a6131be565b90610cb15760405162461bcd60e51b81526004016107069190614bc3565b50600560009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0057600080fd5b505afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3891906141cf565b610d42600d6131be565b90610d605760405162461bcd60e51b81526004016107069190614bc3565b5060005b84811015610e0e57610dc7848483818110610d7b57fe5b9050602002013560046000898986818110610d9257fe5b9050602002016020810190610da79190613dfe565b6001600160a01b03168152602081019190915260400160002054906133b7565b60046000888885818110610dd757fe5b9050602002016020810190610dec9190613dfe565b6001600160a01b03168152602081019190915260400160002055600101610d64565b507f6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f85858585604051610e449493929190614a46565b60405180910390a1506001949350505050565b600554600160a81b900460ff1681565b600554600160a01b900460ff16610e7e60016131be565b90610e9c5760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b19169055610eb2613b36565b610eba613b6b565b6060610ec68e8e61145d565b925092509250610ed98360a00151611a91565b15610ee460056131be565b90610f025760405162461bcd60e51b81526004016107069190614bc3565b5060a083015160009081526020819052604090819020805460ff191660011790558301516001600160a01b0316610f8d576040808401516001600160a01b03166000908152600460205220546080840151610f5c916133b7565b471015610f6960076131be565b90610f875760405162461bcd60e51b81526004016107069190614bc3565b5061109f565b6000610f9c8460400151612cc7565b905060098160ff161115610fc9576080840151610fc39060081960ff841601600a0a61341d565b60808501525b6040808501516001600160a01b03166000908152600460205220546080850151610ff2916133b7565b84604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161102291906148cc565b60206040518083038186803b15801561103a57600080fd5b505afa15801561104e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107291906146fc565b101561107e60076131be565b9061109c5760405162461bcd60e51b81526004016107069190614bc3565b50505b6110f58e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8d8d61347f565b604080840151606085015160808601518551935163bda9b50960e01b8152309463bda9b5099461112f949093909290918891600401614937565b602060405180830381600087803b15801561114957600080fd5b505af1925050508015611179575060408051601f3d908101601f19168201909252611176918101906146fc565b60015b611212573d8080156111a7576040519150601f19603f3d011682016040523d82523d6000602084013e6111ac565b606091505b506111c98460400151846020015186608001518760a0015161357a565b7fdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d4168460a0015160008360405161120193929190614b86565b60405180910390a150505050611375565b60408301516001600160a01b03166112415761123c83600001518460200151838760a0015161357a565b611370565b8251604080850151905163145e2a6b60e01b8152309263145e2a6b9261126b9286906004016148e0565b600060405180830381600087803b15801561128557600080fd5b505af1925050508015611296575060015b61132c573d8080156112c4576040519150601f19603f3d011682016040523d82523d6000602084013e6112c9565b606091505b506112e284600001518560200151848860a0015161357a565b7fdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d4168560a0015160018360405161131a93929190614b86565b60405180910390a15050505050611375565b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360000151846040015183604051611367939291906148e0565b60405180910390a15b505050505b50506005805460ff60a01b1916600160a01b179055505050505050505050565b6000806000806020860151915060408601519250856040815181106113b657fe5b602001015160f81c60f81b60f81c601b019050600185828486604051600081526020016040526040516113ec9493929190614ba5565b6020604051602081039080840390855afa15801561140e573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60a081565b600081565b60046020526000908152604090205481565b600260209081526000928352604080842090915290825290205481565b611465613b36565b61146d613b6b565b606061012884101561147f60136131be565b9061149d5760405162461bcd60e51b81526004016107069190614bc3565b506114a6613b36565b858560008181106114b357fe5b919091013560f81c825250858560018181106114cb57fe5b919091013560f81c6020830152506000868660028181106114e857fe5b845192013560f81c92505060ff16609e14801561150c5750816020015160ff166001145b801561151b575060ff81166006145b61152560136131be565b906115435760405162461bcd60e51b81526004016107069190614bc3565b505061154d613b6b565b61155b60c36003888a614ebf565b8101906115689190613e21565b6001600160a01b03908116604088810191909152918116875260a0880192909252608087019290925291821660608601529116908301526115ae61012860c3888a614ebf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602082015281816115f788610128818c614ebf565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250969e959d50919b50939950505050505050505050565b60a281565b60006001600160a01b03821661165c575047611714565b61166582613670565b6116815760405162461bcd60e51b815260040161070690614ca1565b6040516370a0823160e01b81526001600160a01b038316906370a08231906116ad9030906004016148cc565b60206040518083038186803b1580156116c557600080fd5b505afa9250505080156116f5575060408051601f3d908101601f191682019092526116f2918101906146fc565b60015b6117115760405162461bcd60e51b815260040161070690614d08565b90505b919050565b600554600160a01b900460ff1661173060016131be565b9061174e5760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b1916905589516082111561176c60066131be565b9061178a5760405162461bcd60e51b81526004016107069190614bc3565b50611793613b36565b61179c8b611b48565b805190915060ff1660a21480156117ba5750806020015160ff166001145b6117c460066131be565b906117e25760405162461bcd60e51b81526004016107069190614bc3565b506117f08160a00151611a91565b156117fb60056131be565b906118195760405162461bcd60e51b81526004016107069190614bc3565b5060a081015160009081526020819052604090819020805460ff191660011790558101516001600160a01b03166118a4576040808201516001600160a01b03166000908152600460205220546080820151611873916133b7565b47101561188060076131be565b9061189e5760405162461bcd60e51b81526004016107069190614bc3565b506119b6565b60006118b38260400151612cc7565b905060098160ff1611156118e05760808201516118da9060081960ff841601600a0a61341d565b60808301525b6040808301516001600160a01b03166000908152600460205220546080830151611909916133b7565b82604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161193991906148cc565b60206040518083038186803b15801561195157600080fd5b505afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198991906146fc565b101561199560076131be565b906119b35760405162461bcd60e51b81526004016107069190614bc3565b50505b6119c88b8b8b8b8b8b8b8b8b8b61347f565b608081015160608201516001600160a01b0390811660009081526002602090815260408083208187015190941683529290522054611a05916133b7565b60608201516001600160a01b03908116600090815260026020908152604080832081870180518616855290835281842095909555608086015194519093168252600490522054611a54916133b7565b6040918201516001600160a01b031660009081526004602052919091205550506005805460ff60a01b1916600160a01b1790555050505050505050565b60008181526020819052604081205460ff1615611ab057506001611714565b6005546001600160a01b0316611ac857506000611714565b600554604051633a4e2fc360e11b81526001600160a01b039091169063749c5f8690611af8908590600401614b7d565b60206040518083038186803b158015611b1057600080fd5b505afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171191906141cf565b611b50613b36565b611b58613b36565b82600081518110611b6557fe5b016020015160f81c8152825183906001908110611b7e57fe5b0160209081015160f81c9082015260228301516042840151606285015160828601516001600160a01b039384166040860152929091166060840152608083015260a08201529050919050565b600554600160a01b900460ff16611be160016131be565b90611bff5760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b191690556b033b2e3c9fd0803ce8000000471115611c2760026131be565b90611c455760405162461bcd60e51b81526004016107069190614bc3565b50611c868383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061367692505050565b7fd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab38516000868634611cb660066136e3565b604051611cc7959493929190614a0d565b60405180910390a1611cd960066136e7565b50506005805460ff60a01b1916600160a01b179055505050565b600554600160a01b900460ff16611d0a60016131be565b90611d285760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b191690556000611da5611d49600a8d88888f6136f0565b8a8a8a8a604051602001611d61959493929190614dba565b60408051601f198184030181526020601f87018190048102840181019092528583529190869086908190840183828082843760009201919091525061377692505050565b9050611db1818c61381a565b6001600160a01b038082166000908152600260209081526040808320938f16835292905220548a1115611de460086131be565b90611e025760405162461bcd60e51b81526004016107069190614bc3565b506001600160a01b038b16600090815260046020526040902054611e26908b61395c565b6001600160a01b03808d1660008181526004602090815260408083209590955592851681526002835283812091815291522054611e63908b61395c565b60026000836001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002081905550600034905060006001600160a01b03168c6001600160a01b03161415611ee057611ed9818c6133b7565b9050612021565b6040516370a0823160e01b81528b906001600160a01b038e16906370a0823190611f0e9030906004016148cc565b60206040518083038186803b158015611f2657600080fd5b505afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e91906146fc565b1015611f6a60076131be565b90611f885760405162461bcd60e51b81526004016107069190614bc3565b5060095460405163a9059cbb60e01b81526001600160a01b038e81169263a9059cbb92611fbd92909116908f90600401614904565b600060405180830381600087803b158015611fd757600080fd5b505af1158015611feb573d6000803e3d6000fd5b50505050611ff7613383565b61200160046131be565b9061201f5760405162461bcd60e51b81526004016107069190614bc3565b505b60006120738b838b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d6139b2565b90506120d08160026000866001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b03168152602001908152602001600020546133b790919063ffffffff16565b60026000856001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000208190555061215481600460008e6001600160a01b03166001600160a01b03168152602001908152602001600020546133b790919063ffffffff16565b6001600160a01b03909b1660009081526004602052604090209a909a5550506005805460ff60a01b1916600160a01b17905550505050505050505050565b600360209081526000928352604080842090915290825290205460ff1681565b600554600160a01b900460ff1681565b600854156121d060126131be565b906121ee5760405162461bcd60e51b81526004016107069190614bc3565b5060026008556007546001600160a01b03161561220b60116131be565b906122295760405162461bcd60e51b81526004016107069190614bc3565b50600780546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b600554600160a01b900460ff1661226f60016131be565b9061228d5760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526122db91859190859085908190840183828082843760009201919091525061367692505050565b8660006122e782612cc7565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161231791906148cc565b60206040518083038186803b15801561232f57600080fd5b505afa158015612343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236791906146fc565b90508089600960ff851611156123a25760098460ff1603600a0a818161238957fe5b04905060098460ff1603600a0a838161239e57fe5b0492505b670de0b6b3a764000081111580156123c25750670de0b6b3a76400008311155b80156123df5750670de0b6b3a76400006123dc82856133b7565b11155b6123e960036131be565b906124075760405162461bcd60e51b81526004016107069190614bc3565b50846001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b8152600401612438939291906148e0565b600060405180830381600087803b15801561245257600080fd5b505af1158015612466573d6000803e3d6000fd5b50505050612472613383565b61247c60046131be565b9061249a5760405162461bcd60e51b81526004016107069190614bc3565b508a6124af836124a98f611645565b9061395c565b146124ba600a6131be565b906124d85760405162461bcd60e51b81526004016107069190614bc3565b507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8c8b8b8460405161250e94939291906149d7565b60405180910390a150506005805460ff60a01b1916600160a01b17905550505050505050505050565b600554600160a01b900460ff1661254e60016131be565b9061256c5760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b19169055604080516020601f84018190048102820181019092528281526125ba91859190859085908190840183828082843760009201919091525061367692505050565b8660006125c682612cc7565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016125f691906148cc565b60206040518083038186803b15801561260e57600080fd5b505afa158015612622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264691906146fc565b90508089600960ff851611156126815760098460ff1603600a0a818161266857fe5b04905060098460ff1603600a0a838161267d57fe5b0492505b670de0b6b3a764000081111580156126a15750670de0b6b3a76400008311155b80156126be5750670de0b6b3a76400006126bb82856133b7565b11155b6126c860036131be565b906126e65760405162461bcd60e51b81526004016107069190614bc3565b50846001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b8152600401612717939291906148e0565b600060405180830381600087803b15801561273157600080fd5b505af1158015612745573d6000803e3d6000fd5b50505050612751613383565b61275b60046131be565b906127795760405162461bcd60e51b81526004016107069190614bc3565b508a612788836124a98f611645565b14612793600a6131be565b906127b15760405162461bcd60e51b81526004016107069190614bc3565b507fd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab38518c8b8b846127e160066136e3565b6040516127f2959493929190614a0d565b60405180910390a161280460066136e7565b50506005805460ff60a01b1916600160a01b17905550505050505050505050565b609e81565b600030331461283960146131be565b906128575760405162461bcd60e51b81526004016107069190614bc3565b50600061286383611645565b9050606060006001600160a01b03891661287e575085612916565b60095460405163a9059cbb60e01b81526001600160a01b038b81169263a9059cbb926128b292909116908b90600401614904565b600060405180830381600087803b1580156128cc57600080fd5b505af11580156128e0573d6000803e3d6000fd5b505050506128ec613383565b6128f660046131be565b906129145760405162461bcd60e51b81526004016107069190614bc3565b505b600954604051631cff79cd60e01b81526001600160a01b0390911690631cff79cd90839061294a908c908b9060040161497c565b6000604051808303818588803b15801561296357600080fd5b505af1158015612977573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526129a091908101906143ba565b915081516040146129b160096131be565b906129cf5760405162461bcd60e51b81526004016107069190614bc3565b50600080838060200190518101906129e79190613e90565b91509150866001600160a01b0316826001600160a01b0316148015612a17575080612a15866124a98a611645565b145b612a2160096131be565b90612a3f5760405162461bcd60e51b81526004016107069190614bc3565b509a9950505050505050505050565b600554600160a81b900460ff1615612a66600f6131be565b90612a845760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b1960ff60a81b196001600160a01b038088166001600160a01b03199094169390931716600160a81b1716600160a01b179091556007541615612ad060116131be565b90612aee5760405162461bcd60e51b81526004016107069190614bc3565b50600780546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055506002600855565b6009546001600160a01b031681565b600554600160a01b900460ff16612b4960016131be565b90612b675760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b191690556b033b2e3c9fd0803ce8000000471115612b8f60026131be565b90612bad5760405162461bcd60e51b81526004016107069190614bc3565b50612bee8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061367692505050565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e6000868634604051612c2494939291906149d7565b60405180910390a150506005805460ff60a01b1916600160a01b179055505050565b6007546001600160a01b03161580612c6857506007546001600160a01b031633145b8015612c7c57506001600160a01b03811615155b612c8660116131be565b90612ca45760405162461bcd60e51b81526004016107069190614bc3565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000612cd282613670565b612cee5760405162461bcd60e51b815260040161070690614cd1565b6000829050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d2c57600080fd5b505afa925050508015612d5c575060408051601f3d908101601f19168201909252612d59918101906146fc565b60015b612d785760405162461bcd60e51b815260040161070690614bd6565b91506117149050565b60085481565b600681565b60006020819052908152604090205460ff1681565b6007546001600160a01b031681565b60008181526001602052604081205460ff1615612dcf57506001611714565b6005546001600160a01b0316612de757506000611714565b60055460405163392f5c1d60e21b81526001600160a01b039091169063e4bd707490611af8908590600401614b7d565b6005546000906001600160a01b031615801590612e5a57506001600160a01b0380831660009081526003602090815260408083209387168352929052205460ff16155b15612f1657600554604051637badcc6760e11b8152612f0f916001600160a01b03169063f75b98ce90612e93908790879060040161491d565b60206040518083038186803b158015612eab57600080fd5b505afa158015612ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee391906146fc565b6001600160a01b03808516600090815260026020908152604080832093891683529290522054906133b7565b905061141e565b506001600160a01b0380821660009081526002602090815260408083209386168352929052205492915050565b6005546001600160a01b031681565b600554600160a01b900460ff16612f6960016131be565b90612f875760405162461bcd60e51b81526004016107069190614bc3565b506005805460ff60a01b19169055604080516020601f8401819004810282018101909252828152612fd591859190859085908190840183828082843760009201919091525061367692505050565b6000613040612fe8600b8c89898e6136f0565b8d8d604051602001612ffc93929190614e03565b60408051601f198184030181526020601f8c018190048102840181019092528a835291908b908b908190840183828082843760009201919091525061377692505050565b905061304c818b61381a565b6001600160a01b038082166000908152600260209081526040808320938e168352929052205489111561307f60086131be565b9061309d5760405162461bcd60e51b81526004016107069190614bc3565b506001600160a01b038082166000908152600260209081526040808320938e16835292905220546130ce908a61395c565b6001600160a01b038083166000908152600260209081526040808320938f16835292815282822093909355600490925290205461310b908a61395c565b6001600160a01b038b1660008181526004602052604090209190915589901561315f5760006131398c612cc7565b905060098160ff16111561315d5760098160ff1603600a0a8b8161315957fe5b0491505b505b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8b8e8e8460405161319494939291906149d7565b60405180910390a150506005805460ff60a01b1916600160a01b1790555050505050505050505050565b606060008260148111156131ce57fe5b60408051600a808252818301909252919250906060908260208201818036833701905050905060005b60ff841615613245578151600a60ff959095168581049560018401939106916030830160f81b918591811061322857fe5b60200101906001600160f81b031916908160001a905350506131f7565b6060816001016001600160401b038111801561326057600080fd5b506040519080825280601f01601f19166020018201604052801561328b576020820181803683370190505b50905060005b8281116132dc5783818403815181106132a657fe5b602001015160f81c60f81b8282815181106132bd57fe5b60200101906001600160f81b031916908160001a905350600101613291565b509695505050505050565b804710156133075760405162461bcd60e51b815260040161070690614c6a565b6000826001600160a01b031682604051613320906148c9565b60006040518083038185875af1925050503d806000811461335d576040519150601f19603f3d011682016040523d82523d6000602084013e613362565b606091505b50509050806107bf5760405162461bcd60e51b815260040161070690614c0d565b6000803d801561339a57602081146133a3576133af565b600191506133af565b60206000803e60005191505b501515905090565b60008282018381108015906133cc5750828110155b6040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906134155760405162461bcd60e51b81526004016107069190614bc3565b509392505050565b60008282028315806133cc57508284828161343457fe5b04146040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906134155760405162461bcd60e51b81526004016107069190614bc3565b60008a8a6040516020016134949291906148a7565b6040516020818303038152906040528051906020012090506134b4613b11565b6001600160a01b031663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016134f49b9a99989796959493929190614ad0565b60206040518083038186803b15801561350c57600080fd5b505afa158015613520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354491906141cf565b61354e60066131be565b9061356c5760405162461bcd60e51b81526004016107069190614bc3565b505050505050505050505050565b816001600160a01b0385166135c7576b033b2e3c9fd0803ce80000004711156135a360026131be565b906135c15760405162461bcd60e51b81526004016107069190614bc3565b5061362d565b60006135d286612cc7565b905060098160ff1611156135f65760098160ff1603600a0a82816135f257fe5b0491505b670de0b6b3a764000082111561360c60036131be565b9061362a5760405162461bcd60e51b81526004016107069190614bc3565b50505b7eb45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d8585838560405161366194939291906149a0565b60405180910390a15050505050565b3b151590565b60006136c5826040518060400160405280336001600160a01b03168152602001868152506040516020016136aa9190614e29565b60405160208183030381529060405280519060200120611395565b6007549091506001600160a01b0380831691161461079f60106131be565b5490565b80546001019055565b6136f8613b9e565b613700613b9e565b604051806080016040528088600b81111561371757fe5b8152602001876001600160a01b0316815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200184905291505095945050505050565b8151602083012060009061378981612db0565b1561379460056131be565b906137b25760405162461bcd60e51b81526004016107069190614bc3565b5060006137bf8483611395565b90506001600160a01b03811615156137d760106131be565b906137f55760405162461bcd60e51b81526004016107069190614bc3565b506000918252600160208190526040909220805460ff19169092179091559392505050565b6005546001600160a01b03161580159061385a57506001600160a01b0380831660009081526003602090815260408083209385168352929052205460ff16155b1561395857600554604051637badcc6760e11b815261390f916001600160a01b03169063f75b98ce90613893908590879060040161491d565b60206040518083038186803b1580156138ab57600080fd5b505afa1580156138bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e391906146fc565b6001600160a01b03808516600090815260026020908152604080832093871683529290522054906133b7565b6001600160a01b038084166000818152600260209081526040808320948716808452948252808320959095559181526003825283812092815291905220805460ff191660011790555b5050565b6000828211156040518060400160405280601281526020017129b0b332a6b0ba341032bc31b2b83a34b7b760711b815250906139ab5760405162461bcd60e51b81526004016107069190614bc3565b5050900390565b6000806139be86611645565b90506001600160a01b0386166139db576139d8813461395c565b90505b844710156139e960076131be565b90613a075760405162461bcd60e51b81526004016107069190614bc3565b50600954604051631cff79cd60e01b81526060916001600160a01b031690631cff79cd908890613a3d9088908a9060040161497c565b6000604051808303818588803b158015613a5657600080fd5b505af1158015613a6a573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052613a9391908101906143ba565b905060008082806020019051810190613aac9190613e90565b91509150886001600160a01b0316826001600160a01b0316148015613adc575080613ada856124a98c611645565b145b613ae660096131be565b90613b045760405162461bcd60e51b81526004016107069190614bc3565b5098975050505050505050565b7f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd25490565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604051806060016040528060006001600160a01b031681526020016060815260200160006001600160a01b031681525090565b6040805160808101909152806000815260200160006001600160a01b0316815260200160608152602001600081525090565b803561141e81614f13565b60008083601f840112613bec578182fd5b5081356001600160401b03811115613c02578182fd5b6020830191508360208083028501011115613c1c57600080fd5b9250929050565b600082601f830112613c33578081fd5b8135613c46613c4182614e7d565b614e57565b818152915060208083019084810181840286018201871015613c6757600080fd5b60005b84811015613c8f578135613c7d81614f2b565b84529282019290820190600101613c6a565b505050505092915050565b600082601f830112613caa578081fd5b8135613cb8613c4182614e7d565b818152915060208083019084810181840286018201871015613cd957600080fd5b60005b84811015613c8f57813584529282019290820190600101613cdc565b600082601f830112613d08578081fd5b8135613d16613c4182614e7d565b818152915060208083019084810181840286018201871015613d3757600080fd5b6000805b85811015613d6557823560ff81168114613d53578283fd5b85529383019391830191600101613d3b565b50505050505092915050565b60008083601f840112613d82578182fd5b5081356001600160401b03811115613d98578182fd5b602083019150836020828501011115613c1c57600080fd5b600082601f830112613dc0578081fd5b8135613dce613c4182614e9c565b9150808252836020828501011115613de557600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613e0f578081fd5b8135613e1a81614f13565b9392505050565b60008060008060008060c08789031215613e39578182fd5b8635613e4481614f13565b95506020870135613e5481614f13565b945060408701359350606087013592506080870135613e7281614f13565b915060a0870135613e8281614f13565b809150509295509295509295565b60008060408385031215613ea2578182fd5b8251613ead81614f13565b6020939093015192949293505050565b60008060408385031215613ecf578182fd5b8235613eda81614f13565b91506020830135613eea81614f13565b809150509250929050565b600080600060608486031215613f09578081fd5b8335613f1481614f13565b92506020840135613f2481614f13565b929592945050506040919091013590565b600080600060608486031215613f49578081fd5b8335613f5481614f13565b92506020840135613f6481614f13565b91506040840135613f7481614f13565b809150509250925092565b600080600080600060a08688031215613f96578283fd5b8535613fa181614f13565b94506020860135613fb181614f13565b93506040860135925060608601356001600160401b03811115613fd2578182fd5b613fde88828901613db0565b9250506080860135613fef81614f13565b809150509295509295909350565b60008060008060008060008060008060e08b8d03121561401b578788fd5b8a3561402681614f13565b995060208b0135985060408b013561403d81614f13565b975061404c8c60608d01613bd0565b965060808b01356001600160401b0380821115614067578586fd5b6140738e838f01613d71565b909850965060a08d013591508082111561408b578586fd5b6140978e838f01613d71565b909650945060c08d01359150808211156140af578384fd5b506140bc8d828e01613d71565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060a0888a0312156140ef578081fd5b87356140fa81614f13565b96506020880135955060408801356001600160401b038082111561411c578283fd5b6141288b838c01613d71565b909750955060608a0135945060808a0135915080821115614147578283fd5b506141548a828b01613d71565b989b979a50959850939692959293505050565b6000806000806040858703121561417c578182fd5b84356001600160401b0380821115614192578384fd5b61419e88838901613bdb565b909650945060208701359150808211156141b6578384fd5b506141c387828801613bdb565b95989497509550505050565b6000602082840312156141e0578081fd5b8151613e1a81614f2b565b6000602082840312156141fc578081fd5b5035919050565b60008060208385031215614215578182fd5b82356001600160401b0381111561422a578283fd5b61423685828601613d71565b90969095509350505050565b60008060008060008060008060008060006101408c8e031215614263578485fd5b6001600160401b03808d351115614278578586fd5b6142858e8e358f01613d71565b909c509a5060208d0135995060408d01358110156142a1578586fd5b6142b18e60408f01358f01613c9a565b98508060608e013511156142c3578586fd5b6142d38e60608f01358f01613c23565b975060808d0135965060a08d013595508060c08e013511156142f3578182fd5b6143038e60c08f01358f01613c9a565b94508060e08e01351115614315578182fd5b6143258e60e08f01358f01613cf8565b9350806101008e01351115614338578182fd5b6143498e6101008f01358f01613c9a565b9250806101208e0135111561435c578182fd5b5061436e8d6101208e01358e01613c9a565b90509295989b509295989b9093969950565b600060208284031215614391578081fd5b81356001600160401b038111156143a6578182fd5b6143b284828501613db0565b949350505050565b6000602082840312156143cb578081fd5b81516001600160401b038111156143e0578182fd5b8201601f810184136143f0578182fd5b80516143fe613c4182614e9c565b818152856020838501011115614412578384fd5b614423826020830160208601614ee7565b95945050505050565b6000806040838503121561443e578182fd5b82356001600160401b03811115614453578283fd5b61445f85828601613db0565b95602094909401359450505050565b6000806000806000806000806000806101408b8d03121561448d578384fd5b8a356001600160401b03808211156144a3578586fd5b6144af8e838f01613db0565b9b5060208d01359a5060408d01359150808211156144cb578586fd5b6144d78e838f01613c9a565b995060608d01359150808211156144ec578586fd5b6144f88e838f01613c23565b985060808d0135975060a08d0135965060c08d013591508082111561451b578586fd5b6145278e838f01613c9a565b955060e08d013591508082111561453c578485fd5b6145488e838f01613cf8565b94506101008d013591508082111561455e578384fd5b61456a8e838f01613c9a565b93506101208d0135915080821115614580578283fd5b5061458d8d828e01613c9a565b9150509295989b9194979a5092959850565b600080600080600080600080600080600060e08c8e0312156145bf578485fd5b6001600160401b03808d3511156145d4578586fd5b6145e18e8e358f01613d71565b909c509a506145f38e60208f01613bd0565b995060408d013598508060608e0135111561460c578586fd5b61461c8e60608f01358f01613d71565b909850965060808d0135811015614631578586fd5b6146418e60808f01358f01613d71565b909650945060a08d0135935060c08d013581101561465d578182fd5b5061466e8d60c08e01358e01613d71565b81935080925050509295989b509295989b9093969950565b60008060008060006060868803121561469d578283fd5b85356001600160401b03808211156146b3578485fd5b6146bf89838a01613d71565b90975095506020880135945060408801359150808211156146de578283fd5b506146eb88828901613d71565b969995985093965092949392505050565b60006020828403121561470d578081fd5b5051919050565b6000815180845260208085019450808401835b83811015614745578151151587529582019590820190600101614727565b509495945050505050565b6000815180845260208085019450808401835b8381101561474557815187529582019590820190600101614763565b6000815180845260208085019450808401835b8381101561474557815160ff1687529582019590820190600101614792565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526147f3816020860160208601614ee7565b601f01601f19169290920160200192915050565b60ff815116825260ff6020820151166020830152604081015160018060a01b03808216604085015280606084015116606085015250506080810151608083015260a081015160a08301525050565b60008151600c811061486357fe5b83526020828101516001600160a01b031690840152604080830151608091850182905290614893908501826147db565b606093840151949093019390935250919050565b600083516148b9818460208801614ee7565b9190910191825250602001919050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b600060018060a01b038088168352808716602084015285604084015260a0606084015261496760a08401866147db565b91508084166080840152509695505050505050565b6001600160a01b03831681526040602082018190526000906143b2908301846147db565b6001600160a01b03851681526080602082018190526000906149c4908301866147db565b6040830194909452506060015292915050565b6001600160a01b03851681526060602082018190526000906149fc90830185876147b1565b905082604083015295945050505050565b6001600160a01b0386168152608060208201819052600090614a3290830186886147b1565b604083019490945250606001529392505050565b6040808252810184905260008560608301825b87811015614a895760208335614a6e81614f13565b6001600160a01b031683529283019290910190600101614a59565b5083810360208501528481526001600160fb1b03851115614aa8578283fd5b602085029150818660208301370160200190815295945050505050565b901515815260200190565b60006101608d151583528c60208401528b6040840152806060840152614af88184018c614750565b90508281036080840152614b0c818b614714565b90508860a08401528760c084015282810360e0840152614b2c8188614750565b9050828103610100840152614b41818761477f565b9050828103610120840152614b568186614750565b9050828103610140840152614b6b8185614750565b9e9d5050505050505050505050505050565b90815260200190565b60008482528360208301526060604083015261442360608301846147db565b93845260ff9290921660208401526040830152606082015260800190565b600060208252613e1a60208301846147db565b60208082526018908201527f67657420455243323020646563696d616c206661696c65640000000000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526016908201527518985b185b98d953d9881b9bdb8b58dbdb9d1c9858dd60521b604082015260600190565b60208082526018908201527f676574446563696d616c73206e6f6e2d636f6e74726163740000000000000000604082015260600190565b60208082526018908201527f6765742045524332302062616c616e6365206661696c65640000000000000000604082015260600190565b60c0810161141e8284614807565b6000610100614d5c8387614807565b8060c084015260018060a01b038086511682850152602086015191506060610120850152614d8e6101608501836147db565b9150806040870151166101408501525082810360e0840152614db081856147db565b9695505050505050565b600060808252614dcd6080830188614855565b6001600160a01b038781166020850152861660408401528281036060840152614df78185876147b1565b98975050505050505050565b600060408252614e166040830186614855565b8281036020840152614db08185876147b1565b81516001600160a01b031681526020918201519181019190915260400190565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715614e7557600080fd5b604052919050565b60006001600160401b03821115614e92578081fd5b5060209081020190565b60006001600160401b03821115614eb1578081fd5b50601f01601f191660200190565b60008085851115614ece578182fd5b83861115614eda578182fd5b5050820193919092039150565b60005b83811015614f02578181015183820152602001614eea565b838111156107bd5750506000910152565b6001600160a01b0381168114614f2857600080fd5b50565b8015158114614f2857600080fdfea2646970667358221220576480e0218c4afcae951af5bbd4d2ca41f78351b43c7f967944b77954aca9b964736f6c634300060c0033",
}

// VaultABI is the input ABI used to generate the binding from.
// Deprecated: Use VaultMetaData.ABI instead.
var VaultABI = VaultMetaData.ABI

// VaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VaultMetaData.Bin instead.
var VaultBin = VaultMetaData.Bin

// DeployVault deploys a new Ethereum contract, binding an instance of Vault to it.
func DeployVault(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Vault, error) {
	parsed, err := VaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VaultBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// Vault is an auto generated Go binding around an Ethereum contract.
type Vault struct {
	VaultCaller     // Read-only binding to the contract
	VaultTransactor // Write-only binding to the contract
	VaultFilterer   // Log filterer for contract events
}

// VaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type VaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VaultSession struct {
	Contract     *Vault            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VaultCallerSession struct {
	Contract *VaultCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VaultTransactorSession struct {
	Contract     *VaultTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type VaultRaw struct {
	Contract *Vault // Generic contract binding to access the raw methods on
}

// VaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VaultCallerRaw struct {
	Contract *VaultCaller // Generic read-only contract binding to access the raw methods on
}

// VaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VaultTransactorRaw struct {
	Contract *VaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVault creates a new instance of Vault, bound to a specific deployed contract.
func NewVault(address common.Address, backend bind.ContractBackend) (*Vault, error) {
	contract, err := bindVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// NewVaultCaller creates a new read-only instance of Vault, bound to a specific deployed contract.
func NewVaultCaller(address common.Address, caller bind.ContractCaller) (*VaultCaller, error) {
	contract, err := bindVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VaultCaller{contract: contract}, nil
}

// NewVaultTransactor creates a new write-only instance of Vault, bound to a specific deployed contract.
func NewVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*VaultTransactor, error) {
	contract, err := bindVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VaultTransactor{contract: contract}, nil
}

// NewVaultFilterer creates a new log filterer instance of Vault, bound to a specific deployed contract.
func NewVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*VaultFilterer, error) {
	contract, err := bindVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VaultFilterer{contract: contract}, nil
}

// bindVault binds a generic wrapper to an already deployed contract.
func bindVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.VaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transact(opts, method, params...)
}

// BURNCALLREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0xbd835c42.
//
// Solidity: function BURN_CALL_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultCaller) BURNCALLREQUESTMETADATATYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "BURN_CALL_REQUEST_METADATA_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BURNCALLREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0xbd835c42.
//
// Solidity: function BURN_CALL_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultSession) BURNCALLREQUESTMETADATATYPE() (uint8, error) {
	return _Vault.Contract.BURNCALLREQUESTMETADATATYPE(&_Vault.CallOpts)
}

// BURNCALLREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0xbd835c42.
//
// Solidity: function BURN_CALL_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultCallerSession) BURNCALLREQUESTMETADATATYPE() (uint8, error) {
	return _Vault.Contract.BURNCALLREQUESTMETADATATYPE(&_Vault.CallOpts)
}

// BURNREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0x568c04fd.
//
// Solidity: function BURN_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultCaller) BURNREQUESTMETADATATYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "BURN_REQUEST_METADATA_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BURNREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0x568c04fd.
//
// Solidity: function BURN_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultSession) BURNREQUESTMETADATATYPE() (uint8, error) {
	return _Vault.Contract.BURNREQUESTMETADATATYPE(&_Vault.CallOpts)
}

// BURNREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0x568c04fd.
//
// Solidity: function BURN_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultCallerSession) BURNREQUESTMETADATATYPE() (uint8, error) {
	return _Vault.Contract.BURNREQUESTMETADATATYPE(&_Vault.CallOpts)
}

// BURNTOCONTRACTREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0x6f2cbc48.
//
// Solidity: function BURN_TO_CONTRACT_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultCaller) BURNTOCONTRACTREQUESTMETADATATYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "BURN_TO_CONTRACT_REQUEST_METADATA_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BURNTOCONTRACTREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0x6f2cbc48.
//
// Solidity: function BURN_TO_CONTRACT_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultSession) BURNTOCONTRACTREQUESTMETADATATYPE() (uint8, error) {
	return _Vault.Contract.BURNTOCONTRACTREQUESTMETADATATYPE(&_Vault.CallOpts)
}

// BURNTOCONTRACTREQUESTMETADATATYPE is a free data retrieval call binding the contract method 0x6f2cbc48.
//
// Solidity: function BURN_TO_CONTRACT_REQUEST_METADATA_TYPE() view returns(uint8)
func (_Vault *VaultCallerSession) BURNTOCONTRACTREQUESTMETADATATYPE() (uint8, error) {
	return _Vault.Contract.BURNTOCONTRACTREQUESTMETADATATYPE(&_Vault.CallOpts)
}

// CURRENTNETWORKID is a free data retrieval call binding the contract method 0xd7200eb1.
//
// Solidity: function CURRENT_NETWORK_ID() view returns(uint8)
func (_Vault *VaultCaller) CURRENTNETWORKID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "CURRENT_NETWORK_ID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CURRENTNETWORKID is a free data retrieval call binding the contract method 0xd7200eb1.
//
// Solidity: function CURRENT_NETWORK_ID() view returns(uint8)
func (_Vault *VaultSession) CURRENTNETWORKID() (uint8, error) {
	return _Vault.Contract.CURRENTNETWORKID(&_Vault.CallOpts)
}

// CURRENTNETWORKID is a free data retrieval call binding the contract method 0xd7200eb1.
//
// Solidity: function CURRENT_NETWORK_ID() view returns(uint8)
func (_Vault *VaultCallerSession) CURRENTNETWORKID() (uint8, error) {
	return _Vault.Contract.CURRENTNETWORKID(&_Vault.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Vault *VaultCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "ETH_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Vault *VaultSession) ETHTOKEN() (common.Address, error) {
	return _Vault.Contract.ETHTOKEN(&_Vault.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Vault *VaultCallerSession) ETHTOKEN() (common.Address, error) {
	return _Vault.Contract.ETHTOKEN(&_Vault.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Vault *VaultCaller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "balanceOf", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Vault *VaultSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Vault.Contract.BalanceOf(&_Vault.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Vault *VaultCallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Vault.Contract.BalanceOf(&_Vault.CallOpts, token)
}

// Executor is a free data retrieval call binding the contract method 0xc34c08e5.
//
// Solidity: function executor() view returns(address)
func (_Vault *VaultCaller) Executor(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "executor")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Executor is a free data retrieval call binding the contract method 0xc34c08e5.
//
// Solidity: function executor() view returns(address)
func (_Vault *VaultSession) Executor() (common.Address, error) {
	return _Vault.Contract.Executor(&_Vault.CallOpts)
}

// Executor is a free data retrieval call binding the contract method 0xc34c08e5.
//
// Solidity: function executor() view returns(address)
func (_Vault *VaultCallerSession) Executor() (common.Address, error) {
	return _Vault.Contract.Executor(&_Vault.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Vault *VaultCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "getDecimals", token)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Vault *VaultSession) GetDecimals(token common.Address) (uint8, error) {
	return _Vault.Contract.GetDecimals(&_Vault.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Vault *VaultCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Vault.Contract.GetDecimals(&_Vault.CallOpts, token)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_Vault *VaultCaller) GetDepositedBalance(opts *bind.CallOpts, token common.Address, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "getDepositedBalance", token, owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_Vault *VaultSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _Vault.Contract.GetDepositedBalance(&_Vault.CallOpts, token, owner)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_Vault *VaultCallerSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _Vault.Contract.GetDepositedBalance(&_Vault.CallOpts, token, owner)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Vault *VaultCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Vault *VaultSession) IsInitialized() (bool, error) {
	return _Vault.Contract.IsInitialized(&_Vault.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Vault *VaultCallerSession) IsInitialized() (bool, error) {
	return _Vault.Contract.IsInitialized(&_Vault.CallOpts)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_Vault *VaultCaller) IsSigDataUsed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "isSigDataUsed", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_Vault *VaultSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _Vault.Contract.IsSigDataUsed(&_Vault.CallOpts, hash)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_Vault *VaultCallerSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _Vault.Contract.IsSigDataUsed(&_Vault.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_Vault *VaultCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "isWithdrawed", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_Vault *VaultSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Vault.Contract.IsWithdrawed(&_Vault.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_Vault *VaultCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Vault.Contract.IsWithdrawed(&_Vault.CallOpts, hash)
}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_Vault *VaultCaller) Migration(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "migration", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_Vault *VaultSession) Migration(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Vault.Contract.Migration(&_Vault.CallOpts, arg0, arg1)
}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_Vault *VaultCallerSession) Migration(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Vault.Contract.Migration(&_Vault.CallOpts, arg0, arg1)
}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_Vault *VaultCaller) NotEntered(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "notEntered")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_Vault *VaultSession) NotEntered() (bool, error) {
	return _Vault.Contract.NotEntered(&_Vault.CallOpts)
}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_Vault *VaultCallerSession) NotEntered() (bool, error) {
	return _Vault.Contract.NotEntered(&_Vault.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Vault *VaultCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (VaultAURORABurnInstData, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "parseBurnInst", inst)

	if err != nil {
		return *new(VaultAURORABurnInstData), err
	}

	out0 := *abi.ConvertType(out[0], new(VaultAURORABurnInstData)).(*VaultAURORABurnInstData)

	return out0, err

}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Vault *VaultSession) ParseBurnInst(inst []byte) (VaultAURORABurnInstData, error) {
	return _Vault.Contract.ParseBurnInst(&_Vault.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Vault *VaultCallerSession) ParseBurnInst(inst []byte) (VaultAURORABurnInstData, error) {
	return _Vault.Contract.ParseBurnInst(&_Vault.CallOpts, inst)
}

// ParseCalldataFromBurnInst is a free data retrieval call binding the contract method 0x66945b31.
//
// Solidity: function parseCalldataFromBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32), (address,bytes,address), bytes)
func (_Vault *VaultCaller) ParseCalldataFromBurnInst(opts *bind.CallOpts, inst []byte) (VaultAURORABurnInstData, VaultAURORARedepositOptions, []byte, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "parseCalldataFromBurnInst", inst)

	if err != nil {
		return *new(VaultAURORABurnInstData), *new(VaultAURORARedepositOptions), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(VaultAURORABurnInstData)).(*VaultAURORABurnInstData)
	out1 := *abi.ConvertType(out[1], new(VaultAURORARedepositOptions)).(*VaultAURORARedepositOptions)
	out2 := *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return out0, out1, out2, err

}

// ParseCalldataFromBurnInst is a free data retrieval call binding the contract method 0x66945b31.
//
// Solidity: function parseCalldataFromBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32), (address,bytes,address), bytes)
func (_Vault *VaultSession) ParseCalldataFromBurnInst(inst []byte) (VaultAURORABurnInstData, VaultAURORARedepositOptions, []byte, error) {
	return _Vault.Contract.ParseCalldataFromBurnInst(&_Vault.CallOpts, inst)
}

// ParseCalldataFromBurnInst is a free data retrieval call binding the contract method 0x66945b31.
//
// Solidity: function parseCalldataFromBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32), (address,bytes,address), bytes)
func (_Vault *VaultCallerSession) ParseCalldataFromBurnInst(inst []byte) (VaultAURORABurnInstData, VaultAURORARedepositOptions, []byte, error) {
	return _Vault.Contract.ParseCalldataFromBurnInst(&_Vault.CallOpts, inst)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_Vault *VaultCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "prevVault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_Vault *VaultSession) PrevVault() (common.Address, error) {
	return _Vault.Contract.PrevVault(&_Vault.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_Vault *VaultCallerSession) PrevVault() (common.Address, error) {
	return _Vault.Contract.PrevVault(&_Vault.CallOpts)
}

// Regulator is a free data retrieval call binding the contract method 0xdd8fee14.
//
// Solidity: function regulator() view returns(address)
func (_Vault *VaultCaller) Regulator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "regulator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Regulator is a free data retrieval call binding the contract method 0xdd8fee14.
//
// Solidity: function regulator() view returns(address)
func (_Vault *VaultSession) Regulator() (common.Address, error) {
	return _Vault.Contract.Regulator(&_Vault.CallOpts)
}

// Regulator is a free data retrieval call binding the contract method 0xdd8fee14.
//
// Solidity: function regulator() view returns(address)
func (_Vault *VaultCallerSession) Regulator() (common.Address, error) {
	return _Vault.Contract.Regulator(&_Vault.CallOpts)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Vault *VaultCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "sigDataUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Vault *VaultSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Vault.Contract.SigDataUsed(&_Vault.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Vault *VaultCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Vault.Contract.SigDataUsed(&_Vault.CallOpts, arg0)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_Vault *VaultCaller) SigToAddress(opts *bind.CallOpts, signData []byte, hash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "sigToAddress", signData, hash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_Vault *VaultSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Vault.Contract.SigToAddress(&_Vault.CallOpts, signData, hash)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_Vault *VaultCallerSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Vault.Contract.SigToAddress(&_Vault.CallOpts, signData, hash)
}

// StorageLayoutVersion is a free data retrieval call binding the contract method 0xd6a1fe3b.
//
// Solidity: function storageLayoutVersion() view returns(uint256)
func (_Vault *VaultCaller) StorageLayoutVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "storageLayoutVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StorageLayoutVersion is a free data retrieval call binding the contract method 0xd6a1fe3b.
//
// Solidity: function storageLayoutVersion() view returns(uint256)
func (_Vault *VaultSession) StorageLayoutVersion() (*big.Int, error) {
	return _Vault.Contract.StorageLayoutVersion(&_Vault.CallOpts)
}

// StorageLayoutVersion is a free data retrieval call binding the contract method 0xd6a1fe3b.
//
// Solidity: function storageLayoutVersion() view returns(uint256)
func (_Vault *VaultCallerSession) StorageLayoutVersion() (*big.Int, error) {
	return _Vault.Contract.StorageLayoutVersion(&_Vault.CallOpts)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_Vault *VaultCaller) TotalDepositedToSCAmount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "totalDepositedToSCAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_Vault *VaultSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _Vault.Contract.TotalDepositedToSCAmount(&_Vault.CallOpts, arg0)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_Vault *VaultCallerSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _Vault.Contract.TotalDepositedToSCAmount(&_Vault.CallOpts, arg0)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_Vault *VaultCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "withdrawRequests", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_Vault *VaultSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Vault.Contract.WithdrawRequests(&_Vault.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_Vault *VaultCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Vault.Contract.WithdrawRequests(&_Vault.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Vault *VaultCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "withdrawed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Vault *VaultSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Vault.Contract.Withdrawed(&_Vault.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Vault *VaultCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Vault.Contract.Withdrawed(&_Vault.CallOpts, arg0)
}

// CallExternal is a paid mutator transaction binding the contract method 0xbda9b509.
//
// Solidity: function _callExternal(address token, address to, uint256 amount, bytes externalCalldata, address redepositToken) returns(uint256)
func (_Vault *VaultTransactor) CallExternal(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int, externalCalldata []byte, redepositToken common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "_callExternal", token, to, amount, externalCalldata, redepositToken)
}

// CallExternal is a paid mutator transaction binding the contract method 0xbda9b509.
//
// Solidity: function _callExternal(address token, address to, uint256 amount, bytes externalCalldata, address redepositToken) returns(uint256)
func (_Vault *VaultSession) CallExternal(token common.Address, to common.Address, amount *big.Int, externalCalldata []byte, redepositToken common.Address) (*types.Transaction, error) {
	return _Vault.Contract.CallExternal(&_Vault.TransactOpts, token, to, amount, externalCalldata, redepositToken)
}

// CallExternal is a paid mutator transaction binding the contract method 0xbda9b509.
//
// Solidity: function _callExternal(address token, address to, uint256 amount, bytes externalCalldata, address redepositToken) returns(uint256)
func (_Vault *VaultTransactorSession) CallExternal(token common.Address, to common.Address, amount *big.Int, externalCalldata []byte, redepositToken common.Address) (*types.Transaction, error) {
	return _Vault.Contract.CallExternal(&_Vault.TransactOpts, token, to, amount, externalCalldata, redepositToken)
}

// TransferExternal is a paid mutator transaction binding the contract method 0x145e2a6b.
//
// Solidity: function _transferExternal(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferExternal(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "_transferExternal", token, to, amount)
}

// TransferExternal is a paid mutator transaction binding the contract method 0x145e2a6b.
//
// Solidity: function _transferExternal(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferExternal(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferExternal(&_Vault.TransactOpts, token, to, amount)
}

// TransferExternal is a paid mutator transaction binding the contract method 0x145e2a6b.
//
// Solidity: function _transferExternal(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferExternal(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferExternal(&_Vault.TransactOpts, token, to, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xc791d705.
//
// Solidity: function deposit(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_Vault *VaultTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "deposit", incognitoAddress, txId, signData)
}

// Deposit is a paid mutator transaction binding the contract method 0xc791d705.
//
// Solidity: function deposit(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_Vault *VaultSession) Deposit(incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, incognitoAddress, txId, signData)
}

// Deposit is a paid mutator transaction binding the contract method 0xc791d705.
//
// Solidity: function deposit(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_Vault *VaultTransactorSession) Deposit(incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, incognitoAddress, txId, signData)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0xa807b5bb.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_Vault *VaultTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress, txId, signData)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0xa807b5bb.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_Vault *VaultSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.DepositERC20(&_Vault.TransactOpts, token, amount, incognitoAddress, txId, signData)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0xa807b5bb.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_Vault *VaultTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.DepositERC20(&_Vault.TransactOpts, token, amount, incognitoAddress, txId, signData)
}

// DepositERC20V2 is a paid mutator transaction binding the contract method 0xb8237dbb.
//
// Solidity: function depositERC20_V2(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_Vault *VaultTransactor) DepositERC20V2(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositERC20_V2", token, amount, incognitoAddress, txId, signData)
}

// DepositERC20V2 is a paid mutator transaction binding the contract method 0xb8237dbb.
//
// Solidity: function depositERC20_V2(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_Vault *VaultSession) DepositERC20V2(token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.DepositERC20V2(&_Vault.TransactOpts, token, amount, incognitoAddress, txId, signData)
}

// DepositERC20V2 is a paid mutator transaction binding the contract method 0xb8237dbb.
//
// Solidity: function depositERC20_V2(address token, uint256 amount, string incognitoAddress, bytes32 txId, bytes signData) returns()
func (_Vault *VaultTransactorSession) DepositERC20V2(token common.Address, amount *big.Int, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.DepositERC20V2(&_Vault.TransactOpts, token, amount, incognitoAddress, txId, signData)
}

// DepositV2 is a paid mutator transaction binding the contract method 0x84b3ac03.
//
// Solidity: function deposit_V2(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_Vault *VaultTransactor) DepositV2(opts *bind.TransactOpts, incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "deposit_V2", incognitoAddress, txId, signData)
}

// DepositV2 is a paid mutator transaction binding the contract method 0x84b3ac03.
//
// Solidity: function deposit_V2(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_Vault *VaultSession) DepositV2(incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.DepositV2(&_Vault.TransactOpts, incognitoAddress, txId, signData)
}

// DepositV2 is a paid mutator transaction binding the contract method 0x84b3ac03.
//
// Solidity: function deposit_V2(string incognitoAddress, bytes32 txId, bytes signData) payable returns()
func (_Vault *VaultTransactorSession) DepositV2(incognitoAddress string, txId [32]byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.DepositV2(&_Vault.TransactOpts, incognitoAddress, txId, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_Vault *VaultTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_Vault *VaultSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.Execute(&_Vault.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_Vault *VaultTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _Vault.Contract.Execute(&_Vault.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// ExecuteWithBurnProof is a paid mutator transaction binding the contract method 0x3ed1b376.
//
// Solidity: function executeWithBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultTransactor) ExecuteWithBurnProof(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "executeWithBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// ExecuteWithBurnProof is a paid mutator transaction binding the contract method 0x3ed1b376.
//
// Solidity: function executeWithBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultSession) ExecuteWithBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.Contract.ExecuteWithBurnProof(&_Vault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// ExecuteWithBurnProof is a paid mutator transaction binding the contract method 0x3ed1b376.
//
// Solidity: function executeWithBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultTransactorSession) ExecuteWithBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.Contract.ExecuteWithBurnProof(&_Vault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _prevVault, address _regulator, address _executor) returns()
func (_Vault *VaultTransactor) Initialize(opts *bind.TransactOpts, _prevVault common.Address, _regulator common.Address, _executor common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "initialize", _prevVault, _regulator, _executor)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _prevVault, address _regulator, address _executor) returns()
func (_Vault *VaultSession) Initialize(_prevVault common.Address, _regulator common.Address, _executor common.Address) (*types.Transaction, error) {
	return _Vault.Contract.Initialize(&_Vault.TransactOpts, _prevVault, _regulator, _executor)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _prevVault, address _regulator, address _executor) returns()
func (_Vault *VaultTransactorSession) Initialize(_prevVault common.Address, _regulator common.Address, _executor common.Address) (*types.Transaction, error) {
	return _Vault.Contract.Initialize(&_Vault.TransactOpts, _prevVault, _regulator, _executor)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xfee8efda.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp, bytes32 txId, bytes regulatorSig) returns()
func (_Vault *VaultTransactor) RequestWithdraw(opts *bind.TransactOpts, incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte, txId [32]byte, regulatorSig []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "requestWithdraw", incognitoAddress, token, amount, signData, timestamp, txId, regulatorSig)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xfee8efda.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp, bytes32 txId, bytes regulatorSig) returns()
func (_Vault *VaultSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte, txId [32]byte, regulatorSig []byte) (*types.Transaction, error) {
	return _Vault.Contract.RequestWithdraw(&_Vault.TransactOpts, incognitoAddress, token, amount, signData, timestamp, txId, regulatorSig)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xfee8efda.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp, bytes32 txId, bytes regulatorSig) returns()
func (_Vault *VaultTransactorSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte, txId [32]byte, regulatorSig []byte) (*types.Transaction, error) {
	return _Vault.Contract.RequestWithdraw(&_Vault.TransactOpts, incognitoAddress, token, amount, signData, timestamp, txId, regulatorSig)
}

// SetRegulator is a paid mutator transaction binding the contract method 0xcde0a4f8.
//
// Solidity: function setRegulator(address _regulator) returns()
func (_Vault *VaultTransactor) SetRegulator(opts *bind.TransactOpts, _regulator common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setRegulator", _regulator)
}

// SetRegulator is a paid mutator transaction binding the contract method 0xcde0a4f8.
//
// Solidity: function setRegulator(address _regulator) returns()
func (_Vault *VaultSession) SetRegulator(_regulator common.Address) (*types.Transaction, error) {
	return _Vault.Contract.SetRegulator(&_Vault.TransactOpts, _regulator)
}

// SetRegulator is a paid mutator transaction binding the contract method 0xcde0a4f8.
//
// Solidity: function setRegulator(address _regulator) returns()
func (_Vault *VaultTransactorSession) SetRegulator(_regulator common.Address) (*types.Transaction, error) {
	return _Vault.Contract.SetRegulator(&_Vault.TransactOpts, _regulator)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultSession) SubmitBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.Contract.SubmitBurnProof(&_Vault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultTransactorSession) SubmitBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.Contract.SubmitBurnProof(&_Vault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_Vault *VaultTransactor) UpdateAssets(opts *bind.TransactOpts, assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "updateAssets", assets, amounts)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_Vault *VaultSession) UpdateAssets(assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.UpdateAssets(&_Vault.TransactOpts, assets, amounts)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_Vault *VaultTransactorSession) UpdateAssets(assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.UpdateAssets(&_Vault.TransactOpts, assets, amounts)
}

// UpgradeVaultStorage is a paid mutator transaction binding the contract method 0xa73b1532.
//
// Solidity: function upgradeVaultStorage(address _regulator, address _executor) returns()
func (_Vault *VaultTransactor) UpgradeVaultStorage(opts *bind.TransactOpts, _regulator common.Address, _executor common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "upgradeVaultStorage", _regulator, _executor)
}

// UpgradeVaultStorage is a paid mutator transaction binding the contract method 0xa73b1532.
//
// Solidity: function upgradeVaultStorage(address _regulator, address _executor) returns()
func (_Vault *VaultSession) UpgradeVaultStorage(_regulator common.Address, _executor common.Address) (*types.Transaction, error) {
	return _Vault.Contract.UpgradeVaultStorage(&_Vault.TransactOpts, _regulator, _executor)
}

// UpgradeVaultStorage is a paid mutator transaction binding the contract method 0xa73b1532.
//
// Solidity: function upgradeVaultStorage(address _regulator, address _executor) returns()
func (_Vault *VaultTransactorSession) UpgradeVaultStorage(_regulator common.Address, _executor common.Address) (*types.Transaction, error) {
	return _Vault.Contract.UpgradeVaultStorage(&_Vault.TransactOpts, _regulator, _executor)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultSession) Withdraw(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vault *VaultTransactorSession) Withdraw(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Vault *VaultTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Vault *VaultSession) Receive() (*types.Transaction, error) {
	return _Vault.Contract.Receive(&_Vault.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Vault *VaultTransactorSession) Receive() (*types.Transaction, error) {
	return _Vault.Contract.Receive(&_Vault.TransactOpts)
}

// VaultDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Vault contract.
type VaultDepositIterator struct {
	Event *VaultDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultDeposit represents a Deposit event raised by the Vault contract.
type VaultDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Vault *VaultFilterer) FilterDeposit(opts *bind.FilterOpts) (*VaultDepositIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &VaultDepositIterator{contract: _Vault.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Vault *VaultFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *VaultDeposit) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultDeposit)
				if err := _Vault.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Vault *VaultFilterer) ParseDeposit(log types.Log) (*VaultDeposit, error) {
	event := new(VaultDeposit)
	if err := _Vault.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultDepositV2Iterator is returned from FilterDepositV2 and is used to iterate over the raw logs and unpacked data for DepositV2 events raised by the Vault contract.
type VaultDepositV2Iterator struct {
	Event *VaultDepositV2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultDepositV2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultDepositV2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultDepositV2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultDepositV2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultDepositV2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultDepositV2 represents a DepositV2 event raised by the Vault contract.
type VaultDepositV2 struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	DepositID        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDepositV2 is a free log retrieval operation binding the contract event 0xd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab3851.
//
// Solidity: event DepositV2(address token, string incognitoAddress, uint256 amount, uint256 depositID)
func (_Vault *VaultFilterer) FilterDepositV2(opts *bind.FilterOpts) (*VaultDepositV2Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "DepositV2")
	if err != nil {
		return nil, err
	}
	return &VaultDepositV2Iterator{contract: _Vault.contract, event: "DepositV2", logs: logs, sub: sub}, nil
}

// WatchDepositV2 is a free log subscription operation binding the contract event 0xd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab3851.
//
// Solidity: event DepositV2(address token, string incognitoAddress, uint256 amount, uint256 depositID)
func (_Vault *VaultFilterer) WatchDepositV2(opts *bind.WatchOpts, sink chan<- *VaultDepositV2) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "DepositV2")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultDepositV2)
				if err := _Vault.contract.UnpackLog(event, "DepositV2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositV2 is a log parse operation binding the contract event 0xd30df8040a1092415b49422a02dbd8cdd5915a596abcba02cd0f65dd86ab3851.
//
// Solidity: event DepositV2(address token, string incognitoAddress, uint256 amount, uint256 depositID)
func (_Vault *VaultFilterer) ParseDepositV2(log types.Log) (*VaultDepositV2, error) {
	event := new(VaultDepositV2)
	if err := _Vault.contract.UnpackLog(event, "DepositV2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultExecuteFnLogIterator is returned from FilterExecuteFnLog and is used to iterate over the raw logs and unpacked data for ExecuteFnLog events raised by the Vault contract.
type VaultExecuteFnLogIterator struct {
	Event *VaultExecuteFnLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultExecuteFnLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultExecuteFnLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultExecuteFnLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultExecuteFnLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultExecuteFnLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultExecuteFnLog represents a ExecuteFnLog event raised by the Vault contract.
type VaultExecuteFnLog struct {
	Id        [32]byte
	PhaseID   *big.Int
	ErrorData []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteFnLog is a free log retrieval operation binding the contract event 0xdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d416.
//
// Solidity: event ExecuteFnLog(bytes32 id, uint256 phaseID, bytes errorData)
func (_Vault *VaultFilterer) FilterExecuteFnLog(opts *bind.FilterOpts) (*VaultExecuteFnLogIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "ExecuteFnLog")
	if err != nil {
		return nil, err
	}
	return &VaultExecuteFnLogIterator{contract: _Vault.contract, event: "ExecuteFnLog", logs: logs, sub: sub}, nil
}

// WatchExecuteFnLog is a free log subscription operation binding the contract event 0xdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d416.
//
// Solidity: event ExecuteFnLog(bytes32 id, uint256 phaseID, bytes errorData)
func (_Vault *VaultFilterer) WatchExecuteFnLog(opts *bind.WatchOpts, sink chan<- *VaultExecuteFnLog) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "ExecuteFnLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultExecuteFnLog)
				if err := _Vault.contract.UnpackLog(event, "ExecuteFnLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteFnLog is a log parse operation binding the contract event 0xdbbb883f24557adf486292429863dcfd4ac5d4db168ae94921da8e3d9a95d416.
//
// Solidity: event ExecuteFnLog(bytes32 id, uint256 phaseID, bytes errorData)
func (_Vault *VaultFilterer) ParseExecuteFnLog(log types.Log) (*VaultExecuteFnLog, error) {
	event := new(VaultExecuteFnLog)
	if err := _Vault.contract.UnpackLog(event, "ExecuteFnLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultRedepositIterator is returned from FilterRedeposit and is used to iterate over the raw logs and unpacked data for Redeposit events raised by the Vault contract.
type VaultRedepositIterator struct {
	Event *VaultRedeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultRedepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultRedeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultRedeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultRedepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultRedepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultRedeposit represents a Redeposit event raised by the Vault contract.
type VaultRedeposit struct {
	Token               common.Address
	RedepositIncAddress []byte
	Amount              *big.Int
	Itx                 [32]byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRedeposit is a free log retrieval operation binding the contract event 0x00b45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d.
//
// Solidity: event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx)
func (_Vault *VaultFilterer) FilterRedeposit(opts *bind.FilterOpts) (*VaultRedepositIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Redeposit")
	if err != nil {
		return nil, err
	}
	return &VaultRedepositIterator{contract: _Vault.contract, event: "Redeposit", logs: logs, sub: sub}, nil
}

// WatchRedeposit is a free log subscription operation binding the contract event 0x00b45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d.
//
// Solidity: event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx)
func (_Vault *VaultFilterer) WatchRedeposit(opts *bind.WatchOpts, sink chan<- *VaultRedeposit) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Redeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultRedeposit)
				if err := _Vault.contract.UnpackLog(event, "Redeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeposit is a log parse operation binding the contract event 0x00b45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d.
//
// Solidity: event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx)
func (_Vault *VaultFilterer) ParseRedeposit(log types.Log) (*VaultRedeposit, error) {
	event := new(VaultRedeposit)
	if err := _Vault.contract.UnpackLog(event, "Redeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Vault contract.
type VaultUpdateIncognitoProxyIterator struct {
	Event *VaultUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Vault contract.
type VaultUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Vault *VaultFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*VaultUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &VaultUpdateIncognitoProxyIterator{contract: _Vault.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Vault *VaultFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *VaultUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultUpdateIncognitoProxy)
				if err := _Vault.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateIncognitoProxy is a log parse operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Vault *VaultFilterer) ParseUpdateIncognitoProxy(log types.Log) (*VaultUpdateIncognitoProxy, error) {
	event := new(VaultUpdateIncognitoProxy)
	if err := _Vault.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultUpdateTokenTotalIterator is returned from FilterUpdateTokenTotal and is used to iterate over the raw logs and unpacked data for UpdateTokenTotal events raised by the Vault contract.
type VaultUpdateTokenTotalIterator struct {
	Event *VaultUpdateTokenTotal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultUpdateTokenTotalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultUpdateTokenTotal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultUpdateTokenTotal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultUpdateTokenTotalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultUpdateTokenTotalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultUpdateTokenTotal represents a UpdateTokenTotal event raised by the Vault contract.
type VaultUpdateTokenTotal struct {
	Assets  []common.Address
	Amounts []*big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateTokenTotal is a free log retrieval operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_Vault *VaultFilterer) FilterUpdateTokenTotal(opts *bind.FilterOpts) (*VaultUpdateTokenTotalIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "UpdateTokenTotal")
	if err != nil {
		return nil, err
	}
	return &VaultUpdateTokenTotalIterator{contract: _Vault.contract, event: "UpdateTokenTotal", logs: logs, sub: sub}, nil
}

// WatchUpdateTokenTotal is a free log subscription operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_Vault *VaultFilterer) WatchUpdateTokenTotal(opts *bind.WatchOpts, sink chan<- *VaultUpdateTokenTotal) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "UpdateTokenTotal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultUpdateTokenTotal)
				if err := _Vault.contract.UnpackLog(event, "UpdateTokenTotal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateTokenTotal is a log parse operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_Vault *VaultFilterer) ParseUpdateTokenTotal(log types.Log) (*VaultUpdateTokenTotal, error) {
	event := new(VaultUpdateTokenTotal)
	if err := _Vault.contract.UnpackLog(event, "UpdateTokenTotal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Vault contract.
type VaultWithdrawIterator struct {
	Event *VaultWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultWithdraw represents a Withdraw event raised by the Vault contract.
type VaultWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Vault *VaultFilterer) FilterWithdraw(opts *bind.FilterOpts) (*VaultWithdrawIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &VaultWithdrawIterator{contract: _Vault.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Vault *VaultFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *VaultWithdraw) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultWithdraw)
				if err := _Vault.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Vault *VaultFilterer) ParseWithdraw(log types.Log) (*VaultWithdraw, error) {
	event := new(VaultWithdraw)
	if err := _Vault.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
