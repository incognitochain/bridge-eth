package bridge

import (
	"crypto/ecdsa"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/incognitochain/bridge-eth/bridge/blur"
	"github.com/incognitochain/bridge-eth/bridge/opensea"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
	"log"
	"math/big"
	"os/exec"
	"strings"
	"testing"
)

// // Define the suite, and absorb the built-in basic suite
// // functionality from testify - including assertion methods.
type PBlurIntegrationTestSuite struct {
	*TradingTestSuite

	Forwarder     *opensea.Opensea
	BlurProxy     *blur.Blur
	BlurProxyAddr common.Address
	Blur1         *blur.BlurInterface
	Blur2         *blur.BlurInterface
	auth          *bind.TransactOpts
	EtherAddress  common.Address
	ETHHost       string
	ETHClient     *ethclient.Client
	IncHost       string
	ETHPrivKey    *ecdsa.PrivateKey
}

func NewPBlurIntegrationTestSuite(tradingTestSuite *TradingTestSuite) *PBlurIntegrationTestSuite {
	return &PBlurIntegrationTestSuite{
		TradingTestSuite: tradingTestSuite,
	}
}

// Make sure that VariableThatShouldStartAtFive is set to five
// before each test
func (v2 *PBlurIntegrationTestSuite) SetupSuite() {
	fmt.Println("Setting up the suite...")

	err := exec.Command("/bin/bash", "-c",
		"solc @openzeppelin/=node_modules/@openzeppelin/ --base-path=$(pwd)/bridge --bin --abi --optimize --overwrite bridge/contracts/blur/orderStructs.sol -o bridge/blur").Run()
	require.Equal(v2.T(), nil, err)
	err = exec.Command("/bin/bash", "-c",
		"abigen --abi bridge/blur/BuyBlurProxy.abi --bin bridge/blur/BuyBlurProxy.bin --out bridge/blur/blur.go --pkg blur").Run()

	v2.IncHost = "http://127.0.0.1:9338"
	v2.ETHHost = "http://127.0.0.1:8545"
	client, err := ethclient.Dial(v2.ETHHost)
	require.Equal(v2.T(), nil, err)
	v2.ETHClient = client

	// execute BulkExecute Execute
	blur1, err := blur.NewBlurInterface(common.HexToAddress("0x000000000000Ad05Ccc4F10045630fb830B95127"), v2.ETHClient)
	require.Equal(v2.T(), nil, err)
	v2.Blur1 = blur1

	// execute BatchBuyWithERC20s BatchBuyWithETH
	blur2, err := blur.NewBlurInterface(common.HexToAddress("0x39da41747a83aee658334415666f3ef92dd0d541"), v2.ETHClient)
	require.Equal(v2.T(), nil, err)
	v2.Blur2 = blur2

	privKey, err := crypto.HexToECDSA(v2.ETHPrivKeyStr)
	require.Equal(v2.T(), nil, err)
	v2.ETHPrivKey = privKey

	auth, err := bind.NewKeyedTransactorWithChainID(v2.ETHPrivKey, big.NewInt(int64(v2.ChainIDETH)))
	require.Equal(v2.T(), nil, err)

	// deploy forwarder
	_, _, fwd, err := opensea.DeployOpensea(auth, v2.ETHClient)
	require.Equal(v2.T(), nil, err)
	v2.Forwarder = fwd

	// deploy blur proxy
	bPAddr, _, bProxy, err := blur.DeployBlur(auth, v2.ETHClient)
	fmt.Println(bPAddr.String())
	require.Equal(v2.T(), nil, err)
	v2.BlurProxy = bProxy
	v2.BlurProxyAddr = bPAddr
}

func (v2 *PBlurIntegrationTestSuite) TearDownSuite() {
	fmt.Println("Tearing down the suite...")
}

func (v2 *PBlurIntegrationTestSuite) SetupTest() {
	fmt.Println("Setting up the test...")
}

func (v2 *PBlurIntegrationTestSuite) TearDownTest() {
	fmt.Println("Tearing down the test...")
}

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestPBlurIntegration(t *testing.T) {
	fmt.Println("Starting entry point for pdao test suite...")
	tradingSuite := new(TradingTestSuite)
	suite.Run(t, tradingSuite)

	uniswapTradingSuite := NewPBlurIntegrationTestSuite(tradingSuite)
	suite.Run(t, uniswapTradingSuite)

	fmt.Println("Finishing entry point for pdao test suite...")
}

func (v2 *PBlurIntegrationTestSuite) TestPBlurCreateProp() {
	auth, err := bind.NewKeyedTransactorWithChainID(v2.ETHPrivKey, big.NewInt(int64(v2.ChainIDETH)))
	require.Equal(v2.T(), nil, err)

	calldataStr := ""
	calldata, _ := hex.DecodeString(calldataStr)
	iBlurProxyAbi, _ := abi.JSON(strings.NewReader(blur.BlurInterfaceMetaData.ABI))
	if method, ok := iBlurProxyAbi.Methods["batchBuyWithETH"]; ok {
		params, err := method.Inputs.Unpack(calldata[4:])
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf("execute: %+v\n", params)
	}
	recipient := common.HexToAddress("0x126748A0144968DD14b0187B906dE62378c59067")

	// 0.186 eth
	// buy 1 item blur
	calldataStr = "9a1fc3a70000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001c59fba8503c29bdf06093e5fe8859c5f731b941b22b821a1d1d2c8b819188107867a61b4e9bddad2de52a3bcea34bb4f67412140e451b492e06a1c9c1e471201e00000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033569c101562e1faf5b24581057e5cee4c8288d7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000006411739da1c40b106f8511de5d1fac0000000000000000000000001dc5d3b2162f9500d7ddec14eb0ba9ccb43bc20c0000000000000000000000000000000000000000000000000000000000001f2200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005543df729c000000000000000000000000000000000000000000000000000000000000635275a300000000000000000000000000000000000000000000000000000000643fc3a300000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000004b6bde3512770e2134c5f02df5efe97a000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000e0d0c735a5779919363db1deee102fa5536c93fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000587ff00d88a35dea6f9dcf644f418411cbe4bade1d1d59c4777bb8e110e15293330058e059bd7387157c269c2456a0ca94ca62752383463cbd5fd12c1ce9c9f2680316c28eb307dd37796e390f28eade9470faca2946339f6942edd413f56d4498eef8711a1eed481e792ff879687cb21628907e4044f2cdab720e6c7833a6c6ecc8a794bed6be0d905fb59ea5ba0e7366d22f41754038ede4f8e36ab90e67b1300000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea8d6a16ba2a4593a461acddbfa7fa656132c61c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006411739da1c40b106f8511de5d1fac0000000000000000000000001dc5d3b2162f9500d7ddec14eb0ba9ccb43bc20c0000000000000000000000000000000000000000000000000000000000001f2200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005543df729c000000000000000000000000000000000000000000000000000000000000635275a40000000000000000000000000000000000000000000000000000000063c44a2a00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000474962402c4aa8fa49a632032e7286a800000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	calldata, _ = hex.DecodeString(calldataStr)
	var sell *blur.Input
	var buy *blur.Input
	if method, ok := iBlurProxyAbi.Methods["execute"]; ok {
		params, err := method.Inputs.Unpack(calldata[4:])
		if err != nil {
			log.Fatal(err)
		}
		sell, err = ParseInput(params[0])
		require.Equal(v2.T(), nil, err)

		buy, err = ParseInput(params[1])
		require.Equal(v2.T(), nil, err)
	}
	value, ok := big.NewInt(0).SetString("24000000000000000", 10)
	require.Equal(v2.T(), true, ok)
	auth.Value = value

	blurProxy, _ := abi.JSON(strings.NewReader(blur.BlurMetaData.ABI))
	buy.Order.Trader = v2.BlurProxyAddr
	callDataBlur, err := blurProxy.Pack("execute", sell, buy, recipient)
	require.Equal(v2.T(), nil, err)
	_, err = v2.Forwarder.Forward(auth, v2.BlurProxyAddr, callDataBlur)
	require.Equal(v2.T(), nil, err)
	forwardAbi, _ := abi.JSON(strings.NewReader(opensea.OpenseaMetaData.ABI))
	calldata, err = forwardAbi.Pack("forward", v2.BlurProxyAddr, callDataBlur)
	require.Equal(v2.T(), nil, err)
	fmt.Printf("final build call data 1 item blur: %v \n\n", hex.EncodeToString(calldata))

	// buy n items blur
	calldataStr = ""
	calldata, _ = hex.DecodeString(calldataStr)
	var executions []blur.Execution
	if method, ok := iBlurProxyAbi.Methods["bulkExecute"]; ok {
		params, err := method.Inputs.UnpackValues(calldata[4:])
		if err != nil {
			log.Fatal(err)
		}
		require.Equal(v2.T(), 1, len(params))
		executions, err = ParseExecutions(params[0])
		for i, _ := range executions {
			executions[i].Buy.Order.Trader = v2.BlurProxyAddr
		}
	}
	// encode data
	callDataBlur, err = iBlurProxyAbi.Pack("bulkExecute", executions)
	require.Equal(v2.T(), nil, err)
	fmt.Println("encode executions: " + hex.EncodeToString(callDataBlur))
	value, ok = big.NewInt(0).SetString("47300000000000000", 10)
	require.Equal(v2.T(), true, ok)
	auth.Value = value

	callDataBlur, err = blurProxy.Pack("bulkExecute", executions, recipient)
	require.Equal(v2.T(), nil, err)
	_, err = v2.Forwarder.Forward(auth, v2.BlurProxyAddr, callDataBlur)
	require.Equal(v2.T(), nil, err)
	calldata, err = forwardAbi.Pack("forward", v2.BlurProxyAddr, callDataBlur)
	require.Equal(v2.T(), nil, err)
	fmt.Printf("final build call data n items blur: %v \n\n", hex.EncodeToString(calldata))

	// buy 1 opensea - 1 blur

	// buy 2 openseas

}

func ParseInput(input interface{}) (*blur.Input, error) {
	parseRes, ok := input.(struct {
		Order struct {
			Trader         common.Address `json:"trader"`
			Side           uint8          `json:"side"`
			MatchingPolicy common.Address `json:"matchingPolicy"`
			Collection     common.Address `json:"collection"`
			TokenId        *big.Int       `json:"tokenId"`
			Amount         *big.Int       `json:"amount"`
			PaymentToken   common.Address `json:"paymentToken"`
			Price          *big.Int       `json:"price"`
			ListingTime    *big.Int       `json:"listingTime"`
			ExpirationTime *big.Int       `json:"expirationTime"`
			Fees           []struct {
				Rate      uint16         `json:"rate"`
				Recipient common.Address `json:"recipient"`
			} `json:"fees"`
			Salt        *big.Int `json:"salt"`
			ExtraParams []byte   `json:"extraParams"`
		} `json:"order"`
		V                uint8    `json:"v"`
		R                [32]byte `json:"r"`
		S                [32]byte `json:"s"`
		ExtraSignature   []byte   `json:"extraSignature"`
		SignatureVersion uint8    `json:"signatureVersion"`
		BlockNumber      *big.Int `json:"blockNumber"`
	})
	if !ok {
		return nil, errors.New("pares input got error")
	}
	var result *blur.Input
	temporaryVariable, _ := json.Marshal(parseRes)
	err := json.Unmarshal(temporaryVariable, &result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func ParseExecutions(executions interface{}) ([]blur.Execution, error) {
	parseRes, ok := executions.([]struct {
		Sell struct {
			Order struct {
				Trader         common.Address `json:"trader"`
				Side           uint8          `json:"side"`
				MatchingPolicy common.Address `json:"matchingPolicy"`
				Collection     common.Address `json:"collection"`
				TokenId        *big.Int       `json:"tokenId"`
				Amount         *big.Int       `json:"amount"`
				PaymentToken   common.Address `json:"paymentToken"`
				Price          *big.Int       `json:"price"`
				ListingTime    *big.Int       `json:"listingTime"`
				ExpirationTime *big.Int       `json:"expirationTime"`
				Fees           []struct {
					Rate      uint16         `json:"rate"`
					Recipient common.Address `json:"recipient"`
				} `json:"fees"`
				Salt        *big.Int `json:"salt"`
				ExtraParams []byte   `json:"extraParams"`
			} `json:"order"`
			V                uint8    `json:"v"`
			R                [32]byte `json:"r"`
			S                [32]byte `json:"s"`
			ExtraSignature   []byte   `json:"extraSignature"`
			SignatureVersion uint8    `json:"signatureVersion"`
			BlockNumber      *big.Int `json:"blockNumber"`
		} `json:"sell"`
		Buy struct {
			Order struct {
				Trader         common.Address `json:"trader"`
				Side           uint8          `json:"side"`
				MatchingPolicy common.Address `json:"matchingPolicy"`
				Collection     common.Address `json:"collection"`
				TokenId        *big.Int       `json:"tokenId"`
				Amount         *big.Int       `json:"amount"`
				PaymentToken   common.Address `json:"paymentToken"`
				Price          *big.Int       `json:"price"`
				ListingTime    *big.Int       `json:"listingTime"`
				ExpirationTime *big.Int       `json:"expirationTime"`
				Fees           []struct {
					Rate      uint16         `json:"rate"`
					Recipient common.Address `json:"recipient"`
				} `json:"fees"`
				Salt        *big.Int `json:"salt"`
				ExtraParams []byte   `json:"extraParams"`
			} `json:"order"`
			V                uint8    `json:"v"`
			R                [32]byte `json:"r"`
			S                [32]byte `json:"s"`
			ExtraSignature   []byte   `json:"extraSignature"`
			SignatureVersion uint8    `json:"signatureVersion"`
			BlockNumber      *big.Int `json:"blockNumber"`
		} `json:"buy"`
	})
	if !ok {
		return nil, errors.New("pares input got error")
	}
	var result []blur.Execution
	temporaryVariable, _ := json.Marshal(parseRes)
	err := json.Unmarshal(temporaryVariable, &result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
